<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://ospfranco.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ospfranco.com/" rel="alternate" type="text/html" /><updated>2022-05-15T18:57:18+02:00</updated><id>https://ospfranco.com/feed.xml</id><title type="html">Oscar Franco</title><author><name>Oscar Franco</name></author><entry><title type="html">Frames of reference</title><link href="https://ospfranco.com/post/2022/03/13/frames-of-reference/" rel="alternate" type="text/html" title="Frames of reference" /><published>2022-03-13T14:00:00+01:00</published><updated>2022-03-13T14:00:00+01:00</updated><id>https://ospfranco.com/post/2022/03/13/frames%20of%20reference</id><content type="html" xml:base="https://ospfranco.com/post/2022/03/13/frames-of-reference/">&lt;p&gt;Every couple of weeks I randomly watch one of Jordan Peterson lecture videos, they are so cool. Today I stumbled upon this one:&lt;/p&gt;

&lt;iframe class=&quot;w-full my-10 h-96&quot; src=&quot;https://www.youtube.com/embed/H0VfPPzZoYw&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Recently I had a discussion with a girl I dated and I still care about. I wasn’t a fight, but our points of view differed diametrically. It was a though dicussion, but I realized we were both rambling about what we &lt;strong&gt;didn’t&lt;/strong&gt; want. Our communication, via our indirection and our fear of confrontation, was mudled.&lt;/p&gt;

&lt;p&gt;At some point we did manage to tell each other some version of what we &lt;strong&gt;do&lt;/strong&gt; want. Or at least I thought we did… now I have had a couple of days to try to understand what we both said, the truth is I still have no clue what it means. Behind every emotion there is an ocean of complexity. In our internal logic is choke full of contradictions, this applies to every single one of us.&lt;/p&gt;

&lt;p&gt;This is what made this little lecture so damn interesting. I started to explain her arguments to myself (as well as I can remember it). What an eye opening exercise. I think I’m still far away from grasping the full implications of what was said, but at least I think I’m now managing to pull the minimal thread of understanding. Am I happy with the message? not really, but it’s better to live life with eyes open.&lt;/p&gt;

&lt;p&gt;Forget now about my relationship troubles, there is a gem of wisdom here to learn: it all boils down to frames of reference, even though the words might be the same, their meaning changes depending on our feelings and moods. To have a recipe to adopt somebody else’s frame of reference is nothing short of a super power.&lt;/p&gt;

&lt;p&gt;Extrapolate this to most of the interactions you have on a day to day basis. What a complex and chaotic interaction, on which we (try to) communicate at the velocity of speech. Almost overwhelming, but damn interesting if you ask me.&lt;/p&gt;</content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html">Every couple of weeks I randomly watch one of Jordan Peterson lecture videos, they are so cool. Today I stumbled upon this one:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Email templates with React and Tailwind</title><link href="https://ospfranco.com/post/2022/01/08/email-templates-with-react-and-tailwind/" rel="alternate" type="text/html" title="Email templates with React and Tailwind" /><published>2022-01-08T14:00:00+01:00</published><updated>2022-01-08T14:00:00+01:00</updated><id>https://ospfranco.com/post/2022/01/08/email%20templates%20with%20react%20and%20tailwind</id><content type="html" xml:base="https://ospfranco.com/post/2022/01/08/email-templates-with-react-and-tailwind/">&lt;p&gt;Sending emails is basic SaaS 101, however it always feel broken to me. Instead of using the same tools I used to develop my apps, I always ended up importing a different framework, we used to use one many years ago with Java, on Node we used handlebars, this is just one more link of complexity in the modern tech stack.&lt;/p&gt;

&lt;p&gt;I didn’t want to go down that path one more time, so I spend some time trying to answer one question: can I create a email template using only React and Tailwind (with my existing configuration) and the answer is: YES! well, mostly…&lt;/p&gt;

&lt;h2 id=&quot;render-a-react-component-to-plain-html-markup&quot;&gt;Render a React component to plain HTML Markup&lt;/h2&gt;

&lt;p&gt;The first part of this question was the easiest to answer, how to turn a React component into raw html string:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// unfortunately no type information for this module&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @ts-ignore&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactDOMServer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react-dom/server&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TestMail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// important to keep the color scheme on some email clients&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* &amp;lt;meta name=&quot;color-scheme&quot; content=&quot;only&quot;&amp;gt;&amp;lt;/meta&amp;gt; */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// We will use this later&amp;lt;/head&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;py-3&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hi&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;am&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;react&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/html&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emailHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactDOMServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderToStaticMarkup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TestMail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will take a React component and render it as a plain HTML markup, you can see I have a tailwind class in there &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;py-3&lt;/code&gt;, unfortunately if you take a look inside the html, you will see it has not been transpiled, so we need to run this html through an inliner to it inlines all the classes as embedded style props in the html.&lt;/p&gt;

&lt;p&gt;This was the tricky part, there are some frameworks that try to solve this exact problem, like maizzle for example, but just by reading the home page I already see an ocean of complexity, so early in my googling I stumbled upon &lt;a href=&quot;https://github.com/soheilpro/mailwind&quot;&gt;Mailwind&lt;/a&gt;, the instructions were scant, but it was exactly what I wanted, it works based on &lt;a href=&quot;https://github.com/Automattic/juice&quot;&gt;Juice&lt;/a&gt;, not going to bore you with the details, here is the snippet that makes it work:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;juice&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;juice&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;juicify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;juice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;juiceResources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;webResources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;relativeTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;public/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Could not juice email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You also need to update the email component to include a stylesheet in the head tag:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* eslint-disable-next-line @next/next/no-css-tags */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mailwind.css&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;stylesheet&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/head&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can already see that you need to import mailwind.css file and make it accessible somewhere in your project, on the juicify function the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;relativeTo&lt;/code&gt; path, will allow juice to correctly determine where to fetch the .css file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And TA-DA you have working email templates with React and Tailwind, no need for complex framework, configuration files, etc. The juicify function will output a raw string, which you can send to your email distributor and it should work just fine.&lt;/p&gt;

&lt;h2 id=&quot;the-caveat&quot;&gt;The caveat&lt;/h2&gt;

&lt;p&gt;Now there is one small caveat here, which is the mailwind.css file, it’s not going to be your application styles, some of the changes are good, for example everything being based on px styles, but you might need your own colors, or paddings, etc.&lt;/p&gt;

&lt;p&gt;TBH this is where I stopped because this is good enough for me, but if you really need your own styles, I figure this is not too hard to achieve, you basically need to tell tailwind to process your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tailwind.config.js&lt;/code&gt; and spit out a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.css&lt;/code&gt; file, shouldn’t be too hard, the small details of PX units I have not tried, but I think that should also be fixable. For me I only had to add 2 - 3 classes with some extra fill colors, and I can live with that.&lt;/p&gt;</content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html">Sending emails is basic SaaS 101, however it always feel broken to me. Instead of using the same tools I used to develop my apps, I always ended up importing a different framework, we used to use one many years ago with Java, on Node we used handlebars, this is just one more link of complexity in the modern tech stack.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Reset NVRAM on m1 mac</title><link href="https://ospfranco.com/post/2021/12/21/reset-nvram-on-m1-mac/" rel="alternate" type="text/html" title="Reset NVRAM on m1 mac" /><published>2021-12-21T14:00:00+01:00</published><updated>2021-12-21T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/12/21/reset%20nvram%20on%20m1%20mac</id><content type="html" xml:base="https://ospfranco.com/post/2021/12/21/reset-nvram-on-m1-mac/">&lt;p&gt;I needed to reset my M1 NVRAM for reasons, here to save you some seconds of googling&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nvram -c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You might see some errors regarding some services that cannot be restarted (fmm-mobileme and fmm-computer-name), but you can ignore those, afterwards restart your computer and it should be fine&lt;/p&gt;</content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html">I needed to reset my M1 NVRAM for reasons, here to save you some seconds of googling</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Never use anything except a pure UUID (Anti REGEX argument)</title><link href="https://ospfranco.com/post/2021/12/18/never-use-anything-except-a-pure-uuid/" rel="alternate" type="text/html" title="Never use anything except a pure UUID (Anti REGEX argument)" /><published>2021-12-18T14:00:00+01:00</published><updated>2021-12-18T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/12/18/never%20use%20anything%20except%20a%20pure%20uuid</id><content type="html" xml:base="https://ospfranco.com/post/2021/12/18/never-use-anything-except-a-pure-uuid/">&lt;p&gt;Browsing my notes found this small gem&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Use UUIDs for id-ing your entities. Period.&lt;/p&gt;

  &lt;p&gt;Do not use anything else, don’t try to be clever, it just creates embedded logic and soon you will find yourself regexing your ids like a chump&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;lesson-never-learned&quot;&gt;Lesson never learned&lt;/h2&gt;

&lt;p&gt;I first came into this idea many years ago, my college professor was in charge of designing and leading the team responsible for the student system (assignments, class schedules, notes, etc), they bought an Israeli system and then adapted it for our university.&lt;/p&gt;

&lt;p&gt;At the time, my professor thought it would be a great idea to make the user ids contain some extra information, so that one could at first glance tell the enrollment year and the student age, so each student id would be something like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[enrollment_year]_[birth_year]_[id_number]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is great in theory, whoemever is in charge already gets some information without needing to type the id into the system.&lt;/p&gt;

&lt;h2 id=&quot;embedded-logic&quot;&gt;Embedded logic&lt;/h2&gt;

&lt;p&gt;In real life, this created a slew of problems, one of them was that the students id were easily guessable, this created a lot of problems with phishing attempts, this had serious consequences.&lt;/p&gt;

&lt;p&gt;But another more subtle was the consequence for the project code itself, since some of the information now did not need a query to the database, then came the REGEXES, to parse and extract this meta information from the IDs.&lt;/p&gt;

&lt;p&gt;This generates a lot implicit and embedded logic, what if the ID needs to be changed? then entire parts of the system didn’t work properly anymore.&lt;/p&gt;

&lt;h2 id=&quot;regexes-are-fine-on-5-of-the-cases&quot;&gt;REGEXES are fine on 5% of the cases&lt;/h2&gt;

&lt;p&gt;Regexes definitely have their use cases, especially when extracting information from a third-party data source, where you have no control over the data you are getting.&lt;/p&gt;

&lt;p&gt;But please, don’t ever try to embed data in your systems.&lt;/p&gt;</content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html">Browsing my notes found this small gem</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to install M1 (arm) compatible JDK</title><link href="https://ospfranco.com/post/2021/12/11/how-to-install-m1-(arm)-compatible-jdk/" rel="alternate" type="text/html" title="How to install M1 (arm) compatible JDK" /><published>2021-12-11T14:00:00+01:00</published><updated>2021-12-11T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/12/11/how%20to%20install%20m1%20(arm)%20compatible%20jdk</id><content type="html" xml:base="https://ospfranco.com/post/2021/12/11/how-to-install-m1-(arm)-compatible-jdk/">&lt;p&gt;Recently found out a nice trick to easily install a compatible JDK on mac without scouring the internet or brew formulas.&lt;/p&gt;

&lt;p&gt;You can directly do it via Android Studio (or intellij IDEA), just go into the preferences and on the build tools &amp;gt; gradle menu, you can select which version of the JDK you want to use, if you open the dropdown you will see there is also an option to download a JDK.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ospfranco.com/assets/androidStudio1.png&quot; alt=&quot;Android Studio 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on it and you will get a small dialog were you can select the flavor of JDK you want, I know for certain that the Azul versions are arm compatible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ospfranco.com/assets/androidStudio2.png&quot; alt=&quot;Android Studio 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(BTW I’m using the Android Studio Preview to get native arm android images)&lt;/p&gt;

&lt;p&gt;Very convenient!&lt;/p&gt;</content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html">Recently found out a nice trick to easily install a compatible JDK on mac without scouring the internet or brew formulas.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Beauty on code iterations</title><link href="https://ospfranco.com/post/2021/12/08/beauty-on-code-iterations/" rel="alternate" type="text/html" title="Beauty on code iterations" /><published>2021-12-08T14:00:00+01:00</published><updated>2021-12-08T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/12/08/beauty%20on%20code%20iterations</id><content type="html" xml:base="https://ospfranco.com/post/2021/12/08/beauty-on-code-iterations/">&lt;p&gt;A perfect model of your problem exists, you will just never be able to find it and that &lt;strong&gt;should&lt;/strong&gt; be OK.&lt;/p&gt;

&lt;p&gt;I believe the moment you have typed your code, it’s already becoming obsolete and it’s already wrong, because of your understanding of the problem will only expand with time, and since every problem is an ocean of complexity, you are pretty much hopeless in trying to code your way to enlightenment.&lt;/p&gt;

&lt;p&gt;My approach: do OK code when solving the problem for the first time, fast, kinda dirty, see how it performs, see if it solves the problem, with a bit of time and patience you will see patterns solidify. The catch is: you have to clean it up, with the same energy and fervour you wrote it the first time.&lt;/p&gt;

&lt;p&gt;I find this technique so invigorating though, instead of sloshing through endless discussions, I get the satisfaction of solving the problem first, instead of wasting my time on a potential dead-end. Afterwards, I get the pleasure of polishing the solution to a shiny state.&lt;/p&gt;

&lt;p&gt;Now if I could only convince my team to see it that way…&lt;/p&gt;</content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html">A perfect model of your problem exists, you will just never be able to find it and that should be OK.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Startups Latinoamerica</title><link href="https://ospfranco.com/post/2021/11/04/startups-latinoamerica/" rel="alternate" type="text/html" title="Startups Latinoamerica" /><published>2021-11-04T14:00:00+01:00</published><updated>2021-11-04T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/11/04/startups%20latinoamerica</id><content type="html" xml:base="https://ospfranco.com/post/2021/11/04/startups-latinoamerica/">&lt;p&gt;Aquí les dejo la presentanción de la charla sobre Startups en Latinoamérica:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ospfranco.com/assets/StartUpsLatinoamerica.key&quot;&gt;Presentación&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Espero ver alguna Startup Boliviana en algunos años! Si necesitan apoyo no duden en contactarme!&lt;/p&gt;</content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html">Aquí les dejo la presentanción de la charla sobre Startups en Latinoamérica:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Stop throwing exceptions</title><link href="https://ospfranco.com/post/2021/08/31/stop-throwing-exceptions/" rel="alternate" type="text/html" title="Stop throwing exceptions" /><published>2021-08-31T15:00:00+02:00</published><updated>2021-08-31T15:00:00+02:00</updated><id>https://ospfranco.com/post/2021/08/31/stop%20throwing%20exceptions</id><content type="html" xml:base="https://ospfranco.com/post/2021/08/31/stop-throwing-exceptions/">&lt;p&gt;Throwing exceptions makes programms unpredictable by breaking the normal control flow.&lt;/p&gt;

&lt;p&gt;A simple axiom: &lt;strong&gt;unexpected things happen all the time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Some unexpected things are common: users input weird characters, things get deleted, libraries have unexpected behaviors, etc. However, other unexpected things cannot be recovered from: disks get full, dll is missing, program is missconfigured, etc. Today’s ecosystem treats every exception as equal.&lt;/p&gt;

&lt;p&gt;The real problem comes when we forget to handle these exceptions or we don’t know the code we are calling can throw exceptions.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// oops forgot to sanitize my input&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;10a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// APPLICATION CRASH! 10a cannot be parsed as a int!&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;originalDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setDay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toISO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// it might not even be thrown by the date library, but some second level dependency...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A lot of times this code is implicit and invisible to the application developer. The exception simply bulldozes and bubbles until it is catched or crashes the programm.&lt;/p&gt;

&lt;p&gt;There lies one of the biggest problems: &lt;strong&gt;how do I know which function can throw?&lt;/strong&gt; do I have to try/catch every line of code I have not written myself?&lt;/p&gt;

&lt;h1 id=&quot;kernel-errors&quot;&gt;Kernel errors&lt;/h1&gt;

&lt;p&gt;If exceptions are so disruptive to the flow of a program, why do we use them?&lt;/p&gt;

&lt;p&gt;In the earlier days of computing, programs were not as brittle, that is because exceptions were reserved for kernel panic calls. If your program succesfully executed its task it would terminate with a 0 integer and anything else meant a unsuccessful execution. This is still visible in today’s shell scripts, where if a command fails with a non-zero exit code, it means it has not succesfully completed.&lt;/p&gt;

&lt;p&gt;Inspired by this kernel exceptions the developer community seems to have thought: “that’s a neat trick! I can just throw an exception here and catch it somewhere above my stack! It even unwinds the call stack for me!”. Other words: short-term convenience.&lt;/p&gt;

&lt;p&gt;But this short-term convenience carried a price, &lt;strong&gt;it added implicit behavior to ALL code&lt;/strong&gt;, you could no longer read the calling code and understand what was going on without understanding the whole.&lt;/p&gt;

&lt;p&gt;I believe user code without exceptions makes for a easier pattern to understand, debug and maintain.&lt;/p&gt;

&lt;h1 id=&quot;error-carrying-monads&quot;&gt;Error carrying monads&lt;/h1&gt;

&lt;p&gt;What if every function not only returned the output but any error it produces.&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;10a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;originalDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setDay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toISO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// handle the error gracefully&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// do my thing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This brings multiple benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Code that can fail becomes explicit (even better with TypeScript)&lt;/li&gt;
  &lt;li&gt;Errors are part of the normal flow of a program&lt;/li&gt;
  &lt;li&gt;Easily readable and the intention of the code is clear&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many of the new languages, like Rust or Swift, have now used composite types that carry this information, which will even force you to handle code that can fail. For example in Rust:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is what is called an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error Monad&lt;/code&gt;. This struct is not available in JavaScript yet, but you can return tuples or objects and the result is just as good!&lt;/p&gt;

&lt;h1 id=&quot;use-exceptions-for-real-panics&quot;&gt;Use exceptions for real panics&lt;/h1&gt;

&lt;p&gt;So now you can let real “exceptions” be what they were meant for &lt;strong&gt;unrecoverable program state&lt;/strong&gt; and therefore should crash the application. Whereas the rest of your code will just be better.&lt;/p&gt;

&lt;p&gt;I have encountered some libraries that follow this pattern, joi for example, as well as some API libraries like Stripe.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;Although I tweeted about this issue before, it was only after reading &lt;a href=&quot;https://humanlytyped.hashnode.dev/away-from-exceptions-errors-as-values&quot;&gt;Barise’s article&lt;/a&gt; that I decided to write my own. And there are many more articles on the topic: &lt;a href=&quot;https://mattwarren.org/2016/12/20/Why-Exceptions-should-be-Exceptional/&quot;&gt;some against exceptions&lt;/a&gt; some &lt;a href=&quot;https://blog.plan99.net/what-s-wrong-with-exceptions-nothing-cee2ed0616&quot;&gt;for them&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I believe some of the claims &lt;strong&gt;for&lt;/strong&gt; exceptions are quite missguided, such as: fast prototyping! Stack traces! etc. Exceptions are definitely useful and as stated some of this mechanisms are golden for real exceptional situations, but hurt so much when used freely and carelessly.&lt;/p&gt;

&lt;h1 id=&quot;bonus-js-exceptions-can-leak-memory&quot;&gt;Bonus: JS exceptions can leak memory&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://ospfranco.com/assets/errorStack.png&quot; alt=&quot;errorStack&quot; title=&quot;errorStack&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The error keeps the function frames around until it the stack string is created or it is garbage collected&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s a bit of an edge case, but given a large enough application it’s bound to happen.&lt;/p&gt;</content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html">Throwing exceptions makes programms unpredictable by breaking the normal control flow.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to visualize Flowtype dependency tree</title><link href="https://ospfranco.com/post/2021/08/25/how-to-visualize-flowtype-dependency-tree/" rel="alternate" type="text/html" title="How to visualize Flowtype dependency tree" /><published>2021-08-25T15:00:00+02:00</published><updated>2021-08-25T15:00:00+02:00</updated><id>https://ospfranco.com/post/2021/08/25/how%20to%20visualize%20flowtype%20dependency%20tree</id><content type="html" xml:base="https://ospfranco.com/post/2021/08/25/how-to-visualize-flowtype-dependency-tree/">&lt;p&gt;At work we use &lt;a href=&quot;https://flow.org&quot;&gt;FlowType&lt;/a&gt; on our JavaScript application. I’m a fan of JS type checkers, flow is not my favorite, but what is important is that it works.&lt;/p&gt;

&lt;p&gt;However, when I joined the company I was surprised on how slow Flow was in our project. The project is large but not extremely large. Facebook codebase is orders of magnitude bigger, yet this is the performance I see sometimes&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/hloQX8wG0t0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Upon saving this file, flow triggers a ~420 file dependency check and takes ~10 seconds to actually report any type errors.&lt;/p&gt;

&lt;h1 id=&quot;check-that-nothing-else-is-wrongly-set-up&quot;&gt;Check that nothing else is wrongly set up&lt;/h1&gt;

&lt;p&gt;First I started checking nothing was poorly set up in our project. A lot of the debugging &lt;a href=&quot;https://stackoverflow.com/questions/68833468/how-to-debug-flowtype-extreme-slow-performance?noredirect=1#comment121793043_68833468&quot;&gt;help came from Stack Overflow&lt;/a&gt; and other people with flow experience.&lt;/p&gt;

&lt;p&gt;Some of the things I tried:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deleting flow-typed definitions: sometimes they contain cycles or redundant definitions which can slow down flow&lt;/li&gt;
  &lt;li&gt;Got rid of circular dependencies: we had 2 - 3 circular dependencies in our code&lt;/li&gt;
  &lt;li&gt;Shuffled around types: Moved types here and there to no avail&lt;/li&gt;
  &lt;li&gt;Messed around with the .flowconfig: set up LSP, lazy mode FS, changed max workers, toggled various flags&lt;/li&gt;
  &lt;li&gt;Blamed the plugin: I’m using the FB plugin for flow on VSCode, which does seems to over-query the flow server on each keystroke, tried another plugin which only queries on save, feels like a minor improvement but still slow&lt;/li&gt;
  &lt;li&gt;Tried several small flow repos: none experienced this slow down&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;assume-flow-is-actually-right&quot;&gt;Assume flow is actually right&lt;/h1&gt;

&lt;p&gt;Flow is a large project and facebook depends on it, so the chances that it is doing something wrong are slim, but I couldn’t believe making a change on certain file, did indeed trigger a 400+ file check. I needed to make sure.&lt;/p&gt;

&lt;p&gt;I scoured the web trying to find out how debug the type dependency tree, but found nothing. The biggest pain point for me about flow, is the utter lack of documentation and community, the flow team also pays very little attention to the outside world and their priority is to support the facebook codebase.&lt;/p&gt;

&lt;p&gt;After many hours ended up figuring out the right command to output the entire dependency graph for the app:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn flow graph dep-graph &lt;span class=&quot;nt&quot;&gt;--strip-root&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--out&lt;/span&gt; ./output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This however it only produces the entire app graph… you can imagine this file is hundred thousand of lines of dependencies. In any case, this outputs a DOT file (from graphviz), which in theory you can easily visualize by using the right command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# install dot via &quot;brew install graphviz&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# I tried a png first... it just fails&lt;/span&gt;

dot &lt;span class=&quot;nt&quot;&gt;-Tsvg&lt;/span&gt; output &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; graph.svg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This produces an svg so massive and so filled with squigly lines it is effectively useless… so I had to narrow down the output to just an entry file which I’m interested. Unfortunately the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;graph&lt;/code&gt; command does not take an entry point to generate the graph, so I had to manually narrow down the graph that I had. Here is the gist with the script I ended up coming up with:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ospfranco/d599a68f1a2fe1f39a457162238fec78.js&quot;&gt;&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: I removed the first and last line of the graph file before passing it to the script&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This allowed me to crawl through the entries and finally specify an entry point to the sub-tree that interested me. Once narrowed down, I could finally produce another visualization, and the result is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ospfranco.com/assets/flowdep1.png&quot; alt=&quot;flowdep1&quot; title=&quot;flowdep1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Terrible! But not all is useless, I can see the direct imports from the file are correct… and I can indeed see things spiral out of control, importing certain files ends up pulling the entire application code!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ospfranco.com/assets/flowdep2.png&quot; alt=&quot;flowdep1&quot; title=&quot;flowdep1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The count of objects in this sub-graph also seems to match closely the output produced by flow, this sub-graph has 415 nodes and the editor triggers a 420 file re-check.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion?&lt;/h1&gt;

&lt;p&gt;Well… it seems to me Flow is doing nothing wrong, it indeed produces the correct dependency graph, but rather that our import structure has grown unchecked so large over the years that we have some architectural mistakes we cannot escape.&lt;/p&gt;

&lt;p&gt;My current analysis is that Redux and Sagas are mostly to blame, the boiler plate nature of it and the coupling of action creators, action definitions and the reducers into single files ends up creating this web of dependencies.&lt;/p&gt;

&lt;p&gt;Some very abstract suggestions for those along this path:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Do not place your action definitions (and creators if you use them) inside the same files as your reducers.&lt;/li&gt;
  &lt;li&gt;The moment you start seeing a performance degradation in your type checking, is the time to figure out why, pushing the can down the road will lead to trouble.&lt;/li&gt;
  &lt;li&gt;Come up with a sane import architecture, minimizing the dependencies between separate files. I think I will write about this in the future.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html">At work we use FlowType on our JavaScript application. I’m a fan of JS type checkers, flow is not my favorite, but what is important is that it works.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Unhappy for years, until I switched to working 3 days a week</title><link href="https://ospfranco.com/post/2021/08/22/unhappy-for-years,-until-i-switched-to-working-3-days-a-week/" rel="alternate" type="text/html" title="Unhappy for years, until I switched to working 3 days a week" /><published>2021-08-22T15:00:00+02:00</published><updated>2021-08-22T15:00:00+02:00</updated><id>https://ospfranco.com/post/2021/08/22/unhappy%20for%20years,%20until%20i%20switched%20to%20working%203%20days%20a%20week</id><content type="html" xml:base="https://ospfranco.com/post/2021/08/22/unhappy-for-years,-until-i-switched-to-working-3-days-a-week/">&lt;p&gt;The other day I posted a twitter thread about how my quality of life massively improved after I started working only 3 days per week, but twitter is a poor medium and I feel like I still have a couple of things to say.&lt;/p&gt;

&lt;p&gt;You can find the original thread here:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;You probably need a lot less than what you think&lt;br /&gt;&lt;br /&gt;Since 2 months ago I work only from Monday to Wednesday and it&amp;#39;s life changing, now I get to go surfing on a Thursday at 10:00&lt;br /&gt;&lt;br /&gt;Here is why I did it and why you should too&lt;br /&gt;&lt;br /&gt;🧵 &lt;a href=&quot;https://t.co/gqJzVAwAVi&quot;&gt;pic.twitter.com/gqJzVAwAVi&lt;/a&gt;&lt;/p&gt;&amp;mdash; Oscar (@ospfranco) &lt;a href=&quot;https://twitter.com/ospfranco/status/1425765893590638592?ref_src=twsrc%5Etfw&quot;&gt;August 12, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;First some context, I started working around 10 years ago with a off-shoring software company in Bolivia, pay was good(ish) but the attitude of the people running the company was so terrible, some were americans but the CEO was US-born/Bolivian, and they basically saw the local developers as cheap nerds but nothing else. Lasted 6 months in the company.&lt;/p&gt;

&lt;p&gt;Then I freelanced for some years, there I earned a bunch of money (due to Bolivia being so cheap and salary in USD) and was actually a very entertaining time for me, learned a lot and had a lot of freedom. After some time I got bored of working alone and wanted to try something new and decided to move to Germany.&lt;/p&gt;

&lt;p&gt;Here is where the wild ride starts. Unlike in Bolivia where I was a gun for hire, this time I got to see the software industry close and personal. The dreams of money and success, the buzz of silicon valley reaching its tendrils all the way to Europe. Work is work, but the tech industry (currently) attracts every hustler on the scale.&lt;/p&gt;

&lt;p&gt;I basically ended up working for a bunch of start ups, each progressively worst for my physical and mental health, and I wasn’t alone, co-workers ended up doing therapy or we still talk/get together to process what happened to us during this times. The constant push, combined with the lack of basic human decency is soul-crushing.&lt;/p&gt;

&lt;p&gt;So around the beginning of 2020 I had the nose full, I quit the last start-up and spend some months recovering, I was planning on going back to freelancing, but the pandemic made me uncertain if I could achieve it… so I decided to join a small bootstrapped company with a single app as a revenue source.&lt;/p&gt;

&lt;p&gt;There are many good things about small-bootstrapped; no impossible and imaginary deadlines, very little planning overhead or planning at all (can be both bad and good), there are also some bad things; work is sometimes chaotic and tedious, and very little room for making your own decisions. And around half a year ago I was wondering if I should start looking for a new position, since I was started to feel stuck and bored.&lt;/p&gt;

&lt;p&gt;But given my previous experiences, were could I go? Everyone and their grandma is aiming for the unicorn start-up dream, almost exclusively a loosing bet (since 95% die after a couple of years anyways), I didn’t want to go back to the stress and no-life of working in a high-pressure environment, so I came up with an idea: Even though current work was not the most exciting, it was completely manageable and paid well enough for me not to complain, the problem is that I could not bring myself to doing it 5 days of the week.&lt;/p&gt;

&lt;p&gt;The owners of the company like me, so we agreed to reduce the working hours to 60%, three work days a week… and let me tell you, my quality of life SKYROCKETED, I haven’t feel this satisfied with life since I left college and I felt the world is filled with possibilities.&lt;/p&gt;

&lt;p&gt;Here is the run down of how my week works:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mon to Wed: Normal work, when work is good/entertaining actually quite enjoyable, because for a few days a week I get to work on a team, also not responsible for high-level decisions, just come do some work, get paid for it. If work is bad, it’s almost over immediately, I only need to push through for a couple of days and then it’s over for 4 days, by next week either some situations have resolved themselves or I feel energized again to tackle the problems&lt;/li&gt;
  &lt;li&gt;Thu to Fri: I get to focus on my own projects, I write blog posts, I do open source, I explore ideas for bootstrapping my own company, but it’s super flexible, I sometimes go surfing, running, hiking, everything is super empty because most people are stuck at work. And even though I work, it does not feel like work!&lt;/li&gt;
  &lt;li&gt;Sat: Sometimes I work a bit more but try not to do the same time of work… usually stop around noon and meet with friends to other stuff on the evening&lt;/li&gt;
  &lt;li&gt;Sun: For the first time since I was 20… I do nothing, by the time Sunday comes around, I have already done so much of the stuff I wanted to get done, that I for once get to do NOTHING, I watch so movies, go do some sport, meet with friends without the guilt I would usually feel of not hustling, and it feels SO liberating, it’s really hard to put into words&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some very real downsides: I took a significant pay cut. A company reached out to me a few weeks ago, they offered me a salary bump and stocks over my current position, but I had to go back to full time job… I couldn’t bring myself to do it. If you live in the developed world maybe you understand my position. A 10/20k salary increase does not change my life at all, buying an apartment/house is still hopelessly impossible, I don’t have a car (nor I want to) and my free time consists of almost free activities (being outdoors is IMHO is the best thing you can do for your life).&lt;/p&gt;

&lt;p&gt;Turns out, the secret to my happiness was not to chase money down the beaten path whilst enduring a work-life that made me miserable, but rather to get rid of this way (or at least reduce it to it’s minimum while still reaping most/some of the benefits).&lt;/p&gt;</content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html">The other day I posted a twitter thread about how my quality of life massively improved after I started working only 3 days per week, but twitter is a poor medium and I feel like I still have a couple of things to say.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>