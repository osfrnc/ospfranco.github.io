<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://ospfranco.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ospfranco.com/" rel="alternate" type="text/html" /><updated>2023-08-08T17:17:13+02:00</updated><id>https://ospfranco.com/feed.xml</id><title type="html">Oscar Franco</title><author><name>Oscar Franco</name></author><entry><title type="html">State of the software industry</title><link href="https://ospfranco.com/post/2022/10/05/state-of-the-software-industry/" rel="alternate" type="text/html" title="State of the software industry" /><published>2022-10-05T15:00:00+02:00</published><updated>2022-10-05T15:00:00+02:00</updated><id>https://ospfranco.com/post/2022/10/05/state%20of%20the%20software%20industry</id><content type="html" xml:base="https://ospfranco.com/post/2022/10/05/state-of-the-software-industry/"><![CDATA[<p>A few days ago I had the joy of interacting with a python utility use serial port to communicate with a hardware device. This piece of software although very useful has one quirk that drove me absolutely insane. I does not respond to Ctrl + C to quit itself, instead relying on a non-standard Ctrl + ]. I bashed my keyboard for a couple of minutes in frustration trying to exit this program.</p>

<p>I feel the software world is too much of a wild west. Unlike other engineering branches the current software landscape is too devoid of standards, certifications and conventions. This impacts us all even if we don’t like it. From supply chain vunerabilities and lack of security practices (due to incompetence or just pure missunderstanding) to more simple stuff like non-standard keyboard shortcuts.</p>

<p>You could argue this lack of regulation does promote a faster evolution of software programs, but would you trust driving over a bridge that hasn’t been built to a certain quality and security standard? Because that is what we do every single day we use software.</p>

<p>The closest to a standard and regulation I can think of is Apple with it’s draconian app store guidelines. This however is a for-profit corpo and we are slowly starting to see it plays to benefit itself (clamping down on user tracking for third parties but happily allowing within it’s own apps). That more people are not outraged about this is a hard to swallow pill.</p>

<p>I’m greatful for this amazing free pieces of software on which we all rely day in and day out, but I wish we had our own Software Engineering Association and some certification process. We as an industry need to move forward together.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[A few days ago I had the joy of interacting with a python utility use serial port to communicate with a hardware device. This piece of software although very useful has one quirk that drove me absolutely insane. I does not respond to Ctrl + C to quit itself, instead relying on a non-standard Ctrl + ]. I bashed my keyboard for a couple of minutes in frustration trying to exit this program.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Sustainable Open Source Manifesto</title><link href="https://ospfranco.com/post/2022/07/27/sustainable-open-source-manifesto/" rel="alternate" type="text/html" title="Sustainable Open Source Manifesto" /><published>2022-07-27T15:00:00+02:00</published><updated>2022-07-27T15:00:00+02:00</updated><id>https://ospfranco.com/post/2022/07/27/sustainable%20open%20source%20manifesto</id><content type="html" xml:base="https://ospfranco.com/post/2022/07/27/sustainable-open-source-manifesto/"><![CDATA[<p>OSS (Open Source Software) has won the battle. Every aspect of modern life is at least partly powered by it. OSS is also unsustainable. Organizations and individuals benefit from it, yet little is given in return. OSS is also hard. A considerable amount of time and effort is required to maintain code and deal with demanding strangers. I would like to continue doing Open Source but I do not enjoy the current status quo, therefore I am from here on now going to use a different model. Here are some of the core tenets:</p>

<ul>
  <li>Libraries I develop will still be MIT with all its stipulations; free, distributable, etc.</li>
  <li>I do not owe you (user of my library) absolutely anything except the respect and decency I would give any other person. My goodwill ends at me providing my code to you.</li>
  <li>If you open a ticket and it is not a problem with my code but a layer 8 problem, I will just close the issue and point you to Stack Overflow.</li>
  <li>If you want me to spend time <strong>helping you</strong>: giving hints, teaching you how to do something, fixing your code, <strong>from now on you will have to donate</strong> (I have enabled Github Sponsors).</li>
  <li>If you open a ticket and I determine it is a bug, you have taken the time to explore the causes or provide a reproducible example, I appreciate it greatly and might fix the issue in a promptly manner. However I might just consider the bug trivial or not worth my time. You can change this by donating.</li>
  <li>If you have a disagreement or a different opinion how the package is built, its API or any other aspect that functionally does not prevent the package from working, you will be required to donate for me to take time to evaluate/patch/update the package.</li>
  <li>Contributors are mostly exempt from donating. You are giving something back, I appreciate that! However some changes might require too much work/effort on my part. I will evaluate this on a per-case basis.</li>
  <li>There is nothing I can do to stop large organizations from greatly benefiting from my OSS work. I can only plead to good conscience, however I would expect a sponsorship as a must. Even for trivial bugs and PRs. It’s only fair.</li>
</ul>

<p>Basically it all comes down to: Doing OSS is hard and leads to burn outs, I don’t want to burn. I already gave you my code (which is a proxy for my time and years of knowledge) to you for free. You give me money, I spend my time (which I personally value very highly) helping you. Sounds like a fair deal to me.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[OSS (Open Source Software) has won the battle. Every aspect of modern life is at least partly powered by it. OSS is also unsustainable. Organizations and individuals benefit from it, yet little is given in return. OSS is also hard. A considerable amount of time and effort is required to maintain code and deal with demanding strangers. I would like to continue doing Open Source but I do not enjoy the current status quo, therefore I am from here on now going to use a different model. Here are some of the core tenets:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">React Native JSI/TurboModules pitfalls</title><link href="https://ospfranco.com/post/2022/06/05/jsi-pitfalls/" rel="alternate" type="text/html" title="React Native JSI/TurboModules pitfalls" /><published>2022-06-05T15:00:00+02:00</published><updated>2022-06-05T15:00:00+02:00</updated><id>https://ospfranco.com/post/2022/06/05/jsi%20pitfalls</id><content type="html" xml:base="https://ospfranco.com/post/2022/06/05/jsi-pitfalls/"><![CDATA[<p>Here is the latest information dump my findings with React Native’s JSI.</p>

<h1 id="speed-is-relative">Speed is relative</h1>

<p>C++ is the fastest but Swift is fast, Java ByteCode is also fast. Using JSI/TurboModules won’t necessarily make your module faster. <strong>The JSI is a communication layer</strong>, therefore it excels in situations where you <strong>transfer</strong> a lot of data between native and JavaScript.</p>

<p>If you need to pass a few bytes once (or a few times), the old APIs are easier to work with and the performance penalty might be small enough that you might be better off skipping the JSI. Reading a small piece of data from AsyncStorage takes 5ms on release mode, so this extrapolates to any package that does a lot of calculation on the native side and then only returns a small chunk of data to JavaScript.</p>

<p>Here is a comparison, reading a small string (“hello”), one time (release mode -O2 optimized):</p>

<table>
  <thead>
    <tr>
      <th>Framework</th>
      <th>Time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>MMKV</td>
      <td>&gt; 0ms</td>
    </tr>
    <tr>
      <td>Quick SQLite</td>
      <td>&gt; 0ms</td>
    </tr>
    <tr>
      <td>WatermelonDB</td>
      <td>&gt; 8ms</td>
    </tr>
    <tr>
      <td>Async Storage</td>
      <td>&gt; 5ms</td>
    </tr>
  </tbody>
</table>

<p>Artificial benchmarks testing reading the same value or calculating something thousands of times are… disingenuous.</p>

<p>Most frameworks have caches implemented to them, reading anything more than once results in testing if the cache is there. Other important details cannot be ignored: MMKV is a key/value storage, whereas Quick SQLite and WatermelonDB are relational databases on top of SQLite, comparing them is comparing apples to oranges.</p>

<p>Calculating data thousands of times will also mix JSI performance with C++/Swift/Kotlin performance, hard to tell when one ends and the other begins.</p>

<p>IMO it is better to test <strong>transferring a large amount of data</strong>. However, it is hard to find a test that actually makes sense, because details can affect the performance. Returning one large string will only mem-copy (Strings on your native code are not returned directly to JavaScript, but the memory needs to be copied to JSI Strings) once, whereas returning a lot of strings, will have allocate memory multiple times.</p>

<p>I can share some anecdotic experience of some people using Quick SQLite. <a href="https://dev.to/craftzdog/a-performant-way-to-use-pouchdb7-on-react-native-in-2022-24ej">Takuya experienced 2x to 5x speed boost</a> when switching from the old bridge SQLite driver, user <a href="https://twitter.com/sallar">@sallar</a> experienced 2x - 2.5x speed improvement, query time reduced from 600ms to ~250ms, with large SQLite queries. The larger your SQL results the better will Quick SQLite perform for you.</p>

<p>Just to be clear <strong>JSI does cuts the overhead of communication</strong>, transferring a few bytes once is just not the best use-case. It will also excel in cases where you transfer a small chunk of data but you need to do it very often, e.g. reanimated.</p>

<h1 id="i-want-to-use-xyz-programming-language">I want to use XYZ programming language</h1>

<p>Among the questions that get repeated over and over is “how can I use my favorite language?”. I even made a video about it, <a href="https://www.youtube.com/watch?v=_I6bH5_rO2k&amp;t=178s">go watch it</a>.</p>

<p>In the video I made a mistake, I made it sound like there is no possibility to use any other language, which is not technically correct. So here it is explained in a list so hopefully it will be clearer for everyone:</p>

<ul>
  <li>Everything is based on the JSI.</li>
  <li>The JSI is C++.</li>
  <li>TurboModules generates C++ headers (meant to be used with ObjC++ and JNI C++).</li>
  <li>TurboModules currently only allow to use implement the generated headers with ObjC++ and JNI C++.</li>
  <li><strong>You can use any language you want, if you can call it from the native mobile languages</strong>. If you can compile your code (and link it as a static library if necessary), you can just call it. It just misses the point of TurboModules, because a big reason is to give auto-generated type safety. Your compilation process might also become complex (e.g. using Rust)</li>
</ul>

<p>You can use w/e you want, it’s just that you will have to manually modify and sync your function signatures. And to be clear this is partly a limitation of JSI and in some cases compatibility between languages (e.g. Swift and C++ interoperability).</p>

<h1 id="its-so-complex-flutter-is-easy">It’s so complex! Flutter is easy</h1>

<p>Don’t drink this cool-aid, all frameworks abstract the heavy-lifting for you. Even if you would write your app in native there would be occasions where you will have to deal with some complexity. If not on the language level, it would be on the API level, on some integration, on some framework model. etc. I have written a fair amount of native code at this point and I it doesn’t get any easier.</p>

<p>I have already seen tweets from flutter devs complaining they are writing dart/swift/kotlin/c++ code at the same time. If you are interested in this topic you are going deep into the inner working of the frameworks, this is usually what it takes to build software at this level.</p>

<p>As far as I can see here are the options:</p>

<ul>
  <li>Wait and hope someone solves your problem</li>
  <li>Create your own framework (With time you will hit the C++/Swift/Kotlin problem anyways)</li>
  <li>Pay someone to solve the problem for you</li>
  <li>DIY and enjoy the process</li>
</ul>

<p>That’s it for now, <a href="mailto:ospfranco@protonmail.com">you can always pay me to do some JSI for you</a>. Hope you enjoyed it and please do send feedback.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Here is the latest information dump my findings with React Native’s JSI.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Frames of reference</title><link href="https://ospfranco.com/post/2022/03/13/frames-of-reference/" rel="alternate" type="text/html" title="Frames of reference" /><published>2022-03-13T14:00:00+01:00</published><updated>2022-03-13T14:00:00+01:00</updated><id>https://ospfranco.com/post/2022/03/13/frames%20of%20reference</id><content type="html" xml:base="https://ospfranco.com/post/2022/03/13/frames-of-reference/"><![CDATA[<p>Every couple of weeks I randomly watch one of Jordan Peterson lecture videos, they are so cool. Today I stumbled upon this one:</p>

<iframe class="w-full my-10 h-96" src="https://www.youtube.com/embed/H0VfPPzZoYw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>Recently I had a discussion with a girl I dated and I still care about. I wasn’t a fight, but our points of view differed diametrically. It was a though dicussion, but I realized we were both rambling about what we <strong>didn’t</strong> want. Our communication, via our indirection and our fear of confrontation, was mudled.</p>

<p>At some point we did manage to tell each other some version of what we <strong>do</strong> want. Or at least I thought we did… now I have had a couple of days to try to understand what we both said, the truth is I still have no clue what it means. Behind every emotion there is an ocean of complexity. In our internal logic is choke full of contradictions, this applies to every single one of us.</p>

<p>This is what made this little lecture so damn interesting. I started to explain her arguments to myself (as well as I can remember it). What an eye opening exercise. I think I’m still far away from grasping the full implications of what was said, but at least I think I’m now managing to pull the minimal thread of understanding. Am I happy with the message? not really, but it’s better to live life with eyes open.</p>

<p>Forget now about my relationship troubles, there is a gem of wisdom here to learn: it all boils down to frames of reference, even though the words might be the same, their meaning changes depending on our feelings and moods. To have a recipe to adopt somebody else’s frame of reference is nothing short of a super power.</p>

<p>Extrapolate this to most of the interactions you have on a day to day basis. What a complex and chaotic interaction, on which we (try to) communicate at the velocity of speech. Almost overwhelming, but damn interesting if you ask me.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Every couple of weeks I randomly watch one of Jordan Peterson lecture videos, they are so cool. Today I stumbled upon this one:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Email templates with React and Tailwind</title><link href="https://ospfranco.com/post/2022/01/08/email-templates-with-react-and-tailwind/" rel="alternate" type="text/html" title="Email templates with React and Tailwind" /><published>2022-01-08T14:00:00+01:00</published><updated>2022-01-08T14:00:00+01:00</updated><id>https://ospfranco.com/post/2022/01/08/email%20templates%20with%20react%20and%20tailwind</id><content type="html" xml:base="https://ospfranco.com/post/2022/01/08/email-templates-with-react-and-tailwind/"><![CDATA[<p>Sending emails is basic SaaS 101, however it always feel broken to me. Instead of using the same tools I used to develop my apps, I always ended up importing a different framework, we used to use one many years ago with Java, on Node we used handlebars, this is just one more link of complexity in the modern tech stack.</p>

<p>I didn’t want to go down that path one more time, so I spend some time trying to answer one question: can I create a email template using only React and Tailwind (with my existing configuration) and the answer is: YES! well, mostly…</p>

<h2 id="render-a-react-component-to-plain-html-markup">Render a React component to plain HTML Markup</h2>

<p>The first part of this question was the easiest to answer, how to turn a React component into raw html string:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// unfortunately no type information for this module</span>
<span class="c1">// @ts-ignore</span>
<span class="k">import</span> <span class="nx">ReactDOMServer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-dom/server</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">TestMail</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
      <span class="c1">// important to keep the color scheme on some email clients</span>
      <span class="p">{</span><span class="cm">/* &lt;meta name="color-scheme" content="only"&gt;&lt;/meta&gt; */</span><span class="p">}</span>
      <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span><span class="c1">// We will use this later&lt;/head&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">py-3</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Hi</span> <span class="nx">I</span> <span class="nx">am</span> <span class="nx">a</span> <span class="nx">react</span> <span class="nx">component</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/html</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">emailHtml</span> <span class="o">=</span> <span class="nx">ReactDOMServer</span><span class="p">.</span><span class="nx">renderToStaticMarkup</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">TestMail</span> <span class="o">/&gt;</span><span class="p">);</span>
</code></pre></div></div>

<p>This will take a React component and render it as a plain HTML markup, you can see I have a tailwind class in there <code class="language-plaintext highlighter-rouge">py-3</code>, unfortunately if you take a look inside the html, you will see it has not been transpiled, so we need to run this html through an inliner to it inlines all the classes as embedded style props in the html.</p>

<p>This was the tricky part, there are some frameworks that try to solve this exact problem, like maizzle for example, but just by reading the home page I already see an ocean of complexity, so early in my googling I stumbled upon <a href="https://github.com/soheilpro/mailwind">Mailwind</a>, the instructions were scant, but it was exactly what I wanted, it works based on <a href="https://github.com/Automattic/juice">Juice</a>, not going to bore you with the details, here is the snippet that makes it work:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">juice</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">juice</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nx">juicify</span><span class="p">(</span><span class="nx">html</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">juice</span><span class="p">.</span><span class="nx">juiceResources</span><span class="p">(</span>
      <span class="nx">html</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="na">webResources</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">relativeTo</span><span class="p">:</span> <span class="dl">"</span><span class="s2">public/</span><span class="dl">"</span><span class="p">,</span>
        <span class="p">},</span>
      <span class="p">},</span>
      <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">processed</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">`Could not juice email</span><span class="p">${</span><span class="nx">err</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="nx">resolve</span><span class="p">(</span><span class="nx">processed</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You also need to update the email component to include a stylesheet in the head tag:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
  <span class="p">{</span><span class="cm">/* eslint-disable-next-line @next/next/no-css-tags */</span><span class="p">}</span>
  <span class="o">&lt;</span><span class="nx">link</span> <span class="nx">href</span><span class="o">=</span><span class="dl">"</span><span class="s2">mailwind.css</span><span class="dl">"</span> <span class="nx">rel</span><span class="o">=</span><span class="dl">"</span><span class="s2">stylesheet</span><span class="dl">"</span> <span class="nx">data</span><span class="o">-</span><span class="nx">inline</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="sr">/head</span><span class="err">&gt;
</span></code></pre></div></div>

<blockquote>
  <p>You can already see that you need to import mailwind.css file and make it accessible somewhere in your project, on the juicify function the <code class="language-plaintext highlighter-rouge">relativeTo</code> path, will allow juice to correctly determine where to fetch the .css file</p>
</blockquote>

<p>And TA-DA you have working email templates with React and Tailwind, no need for complex framework, configuration files, etc. The juicify function will output a raw string, which you can send to your email distributor and it should work just fine.</p>

<h2 id="the-caveat">The caveat</h2>

<p>Now there is one small caveat here, which is the mailwind.css file, it’s not going to be your application styles, some of the changes are good, for example everything being based on px styles, but you might need your own colors, or paddings, etc.</p>

<p>TBH this is where I stopped because this is good enough for me, but if you really need your own styles, I figure this is not too hard to achieve, you basically need to tell tailwind to process your <code class="language-plaintext highlighter-rouge">tailwind.config.js</code> and spit out a <code class="language-plaintext highlighter-rouge">.css</code> file, shouldn’t be too hard, the small details of PX units I have not tried, but I think that should also be fixable. For me I only had to add 2 - 3 classes with some extra fill colors, and I can live with that.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Sending emails is basic SaaS 101, however it always feel broken to me. Instead of using the same tools I used to develop my apps, I always ended up importing a different framework, we used to use one many years ago with Java, on Node we used handlebars, this is just one more link of complexity in the modern tech stack.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Reset NVRAM on m1 mac</title><link href="https://ospfranco.com/post/2021/12/21/reset-nvram-on-m1-mac/" rel="alternate" type="text/html" title="Reset NVRAM on m1 mac" /><published>2021-12-21T14:00:00+01:00</published><updated>2021-12-21T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/12/21/reset%20nvram%20on%20m1%20mac</id><content type="html" xml:base="https://ospfranco.com/post/2021/12/21/reset-nvram-on-m1-mac/"><![CDATA[<p>I needed to reset my M1 NVRAM for reasons, here to save you some seconds of googling</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo nvram -c
</code></pre></div></div>

<p>You might see some errors regarding some services that cannot be restarted (fmm-mobileme and fmm-computer-name), but you can ignore those, afterwards restart your computer and it should be fine</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[I needed to reset my M1 NVRAM for reasons, here to save you some seconds of googling]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Never use anything except a pure UUID (Anti REGEX argument)</title><link href="https://ospfranco.com/post/2021/12/18/never-use-anything-except-a-pure-uuid/" rel="alternate" type="text/html" title="Never use anything except a pure UUID (Anti REGEX argument)" /><published>2021-12-18T14:00:00+01:00</published><updated>2021-12-18T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/12/18/never%20use%20anything%20except%20a%20pure%20uuid</id><content type="html" xml:base="https://ospfranco.com/post/2021/12/18/never-use-anything-except-a-pure-uuid/"><![CDATA[<p>Browsing my notes found this small gem</p>

<blockquote>
  <p>Use UUIDs for id-ing your entities. Period.</p>

  <p>Do not use anything else, don’t try to be clever, it just creates embedded logic and soon you will find yourself regexing your ids like a chump</p>
</blockquote>

<h2 id="lesson-never-learned">Lesson never learned</h2>

<p>I first came into this idea many years ago, my college professor was in charge of designing and leading the team responsible for the student system (assignments, class schedules, notes, etc), they bought an Israeli system and then adapted it for our university.</p>

<p>At the time, my professor thought it would be a great idea to make the user ids contain some extra information, so that one could at first glance tell the enrollment year and the student age, so each student id would be something like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[enrollment_year]_[birth_year]_[id_number]
</code></pre></div></div>

<p>This is great in theory, whoemever is in charge already gets some information without needing to type the id into the system.</p>

<h2 id="embedded-logic">Embedded logic</h2>

<p>In real life, this created a slew of problems, one of them was that the students id were easily guessable, this created a lot of problems with phishing attempts, this had serious consequences.</p>

<p>But another more subtle was the consequence for the project code itself, since some of the information now did not need a query to the database, then came the REGEXES, to parse and extract this meta information from the IDs.</p>

<p>This generates a lot implicit and embedded logic, what if the ID needs to be changed? then entire parts of the system didn’t work properly anymore.</p>

<h2 id="regexes-are-fine-on-5-of-the-cases">REGEXES are fine on 5% of the cases</h2>

<p>Regexes definitely have their use cases, especially when extracting information from a third-party data source, where you have no control over the data you are getting.</p>

<p>But please, don’t ever try to embed data in your systems.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Browsing my notes found this small gem]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to install M1 (arm) compatible JDK</title><link href="https://ospfranco.com/post/2021/12/11/how-to-install-m1-(arm)-compatible-jdk/" rel="alternate" type="text/html" title="How to install M1 (arm) compatible JDK" /><published>2021-12-11T14:00:00+01:00</published><updated>2021-12-11T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/12/11/how%20to%20install%20m1%20(arm)%20compatible%20jdk</id><content type="html" xml:base="https://ospfranco.com/post/2021/12/11/how-to-install-m1-(arm)-compatible-jdk/"><![CDATA[<p>Recently found out a nice trick to easily install a compatible JDK on mac without scouring the internet or brew formulas.</p>

<p>You can directly do it via Android Studio (or intellij IDEA), just go into the preferences and on the build tools &gt; gradle menu, you can select which version of the JDK you want to use, if you open the dropdown you will see there is also an option to download a JDK.</p>

<p><img src="https://ospfranco.com/assets/androidStudio1.png" alt="Android Studio 1" /></p>

<p>Click on it and you will get a small dialog were you can select the flavor of JDK you want, I know for certain that the Azul versions are arm compatible.</p>

<p><img src="https://ospfranco.com/assets/androidStudio2.png" alt="Android Studio 2" /></p>

<p>(BTW I’m using the Android Studio Preview to get native arm android images)</p>

<p>Very convenient!</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Recently found out a nice trick to easily install a compatible JDK on mac without scouring the internet or brew formulas.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Beauty on code iterations</title><link href="https://ospfranco.com/post/2021/12/08/beauty-on-code-iterations/" rel="alternate" type="text/html" title="Beauty on code iterations" /><published>2021-12-08T14:00:00+01:00</published><updated>2021-12-08T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/12/08/beauty%20on%20code%20iterations</id><content type="html" xml:base="https://ospfranco.com/post/2021/12/08/beauty-on-code-iterations/"><![CDATA[<p>A perfect model of your problem exists, you will just never be able to find it and that <strong>should</strong> be OK.</p>

<p>I believe the moment you have typed your code, it’s already becoming obsolete and it’s already wrong, because of your understanding of the problem will only expand with time, and since every problem is an ocean of complexity, you are pretty much hopeless in trying to code your way to enlightenment.</p>

<p>My approach: do OK code when solving the problem for the first time, fast, kinda dirty, see how it performs, see if it solves the problem, with a bit of time and patience you will see patterns solidify. The catch is: you have to clean it up, with the same energy and fervour you wrote it the first time.</p>

<p>I find this technique so invigorating though, instead of sloshing through endless discussions, I get the satisfaction of solving the problem first, instead of wasting my time on a potential dead-end. Afterwards, I get the pleasure of polishing the solution to a shiny state.</p>

<p>Now if I could only convince my team to see it that way…</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[A perfect model of your problem exists, you will just never be able to find it and that should be OK.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Startups Latinoamerica</title><link href="https://ospfranco.com/post/2021/11/04/startups-latinoamerica/" rel="alternate" type="text/html" title="Startups Latinoamerica" /><published>2021-11-04T14:00:00+01:00</published><updated>2021-11-04T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/11/04/startups%20latinoamerica</id><content type="html" xml:base="https://ospfranco.com/post/2021/11/04/startups-latinoamerica/"><![CDATA[<p>Aquí les dejo la presentanción de la charla sobre Startups en Latinoamérica:</p>

<p><a href="https://ospfranco.com/assets/StartUpsLatinoamerica.key">Presentación</a></p>

<p>Espero ver alguna Startup Boliviana en algunos años! Si necesitan apoyo no duden en contactarme!</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Aquí les dejo la presentanción de la charla sobre Startups en Latinoamérica:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/preview.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/preview.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>