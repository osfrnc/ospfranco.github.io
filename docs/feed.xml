<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://ospfranco.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ospfranco.com/" rel="alternate" type="text/html" /><updated>2023-11-24T09:44:34+01:00</updated><id>https://ospfranco.com/feed.xml</id><title type="html">Oscar Franco</title><author><name>Oscar Franco</name></author><entry><title type="html">Mix C++, Obj-C and Swift files in a single XCode target</title><link href="https://ospfranco.com/post/2023/11/24/mix-c++,-obj-c-and-swift-files-in-a-single-xcode-targe/" rel="alternate" type="text/html" title="Mix C++, Obj-C and Swift files in a single XCode target" /><published>2023-11-24T14:00:00+01:00</published><updated>2023-11-24T14:00:00+01:00</updated><id>https://ospfranco.com/post/2023/11/24/mix%20c++,%20obj-c%20and%20swift%20files%20in%20a%20single%20xcode%20targe</id><content type="html" xml:base="https://ospfranco.com/post/2023/11/24/mix-c++,-obj-c-and-swift-files-in-a-single-xcode-targe/"><![CDATA[<p>If you have an XCode project where you are trying to mix C++, Obj-C and Swift, things will not work. If you only deal with Obj-C++ everything compiles fine, but the moment you add Swift into the mix you might start getting a slew of errors on your header files.</p>

<p>The root issue is the <a href="https://stackoverflow.com/questions/47788422/cannot-use-namespace-and-cannot-include-standard-c-library-in-my-h-files">Swift compiler</a>, it doesn’t support C++, yet it still tries to compile C headers on its own. Whenever you have Swift files together with C++ files, it’s the Swift compiler that will kick-in in a first pass (followed by CLang? maybe before? doesn’t matter) and will try to compile the headers as C headers independently of what you tell it, file extensions, etc.</p>

<p>You will then start getting errors based on the C++ syntax (if you used any). For example if you are using namespaces (which don’t exist on C), you will get <a href="https://github.com/CocoaPods/CocoaPods/issues/12105#issuecomment-1824455557">invalid syntax errors</a>.</p>

<p>There are a couple workarounds. First you can wrap every single bit of C++ syntax in your headers around a macro that checks if the compiler supports C++:</p>

<pre><code class="language-C++">#if defined __cplusplus
extern "C" {
#endif

#if defiend __cplusplus

class Foo
{
    void bar(int c);
}
#endif
struct FooHandle;

void Foo_bar(struct FooHandle* foo, int c);

#if defined __cplusplus
}
#endif
</code></pre>

<p>Every header you create you will have to manually modify to check for syntax errors.</p>

<h1 id="cocoapods">Cocoapods</h1>

<p>Cocoapods has a special problem with this, since it generates an umbrella header that will also get compiled by the Swift compiler and it will fail. Either of the methods described above will workaround the issue for now.</p>

<p>Another alternative is to hide the header files from the XCode file system, yet still provide them via flags that will get passed to the compilers:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"json"</span>

<span class="n">package</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">__dir__</span><span class="p">,</span> <span class="s2">"package.json"</span><span class="p">)))</span>

<span class="no">Pod</span><span class="o">::</span><span class="no">Spec</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">name</span>           <span class="o">=</span> <span class="s2">"matrix"</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">version</span>        <span class="o">=</span> <span class="n">package</span><span class="p">[</span><span class="s2">"version"</span><span class="p">]</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">summary</span>        <span class="o">=</span> <span class="n">package</span><span class="p">[</span><span class="s2">"description"</span><span class="p">]</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">homepage</span>       <span class="o">=</span> <span class="n">package</span><span class="p">[</span><span class="s2">"homepage"</span><span class="p">]</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">license</span>        <span class="o">=</span> <span class="n">package</span><span class="p">[</span><span class="s2">"license"</span><span class="p">]</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">authors</span>        <span class="o">=</span> <span class="n">package</span><span class="p">[</span><span class="s2">"author"</span><span class="p">]</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">platforms</span>      <span class="o">=</span> <span class="p">{</span> <span class="ss">:ios</span> <span class="o">=&gt;</span> <span class="s2">"13.0"</span> <span class="p">}</span>

  <span class="n">s</span><span class="p">.</span><span class="nf">pod_target_xcconfig</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s2">"DEFINES_MODULE"</span> <span class="o">=&gt;</span> <span class="s2">"YES"</span><span class="p">,</span>
    <span class="s2">"SWIFT_COMPILATION_MODE"</span> <span class="o">=&gt;</span> <span class="s2">"wholemodule"</span><span class="p">,</span>
    <span class="s2">"CLANG_CXX_LANGUAGE_STANDARD"</span> <span class="o">=&gt;</span> <span class="s2">"c++17"</span><span class="p">,</span>
    <span class="c1"># ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span>
    <span class="s2">"HEADER_SEARCH_PATHS"</span> <span class="o">=&gt;</span> <span class="s2">"</span><span class="se">\"</span><span class="s2">$(PODS_TARGET_SRCROOT)/cpp/</span><span class="se">\"</span><span class="s2">/** "</span> <span class="c1"># This will link the headers at compile time, flag passed directly to the compiler</span>
  <span class="p">}</span>

  <span class="c1"># ↓↓↓↓↓↓↓↓↓↓↓↓</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">source_files</span> <span class="o">=</span> <span class="s2">"ios/**/*.{mm,swift}"</span><span class="p">,</span> <span class="s2">"cpp/**/*.{cpp,c}"</span> <span class="c1"># Do not include the headers in the sources, then XCode won't try to compile them</span>

  <span class="c1"># ↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">preserve_paths</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s2">"cpp/**/*.h"</span><span class="p">,</span>
    <span class="s2">"ios/**/*.h"</span>
  <span class="p">]</span>

  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s2">"React"</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s2">"React-Core"</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">dependency</span> <span class="s2">"React-callinvoker"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>One side effect is that the headers will not appear on the project explorer view on XCode, which is annoying if you are developing something from scratch, you can still ⌘ + click to open it, but it won’t show navigation side bar.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[If you have an XCode project where you are trying to mix C++, Obj-C and Swift, things will not work. If you only deal with Obj-C++ everything compiles fine, but the moment you add Swift into the mix you might start getting a slew of errors on your header files.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/oscar.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/oscar.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Get iOS simulator local home folder on macOS</title><link href="https://ospfranco.com/post/2023/11/13/get-ios-simulator-local-home-folder-on-macos/" rel="alternate" type="text/html" title="Get iOS simulator local home folder on macOS" /><published>2023-11-13T14:00:00+01:00</published><updated>2023-11-13T14:00:00+01:00</updated><id>https://ospfranco.com/post/2023/11/13/get%20ios%20simulator%20local%20home%20folder%20on%20macos</id><content type="html" xml:base="https://ospfranco.com/post/2023/11/13/get-ios-simulator-local-home-folder-on-macos/"><![CDATA[<p>Sometimes you want to really see what is on the file system of iOS. Even the simulator file system is useful to check if files are correctly downloaded or sometimes you might want to check a database file manually.</p>

<p>You can easily get the directory printed out from the XCode console. When you application is paused or a debugger breakpoint is hit, you can type <code class="language-plaintext highlighter-rouge">po NSHomeDirectory()</code> and it will print out the local directory.</p>

<p><img src="https://ospfranco.com/assets/pohomedirectory.png" alt="home directory print out" title="PO NSHomeDirectory" /></p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Sometimes you want to really see what is on the file system of iOS. Even the simulator file system is useful to check if files are correctly downloaded or sometimes you might want to check a database file manually.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/oscar.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/oscar.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SQLite for React Native, but 5x faster and 5x less memory</title><link href="https://ospfranco.com/post/2023/11/09/sqlite-for-react-native,-but-5x-faster-and-5x-less-memory/" rel="alternate" type="text/html" title="SQLite for React Native, but 5x faster and 5x less memory" /><published>2023-11-09T14:00:00+01:00</published><updated>2023-11-09T14:00:00+01:00</updated><id>https://ospfranco.com/post/2023/11/09/sqlite%20for%20react%20native,%20but%205x%20faster%20and%205x%20less%20memory</id><content type="html" xml:base="https://ospfranco.com/post/2023/11/09/sqlite-for-react-native,-but-5x-faster-and-5x-less-memory/"><![CDATA[<p>I love a good technical write-up, so here is one for <a href="https://github.com/OP-Engineering/op-sqlite">op-sqlite</a> my new SQLite module for React Native.</p>

<h1 id="quick-sqlite">quick-sqlite</h1>

<p>I wrote <a href="https://github.com/ospfranco/react-native-quick-sqlite">quick-sqlite</a> last year after I learned about React Native JSI, a way to bridge C++ code to JavaScript. The idea was simple and I took a peek at existing libraries. One basically takes the arguments passed from JavaScript, and then just call the SQLite APIs, then collect the results of the queries and pass them back to JavaScript.</p>

<p>quick-sqlite already produced a major improvement in performance over the old bridge modules, where data had to be serialized to JSON and then passed between native and JavaScript. The flow was pretty simple:</p>

<p><img src="https://ospfranco.com/assets/quick-sqlite-flow.png" alt="quick-sqlite-flow" title="Quick SQLite flow" /></p>

<h1 id="where-quick-sqlite-fell-short">Where quick-sqlite fell short</h1>

<p>There were, however, some issues with quick-sqlite. People complained although it was fast, queries would run out of memory or it would not be fast enough. Given that this was open source work and I already gotten what I wanted I did not pursue further optimizations further. At some point it was not fun and I handed over quick-sqlite to Margelo and went for a long vacation.</p>

<p>I’ve been back at work for a few months and I have seen the value quick-sqlite provides to companies large and small. But people <a href="https://github.com/margelo/react-native-quick-sqlite/pull/30#issuecomment-1801378465">kept asking if it could be made faster</a>. They already had some good ideas: try to reduce the amount of created strings, use HostObjects to reduce memory foot-print, and so on. Just out of curiosity I decided to try a few things.</p>

<p>In order to really see differences, I set up a test of a database of 300k records, mix of strings, ints and doubles. At lower scales the differences might be so tiny that they don’t really matter.</p>

<h1 id="migrate-to-hostobjects">Migrate to HostObjects</h1>

<p>The first obvious idea was migrating to HostObjects (if you don’t know what they are, <a href="https://www.youtube.com/watch?v=_BNinSbzZTE">I made a video about them</a>, but think C++ classes bridged to JS). HostObjects are not a cure to all, but they would immediately provide a big benefit: memory consumption would be reduced. On the old flow, I would get the results from SQLite, store them in a vector, and then when I got access to the JS context again, iterate and recreate all the data again in JSI (read: plain JS) objects. This meant that all the price of converting/transfering data from native to JS, was paid upfront. By using HostObjects one can avoid paying this price of copying strings and other values. They would be created once and then stored in memory, when the JS side reaches inside them then they do the conversion of data at that point in time.</p>

<p>It is not perfect, since I’m shifting the price paid before upfront into some cost when accessing the data. But testing showed that access was just the same, and memory consumption was halved! This meant queries that would OOM before now could be run without problem.</p>

<h1 id="get-rid-of-holding-struct">Get rid of holding struct</h1>

<p>Another issue was I created a Struct to hold different type of data, due to the nature of JS any value you receive can be of these types:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">QuickValue</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">intVal</span><span class="p">;</span>
  <span class="kt">double</span> <span class="n">doubleVal</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">strVal</span><span class="p">;</span>
  <span class="kt">bool</span> <span class="n">boolVal</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">type</span><span class="p">;</span> <span class="c1">// used to store which type of data this was holding</span>
<span class="p">}</span>
</code></pre></div></div>

<p>There is no justification for this structure other than: I didn’t knew any better, my c++-fu was weak. I knew that using this struct would allocate too much extra memory and was wasteful, I just didn’t imagine how much. Allocating memory and moving objects around in the heap has a big cost, not only in memory but sometimes in performance!</p>

<p>When browsing the web and other peoples code, I came to learn about <a href="https://en.cppreference.com/w/cpp/utility/any">std::any</a>, which was introduced in C++ 17. It basically functions the same as my struct to hold data (internally it just stores a pointer <code class="language-plaintext highlighter-rouge">void *</code>). I got rid of the struct and swapped all references for <code class="language-plaintext highlighter-rouge">std::any</code> and the performance gains were amazing, all of the sudden the performance of the module was 3x as fast. It came with a cost however. <code class="language-plaintext highlighter-rouge">std::any</code> is awkward to use, it doesn’t really store any type information, and at best you can only run code when you know the type of the thing you put in there.</p>

<p>When reading on how to do certain operations, a lot of answers pointed towards <a href="https://en.cppreference.com/w/cpp/utility/variant">std::variant</a>. After getting the code to compile with <code class="language-plaintext highlighter-rouge">std::any</code> I decided to give <code class="language-plaintext highlighter-rouge">std::variant</code> a try. Although on the surface it looked the same, it is bounded to types one declared, because it cannot hold any type of data, the compiler can get a little smarter about it. The performance gain was also staggering here, all of the sudden I was almost reaching 6x times the performance.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;variant&gt;</span><span class="cp">
</span>
<span class="k">struct</span> <span class="nc">ArrayBuffer</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;</span> <span class="n">data</span><span class="p">;</span>
    <span class="kt">size_t</span> <span class="n">size</span><span class="p">;</span>
<span class="p">};</span>


<span class="k">using</span> <span class="n">JSVariant</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">variant</span><span class="o">&lt;</span><span class="n">nullptr_t</span><span class="p">,</span> <span class="kt">bool</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">double</span><span class="p">,</span> <span class="kt">long</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">ArrayBuffer</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div></div>

<h1 id="turning-the-problem-around">Turning the problem around</h1>

<p>I had a nagging feeling that somehow I was just wasting so much memory by creating HostObjects that are basically maps, therefore store the same keys over and over again (remember, I switched from creating JS objects to keeping them in HostObjects, but each HostObject contained the same keys). Then I realized I could turn the entire thing around. Instead of thinking of each HostObject as a completely stand alone entity, they could all share the same key set, and only store the actual values!</p>

<p>It took a little while for me to wrap my head around shared pointers. How to store the key set in a vector, that by using a shared_pointer in the HostObjects instances would not get de-allocated. The final result is a combination of what I call a <a href="https://github.com/OP-Engineering/op-sqlite/blob/main/cpp/DumbHostObject.h">DumbHostObject</a> and <a href="https://github.com/OP-Engineering/op-sqlite/blob/main/cpp/DynamicHostObject.cpp">DynamicHostObject</a>, the dumb objects only hold data, and the dynamic objects can hold anything (that can also be accessed from the JS side), but by combining the two, one can save memory by sharing the key set (in a DynamicHostObject) among many results (DumbHostObjects).</p>

<p>As it turns out, this slightly decreased performance (completely unexpected, who would have thought passing shared pointers around was so expensive), but memory allocation was halved again! That in my opinion is a worthy trade. The original query in quick-sqlite took over two seconds and required 1.2 gbs in memory on iOS. This now runs in ~500ms and requires only 250mbs of memory. The Android performance gains are masive as well, reaching almost 8x the speed.</p>

<table>
  <thead>
    <tr>
      <th>Library</th>
      <th>iPhone 15 Pro</th>
      <th>Galaxy S22</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>quick-sqlite</td>
      <td>2719ms</td>
      <td>8851ms</td>
    </tr>
    <tr>
      <td>expo-sqlite</td>
      <td>2293ms</td>
      <td>10626ms</td>
    </tr>
    <tr>
      <td>op-sqlite</td>
      <td>507ms</td>
      <td>1125ms</td>
    </tr>
  </tbody>
</table>

<h1 id="troubles-in-paradise">Troubles in paradise</h1>

<p>Remember what I said that HostObjects are not perfect? Turns out property access is quite slow, not only because the objects store the keys in a Vector (I tried an <code class="language-plaintext highlighter-rouge">std::unordered_map</code>, it’s even slower, hashing functions and memory layout uh?). So in a way I’m bullshitting you a bit. When running a 300k query, this numbers are fantastic, but if you are running something that returns a couple of hundred of results, you might see no difference at all.</p>

<p>As it turns out, this slow access, might not be even related to the HostObject itself, but any object that is created with the <code class="language-plaintext highlighter-rouge">jsi::Object()</code> API, when I tested <code class="language-plaintext highlighter-rouge">quick-sqlite</code> the numbers accessing data are quite similar. <code class="language-plaintext highlighter-rouge">expo-sqlite</code> was super fast on accessing data, but it zips the data on the JS side, so it seems that is the only way to create fast access objects. This means however you will always pay the price upfront for such large queries.</p>

<p>There are a few final optimizations that can be done, such as inserting keys in the shared vector with some sorting, so then accessing can be done via binary search, but I will leave it for later. Other optimizations include trying to inline more functions, but I think I have reached the end of what is possible with the JSI.</p>

<p>The next big step in performance will come from Static Hermes, where we can finally call SQLite code directly from JS without the need of HostObjects, shared pointers and so on. There will be one major difficulty though, static hermes is still single threaded, so getting React Native to call large queries without hanging will require creating a multi-threaded messaging system, AKA web-workers. I would definetely would like to tackle this problem and then create a new version of op-sqlite with that!</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[I love a good technical write-up, so here is one for op-sqlite my new SQLite module for React Native.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/oscar.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/oscar.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Advanced C++ notes</title><link href="https://ospfranco.com/post/2023/11/08/advanced-c++-notes/" rel="alternate" type="text/html" title="Advanced C++ notes" /><published>2023-11-08T14:00:00+01:00</published><updated>2023-11-08T14:00:00+01:00</updated><id>https://ospfranco.com/post/2023/11/08/advanced%20c++%20notes</id><content type="html" xml:base="https://ospfranco.com/post/2023/11/08/advanced-c++-notes/"><![CDATA[<h1 id="noteworthy-types">Noteworthy Types</h1>

<p><code class="language-plaintext highlighter-rouge">uint8_t</code> = <code class="language-plaintext highlighter-rouge">byte</code> = a type of unsigned integer of length 8 bits</p>

<h1 id="references">References</h1>

<h2 id="printf">Printf</h2>

<p><code class="language-plaintext highlighter-rouge">printf</code> is legacy C, type unsafe, meaning you should REALLY NOT USE IT. <code class="language-plaintext highlighter-rouge">cout</code> seems to be accepted but android logging does not use it.</p>

<blockquote>
  <p>💡 printing a <code class="language-plaintext highlighter-rouge">size_t</code> is done via <code class="language-plaintext highlighter-rouge">printf(”%zu”, sizeVar)</code></p>
</blockquote>

<h2 id="define-pre-processors">DEFINE pre-processors</h2>

<p>In various C code, I see constants defined like this:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define T 100
</span></code></pre></div></div>

<p>Whereas in C++ examples, it is almost always:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">int</span> <span class="n">T</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>THEY ARE BAD PRACTICE IN C++</strong></p>

<p>Because all macros (which are what <code class="language-plaintext highlighter-rouge">#define</code>s define) are in a single namespace and they take effect everywhere. Variables, including <code class="language-plaintext highlighter-rouge">const</code>-qualified variables, can be encapsulated in classes and namespaces.</p>

<p>Macros are used in C because in C, a <code class="language-plaintext highlighter-rouge">const</code>-qualified variable is not actually a constant, it is just a variable that cannot be modified. A <code class="language-plaintext highlighter-rouge">const</code>-qualified variable cannot appear in a constant expression, so it can’t be used as an array size, for example.</p>

<p>In C++, a <code class="language-plaintext highlighter-rouge">const</code>-qualified object that is initialized with a constant expression (like <code class="language-plaintext highlighter-rouge">const int x = 5 * 2;</code>) <em>is</em> a constant and can be used in a constant expression, so you can and should use them.</p>

<h1 id="libraries">Libraries</h1>

<p>After your code is compiled to a static lib (<code class="language-plaintext highlighter-rouge">.a</code> on macOS and <code class="language-plaintext highlighter-rouge">.so</code> on linux)</p>

<p>One useful tool is <code class="language-plaintext highlighter-rouge">nm</code>. Displays the symbol label inside of your so file, which is useful for debugging any missing symbols.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nm <span class="nt">-gDC</span> myLibrary.so
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">-g</code> Displays only global (external) symbols</p>
</blockquote>

<p>Each symbol name is preceded by its value, followed by the following description character:</p>

<table>
  <thead>
    <tr>
      <th>Symbol</th>
      <th>Object</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>U</td>
      <td>undefined</td>
    </tr>
    <tr>
      <td>A</td>
      <td>absolute</td>
    </tr>
    <tr>
      <td>T</td>
      <td>text section symbol</td>
    </tr>
    <tr>
      <td>D</td>
      <td>data selection symbol</td>
    </tr>
    <tr>
      <td>B</td>
      <td>bss section symbol</td>
    </tr>
    <tr>
      <td>C</td>
      <td>common symbol</td>
    </tr>
    <tr>
      <td>-</td>
      <td>Debugger symbol entries (only with -a)</td>
    </tr>
    <tr>
      <td>S</td>
      <td>Symbol in a section other than those above(???)</td>
    </tr>
    <tr>
      <td>I</td>
      <td>indirect symbol</td>
    </tr>
  </tbody>
</table>

<p>If the symbol is local (non-external), the symbol’s type is instead represented by the corresponding lower case letter. A lowercase <code class="language-plaintext highlighter-rouge">u</code> in a dynamic shared library indicates an undefined reference to a private external in another module in the same library. Meaning your symbol is missing in the headers and cannot be linked/called.</p>

<p>If the symbol is a Objective-C method, the symbol name is <code class="language-plaintext highlighter-rouge">±[Class_name(category_name) method:name:]</code>, where <code class="language-plaintext highlighter-rouge">+</code> is for class methods, <code class="language-plaintext highlighter-rouge">-</code> is for instance
methods, and (category_name) is present only when the method is in a category.</p>

<h1 id="type-aliases">Type aliases</h1>

<p>The old c style of introducing a type-alias is via <code class="language-plaintext highlighter-rouge">typedef</code></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vec</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vInt</span><span class="p">;</span>
</code></pre></div></div>

<p>Starting in C++ 11 the <code class="language-plaintext highlighter-rouge">using</code> keyword was introduced</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="n">vInt</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">vec</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div></div>

<h1 id="virtual-functions">Virtual functions</h1>

<p>Virtual function is a member function that we expect to redefine in a derived class. It ensures <strong>overriding</strong> even if you cast a pointer to the base class.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">print</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Base function"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Derived</span><span class="o">:</span> <span class="k">public</span> <span class="n">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">print</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"derived function"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">Derived</span> <span class="n">d</span><span class="p">;</span>

    <span class="n">Base</span> <span class="o">*</span><span class="n">b</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">derived</span><span class="p">;</span>

    <span class="n">b</span><span class="o">-&gt;</span><span class="n">print</span><span class="p">();</span> <span class="c1">// prints "derived function"</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="smart-pointers">Smart pointers</h1>

<p>Whenever the context where you create the variables ends, the variables you created will get de-allocated. This is a big problem if you want to keep resources alive. e.g.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">function</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">a</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">};</span>
    <span class="p">...</span>
    <span class="c1">// function ends, a gets de-allocated</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Smart pointers will help you keep things alive depending on how you want to keep those objects alive</p>

<h2 id="unique-pointer">Unique pointer</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">p</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">);</span>
<span class="c1">// p &lt;--------&gt;  object</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">p</code> owns the object and the object has only one owner, <code class="language-plaintext highlighter-rouge">p</code>. A unique pointer cannot be copied or passed by value. However, the ownership of its object can be transferred.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">q</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">();</span> <span class="c1">// q created with an int object on the heap</span>
<span class="k">auto</span> <span class="n">p</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">q</span><span class="p">);</span> <span class="c1">// p owns the q's object, q lost it (null pointer).</span>
</code></pre></div></div>

<p>Here is a more complete example</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;memory&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">struct</span> <span class="nc">A</span><span class="p">{</span>
    <span class="o">~</span><span class="n">A</span><span class="p">(){</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Deleted."</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="n">PassIn</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span> <span class="n">a</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="s">"Pointer received."</span><span class="o">&lt;&lt;</span><span class="sc">'\n'</span><span class="p">;</span>

<span class="p">}</span> <span class="c1">// a and its object are deleted.</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>

    <span class="k">auto</span> <span class="n">x</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span><span class="p">();</span>
    <span class="n">PassIn</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="c1">// Pointer received.</span>
    <span class="p">;</span> <span class="c1">// Deleted.</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">x</span><span class="p">)</span> <span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="s">"x is empty."</span><span class="p">;</span> <span class="c1">// true: x is empty.</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A unique pointer is useful if you want to <strong>ensure</strong> only a single copy of your data is kept alive in your code. Once somebody has taken over the pointer (via std::move) the previous reference/owner will completely loose it.</p>

<h2 id="shared-pointer">Shared pointer</h2>

<p>A shared pointer is useful when you want to keep data around as long as any of the owners of the data are alive (e.g. multiple lamdas or multiple objects pointing to a common shared object). The semantics of passing a shared pointer however are subtle and prone to errors.</p>

<h3 id="pass-by-value">Pass by value</h3>

<p>Passing a shared pointer by value will actually add an owner to the pointee (keeping it alive) and is the main use case. In the following code, the vector <code class="language-plaintext highlighter-rouge">a</code> will have the count of owners bumped when foo is called and decreased when <code class="language-plaintext highlighter-rouge">foo</code> finishes running. So the semantics don’t change.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">function</span> <span class="nf">foo</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">ints</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Do something with ints</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">};</span>

    <span class="n">foo</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>But if you would have a long lived structure and you pass the pointer too it, then the vector will be kept alive as long as the struct is also alive:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">A</span> <span class="p">{</span>

    <span class="c1">// You get a shared vector from some external source</span>
    <span class="c1">// as long as the instance of this class is alive then a will also be kept alive</span>
    <span class="n">A</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="o">-&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>There is a small price to performance price to pay when owning the pointer. So if you only need to access it but not copy it you can pass by reference or by passing the underlaying pointer</p>

<h3 id="pass-by-reference">Pass by reference</h3>

<p>Passing by reference does not increase the owner count, you can however create a shared pointer and become an owner. The benefit of not taking ownership is that you don’t pay the price of copying and owning the shared pointer.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Does not take ownership (copy the std::shared_ptr) only uses it while this function is alive</span>
<span class="n">function</span> <span class="nf">foo</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="o">&amp;</span><span class="n">ints</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Do something with ints</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">};</span>

    <span class="n">foo</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="pass-the-underlaying-pointer">Pass the underlaying pointer</h3>

<p>Similar to passing by reference except you cannot create a shared_ptr (doing so will create a new shared_ptr but will not increase the owner count)</p>

<h3 id="lambdas">Lambdas</h3>

<p>With this the capture semantics of lambdas are much clearer:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">};</span>

<span class="c1">// Because a is a shared pointer, it will not be de-allocated until myLambda itself is de-allocated, which could be much later down the life of the program</span>
<span class="k">auto</span> <span class="n">myLambda</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="p">]()</span> <span class="p">{</span>
    <span class="c1">// Do something with a</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="weak-pointer">Weak pointer</h2>

<p>A weak pointer is a smart pointer that does not take ownership of an object but act as an observer. It’s used to observe the object of a shared pointer. It does not participate in reference counting. Weak pointers are mainly used to break circular dependencies.</p>

<h1 id="type-aliases-1">Type Aliases</h1>

<p>On C++ 11, the keyword is <code class="language-plaintext highlighter-rouge">using</code></p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// C++11</span>
<span class="nx">using</span> <span class="nx">counter</span> <span class="o">=</span> <span class="nx">long</span><span class="p">;</span>

<span class="c1">// C++03 equivalent:</span>
<span class="nx">typedef</span> <span class="nx">long</span> <span class="nx">counter</span><span class="p">;</span>
</code></pre></div></div>

<h1 id="null-vs-nullptr">NULL vs nullptr</h1>

<p><code class="language-plaintext highlighter-rouge">NULL</code> is C legacy, <code class="language-plaintext highlighter-rouge">nullptr</code>` is idiomatic C++. Null is convertible to integral types (int, bool, etc) whereas nullptr is not</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="err">✅</span>
<span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span> <span class="err">❌</span> <span class="c1">// it is however castable to bool</span>
</code></pre></div></div>

<p>The reason why NULL is legacy is because it causes ambiguity when functions are overriden.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// this both match calling a(NULL);</span>

<span class="n">function</span> <span class="n">a</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">...</span>

<span class="n">function</span> <span class="n">a</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">)</span> <span class="p">...</span>
</code></pre></div></div>

<h1 id="stdany-and-stdvariant">std::any and std::variant</h1>

<h2 id="stdany">std::any</h2>

<p>Sometimes you don’t know which object you are going to receive. Starting on C++ you can use <code class="language-plaintext highlighter-rouge">std::any</code>. <code class="language-plaintext highlighter-rouge">std::any</code> is basically a pointer and a type information, you could do the same yourself but you can type cast to anything and get into trouble, while <code class="language-plaintext highlighter-rouge">std::any</code> can prevent you from gunfoot. It is useful to pass data data around to which you don’t know the exact type/size and you don’t care until it is time to cast it and do something useful with it. You can imagine how this is super useful with dealing with JS values that can have anything inside of them.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">any</span> <span class="n">myAnyInt</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">any</span> <span class="n">myAnyStr</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">"this is a string"</span><span class="p">);</span>
</code></pre></div></div>

<p>The problem with <code class="language-plaintext highlighter-rouge">std::any</code> however is you can only run code if you know the type ahead of time (read in your head and not in runtime). You can try to do casting and comparissons but it’s kinda shit.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">any</span> <span class="n">myAny</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>

<span class="c1">// Later down the line</span>
<span class="k">if</span><span class="p">(</span><span class="n">myAny</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="k">typeid</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">myInt</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">any_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">myAny</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// You cannot really check the type of the thing you held if not by raw comparisson</span>
<span class="c1">// and the types you get are implementation dependent</span>

<span class="k">struct</span> <span class="nc">A</span> <span class="p">{}</span>

<span class="n">std</span><span class="o">::</span><span class="n">any</span> <span class="n">myA</span> <span class="o">=</span> <span class="n">A</span><span class="p">();</span>

<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">myA</span><span class="p">.</span><span class="n">type</span><span class="p">().</span><span class="n">name</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span> <span class="c1">// Might output "x"</span>
</code></pre></div></div>

<h2 id="stdvariant">std::variant</h2>

<p>If you already know what your bag of holding will hold you can use std::variant. It is much better because it will only accept a set of types you define. It will also apply compiler optimizations.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="n">MyBagOfHolding</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">variant</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">double</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">nullptr_t</span><span class="o">&gt;</span><span class="p">;</span>

<span class="n">MyBagOfHolding</span> <span class="n">bag</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>

<span class="c1">// .. much later down in the code</span>

<span class="k">if</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">holds_alternative</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">bag</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">bag</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This example is simple and might look as good as <code class="language-plaintext highlighter-rouge">std::any</code>, but the compiler optimizations and the type warnings are worth it on it’s own.</p>

<h1 id="object-initialization">Object initialization</h1>

<p>There is only one way to initialize class consts or reference members, using the the <code class="language-plaintext highlighter-rouge">initialization list</code> syntax. It initializes the variables of an instance before the body of the constructor is called</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Demo</span>
<span class="p">{</span>
    <span class="nx">Demo</span><span class="p">(</span><span class="nx">int</span><span class="o">&amp;</span> <span class="nx">val</span><span class="p">)</span> <span class="p">:</span> <span class="nx">m_val</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span>
     <span class="p">{</span>
     <span class="p">}</span>
<span class="nl">private</span><span class="p">:</span>
    <span class="kd">const</span> <span class="nx">int</span><span class="o">&amp;</span> <span class="nx">m_val</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="destructor">Destructor</h2>

<p>You can execute code after an object has been destructured</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// dispatch_queue.h</span>
<span class="k">class</span> <span class="nc">dispatch_queue</span> <span class="p">{</span>

<span class="nl">public:</span>
<span class="c1">// Explicit constructor (does not allow for argument implicit conversion)</span>
<span class="k">explicit</span> <span class="n">dispatch_queue</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">thread_cnt</span> <span class="o">=</span> <span class="mi">1</span><span class="p">);</span>
<span class="c1">// Destructor</span>
<span class="o">~</span><span class="n">dispatch_queue</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Noteworthy Types]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/oscar.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/oscar.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Cocoapods, use_frameworks with static linking</title><link href="https://ospfranco.com/post/2023/10/15/cocoapods,-use_frameworks-with-static-linking/" rel="alternate" type="text/html" title="Cocoapods, use_frameworks with static linking" /><published>2023-10-15T15:00:00+02:00</published><updated>2023-10-15T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/10/15/cocoapods,%20use_frameworks%20with%20static%20linking</id><content type="html" xml:base="https://ospfranco.com/post/2023/10/15/cocoapods,-use_frameworks-with-static-linking/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">use_frameworks!</code> tells CocoaPods that you want to use XCFrameworks instead of Static Libraries. However, turning on use_frameworks will try to link all dependencies as dynamic, every once in a while you might need to turn it on and might face compilation error in some other library (e.g. vision-camera).</p>

<p>In this case, you can actually use frameworks, yet still force static compiling. Replace</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">use_frameworks!</span>
</code></pre></div></div>

<p>with</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">use_frameworks!</span> <span class="ss">linkage: :static</span>
</code></pre></div></div>

<h1 id="xcframeworks">XCFrameworks</h1>

<p>In case you didn’t know frameworks are just an Apple concept to package different architectures into a single file. Nothing fancy to it. Inside the <code class="language-plaintext highlighter-rouge">.xcframework</code> file you might find folders per architecture and a <code class="language-plaintext highlighter-rouge">.plist</code> file.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[use_frameworks! tells CocoaPods that you want to use XCFrameworks instead of Static Libraries. However, turning on use_frameworks will try to link all dependencies as dynamic, every once in a while you might need to turn it on and might face compilation error in some other library (e.g. vision-camera).]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/oscar.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/oscar.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">React Native load release bundle in iOS dev app</title><link href="https://ospfranco.com/post/2023/10/12/react-native-load-release-bundle-in-ios-dev-app/" rel="alternate" type="text/html" title="React Native load release bundle in iOS dev app" /><published>2023-10-12T15:00:00+02:00</published><updated>2023-10-12T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/10/12/react%20native%20load%20release%20bundle%20in%20ios%20dev%20app</id><content type="html" xml:base="https://ospfranco.com/post/2023/10/12/react-native-load-release-bundle-in-ios-dev-app/"><![CDATA[<p>When using React Native on Android you can enter the dev menu and choose not to use a development JS bundle. Usually useful to catch performance regressions in your JS code. For iOS this option is not present on the dev menu, but you can still achieve it if you hack around the native code.</p>

<p>In your AppDelegate, replace</p>

<div class="language-obj-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="p">[[</span><span class="n">RCTBundleURLProvider</span> <span class="nf">sharedSettings</span><span class="p">]</span> <span class="nf">jsBundleURLForBundleRoot</span><span class="p">:</span><span class="s">@"index"</span><span class="p">];</span>
</code></pre></div></div>

<p>with</p>

<div class="language-obj-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NSString</span> <span class="o">*</span><span class="n">packagerServerHostPort</span> <span class="o">=</span> <span class="p">[[</span><span class="n">RCTBundleURLProvider</span> <span class="nf">sharedSettings</span><span class="p">]</span> <span class="nf">packagerServerHostPort</span><span class="p">];</span>
<span class="k">return</span> <span class="p">[</span><span class="n">RCTBundleURLProvider</span> <span class="nf">jsBundleURLForBundleRoot</span><span class="p">:</span><span class="s">@"index"</span>
                                         <span class="nl">packagerHost:</span><span class="n">packagerServerHostPort</span>
                                            <span class="nl">enableDev:</span><span class="nb">NO</span>
                                   <span class="nl">enableMinification:</span><span class="nb">NO</span><span class="p">];</span>
</code></pre></div></div>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[When using React Native on Android you can enter the dev menu and choose not to use a development JS bundle. Usually useful to catch performance regressions in your JS code. For iOS this option is not present on the dev menu, but you can still achieve it if you hack around the native code.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/oscar.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/oscar.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Add gap support to Native Wind 2.x.x</title><link href="https://ospfranco.com/post/2023/08/21/add-gap-support-to-native-wind-2.x.x/" rel="alternate" type="text/html" title="Add gap support to Native Wind 2.x.x" /><published>2023-08-21T15:00:00+02:00</published><updated>2023-08-21T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/21/add%20gap%20support%20to%20native%20wind%202.x.x</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/21/add-gap-support-to-native-wind-2.x.x/"><![CDATA[<p>I’m a big fan of Tailwind CSS. On React Native I use Nativewind.</p>

<p>There is however a small problem with the 2.X.X version of Nativewind, it doesn’t support the <code class="language-plaintext highlighter-rouge">gap</code> property, which was added on RN 0.70.</p>

<p>We can however patch this functionality (without using the unstable 3.x.x branch).</p>

<p>Add the following to <code class="language-plaintext highlighter-rouge">tailwind.config.js</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/** @type {import('tailwindcss').Config} */</span>

<span class="kd">const</span> <span class="nx">plugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">tailwindcss/plugin</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">content</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">./App.tsx</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">./src/**/*.{ts,tsx}</span><span class="dl">"</span><span class="p">],</span>
  <span class="na">theme</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">g</span><span class="p">:</span> <span class="p">({</span> <span class="nx">theme</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">theme</span><span class="p">(</span><span class="dl">"</span><span class="s2">spacing</span><span class="dl">"</span><span class="p">),</span> <span class="c1">// ADD THIS FUNCTION</span>
    <span class="na">extend</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">colors</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">lightPurple</span><span class="p">:</span> <span class="dl">"</span><span class="s2">#6360EB</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">darkPurple</span><span class="p">:</span> <span class="dl">"</span><span class="s2">#001448</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">},</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">plugin</span><span class="p">(</span><span class="kd">function</span> <span class="p">({</span> <span class="nx">matchUtilities</span><span class="p">,</span> <span class="nx">theme</span> <span class="p">})</span> <span class="p">{</span>
      <span class="c1">// ADD THIS PLUGIN</span>
      <span class="nx">matchUtilities</span><span class="p">(</span>
        <span class="p">{</span>
          <span class="na">g</span><span class="p">:</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
            <span class="na">gap</span><span class="p">:</span> <span class="nx">value</span><span class="p">,</span>
          <span class="p">}),</span>
        <span class="p">},</span>
        <span class="p">{</span> <span class="na">values</span><span class="p">:</span> <span class="nx">theme</span><span class="p">(</span><span class="dl">"</span><span class="s2">g</span><span class="dl">"</span><span class="p">)</span> <span class="p">}</span>
      <span class="p">);</span>
    <span class="p">}),</span>
  <span class="p">],</span>
<span class="p">};</span>
</code></pre></div></div>

<h1 id="use-patch-package-to-patch-the-list-of-supported-properties">Use patch-package to patch the list of supported properties</h1>

<p>Internally Nativewind maintains a list of supported properties, and gap is not among them, so we are going to have to <code class="language-plaintext highlighter-rouge">patch-package</code> it. Create a patch <code class="language-plaintext highlighter-rouge">nativewind+2.0.11.patch</code> file in your <code class="language-plaintext highlighter-rouge">patches</code> directory, with the following content:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/node_modules/nativewind/dist/postcss/to-react-native/is-invalid-property.js b/node_modules/nativewind/dist/postcss/to-react-native/is-invalid-property.js
index 7d7715b..56472bc 100644
</span><span class="gd">--- a/node_modules/nativewind/dist/postcss/to-react-native/is-invalid-property.js
</span><span class="gi">+++ b/node_modules/nativewind/dist/postcss/to-react-native/is-invalid-property.js
</span><span class="p">@@ -1,120 +1,121 @@</span>
<span class="gd">-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.isInvalidProperty = void 0;
</span><span class="gi">+'use strict'
+Object.defineProperty(exports, '__esModule', {value: true})
+exports.isInvalidProperty = void 0
</span> function isInvalidProperty(property) {
<span class="gd">-    return !validProps.has(property);
</span><span class="gi">+  return !validProps.has(property)
</span> }
<span class="gd">-exports.isInvalidProperty = isInvalidProperty;
</span><span class="gi">+exports.isInvalidProperty = isInvalidProperty
</span> const validProps = new Set([
<span class="gd">-    "alignContent",
-    "alignItems",
-    "alignSelf",
-    "aspectRatio",
-    "backfaceVisibility",
-    "backgroundColor",
-    "borderBottomColor",
-    "borderBottomEndRadius",
-    "borderBottomLeftRadius",
-    "borderBottomRightRadius",
-    "borderBottomStartRadius",
-    "borderBottomWidth",
-    "borderColor",
-    "borderEndColor",
-    "borderEndWidth",
-    "borderLeftColor",
-    "borderLeftWidth",
-    "borderRadius",
-    "borderRightColor",
-    "borderRightWidth",
-    "borderStartColor",
-    "borderStartWidth",
-    "borderStyle",
-    "borderTopColor",
-    "borderTopEndRadius",
-    "borderTopLeftRadius",
-    "borderTopRightRadius",
-    "borderTopStartRadius",
-    "borderTopWidth",
-    "borderWidth",
-    "bottom",
-    "color",
-    "direction",
-    "display",
-    "elevation",
-    "end",
-    "flex",
-    "flexBasis",
-    "flexDirection",
-    "flexGrow",
-    "flexShrink",
-    "flexWrap",
-    "fontFamily",
-    "fontSize",
-    "fontStyle",
-    "fontVariant",
-    "fontWeight",
-    "height",
-    "includeFontPadding",
-    "justifyContent",
-    "left",
-    "letterSpacing",
-    "lineHeight",
-    "margin",
-    "marginBottom",
-    "marginEnd",
-    "marginHorizontal",
-    "marginLeft",
-    "marginRight",
-    "marginStart",
-    "marginTop",
-    "marginVertical",
-    "maxHeight",
-    "maxWidth",
-    "minHeight",
-    "minWidth",
-    "opacity",
-    "overflow",
-    "overlayColor",
-    "padding",
-    "paddingBottom",
-    "paddingEnd",
-    "paddingHorizontal",
-    "paddingLeft",
-    "paddingRight",
-    "paddingStart",
-    "paddingTop",
-    "paddingVertical",
-    "position",
-    "resizeMode",
-    "right",
-    "rotation",
-    "scaleX",
-    "scaleY",
-    "shadowColor",
-    "shadowOffset",
-    "shadowOpacity",
-    "shadowRadius",
-    "start",
-    "textAlign",
-    "textAlignVertical",
-    "textDecorationColor",
-    "textDecorationLine",
-    "textDecorationStyle",
-    "textShadowColor",
-    "textShadowOffset",
-    "textShadowRadius",
-    "textTransform",
-    "tintColor",
-    "top",
-    "transform",
-    "transformMatrix",
-    "translateX",
-    "translateY",
-    "width",
-    "writingDirection",
-    "zIndex",
-    /* SVG Props */
-    "fill",
-    "stroke",
-    "strokeWidth",
-]);
</span><span class="gi">+  'alignContent',
+  'alignItems',
+  'alignSelf',
+  'aspectRatio',
+  'backfaceVisibility',
+  'backgroundColor',
+  'borderBottomColor',
+  'borderBottomEndRadius',
+  'borderBottomLeftRadius',
+  'borderBottomRightRadius',
+  'borderBottomStartRadius',
+  'borderBottomWidth',
+  'borderColor',
+  'borderEndColor',
+  'borderEndWidth',
+  'borderLeftColor',
+  'borderLeftWidth',
+  'borderRadius',
+  'borderRightColor',
+  'borderRightWidth',
+  'borderStartColor',
+  'borderStartWidth',
+  'borderStyle',
+  'borderTopColor',
+  'borderTopEndRadius',
+  'borderTopLeftRadius',
+  'borderTopRightRadius',
+  'borderTopStartRadius',
+  'borderTopWidth',
+  'borderWidth',
+  'bottom',
+  'color',
+  'direction',
+  'display',
+  'elevation',
+  'end',
+  'flex',
+  'flexBasis',
+  'flexDirection',
+  'flexGrow',
+  'flexShrink',
+  'flexWrap',
+  'fontFamily',
+  'fontSize',
+  'fontStyle',
+  'fontVariant',
+  'fontWeight',
+  'height',
+  'includeFontPadding',
+  'justifyContent',
+  'left',
+  'letterSpacing',
+  'lineHeight',
+  'margin',
+  'marginBottom',
+  'marginEnd',
+  'marginHorizontal',
+  'marginLeft',
+  'marginRight',
+  'marginStart',
+  'marginTop',
+  'marginVertical',
+  'maxHeight',
+  'maxWidth',
+  'minHeight',
+  'minWidth',
+  'opacity',
+  'overflow',
+  'overlayColor',
+  'padding',
+  'paddingBottom',
+  'paddingEnd',
+  'paddingHorizontal',
+  'paddingLeft',
+  'paddingRight',
+  'paddingStart',
+  'paddingTop',
+  'paddingVertical',
+  'position',
+  'resizeMode',
+  'right',
+  'rotation',
+  'scaleX',
+  'scaleY',
+  'shadowColor',
+  'shadowOffset',
+  'shadowOpacity',
+  'shadowRadius',
+  'start',
+  'textAlign',
+  'textAlignVertical',
+  'textDecorationColor',
+  'textDecorationLine',
+  'textDecorationStyle',
+  'textShadowColor',
+  'textShadowOffset',
+  'textShadowRadius',
+  'textTransform',
+  'tintColor',
+  'top',
+  'transform',
+  'transformMatrix',
+  'translateX',
+  'translateY',
+  'width',
+  'writingDirection',
+  'zIndex',
+  'gap',
+  /* SVG Props */
+  'fill',
+  'stroke',
+  'strokeWidth',
+])
</span></code></pre></div></div>

<blockquote>
  <p>Actually we only need to add gap to the list, but my formatter cleaned everything and I’m too lazy to clean it :)</p>
</blockquote>

<p>Afterwards you can run <code class="language-plaintext highlighter-rouge">yarn</code> again for the patch to take effect, restart the packager (maybe with –reset-cache) and you can now use the gap property via <code class="language-plaintext highlighter-rouge">g-[n]</code> utilities.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[I’m a big fan of Tailwind CSS. On React Native I use Nativewind.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/oscar.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/oscar.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Change macOS dock animation time</title><link href="https://ospfranco.com/post/2023/08/20/change-macos-dock-animation-time/" rel="alternate" type="text/html" title="Change macOS dock animation time" /><published>2023-08-20T15:00:00+02:00</published><updated>2023-08-20T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/20/change%20macos%20dock%20animation%20time</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/20/change-macos-dock-animation-time/"><![CDATA[<p>I auto-hide the dock on macOS, however the animation delay is a waste of time. You can set the animation time with the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defaults write com.apple.dock autohide-time-modifier <span class="nt">-float</span> 0<span class="p">;</span> killall Dock
</code></pre></div></div>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[I auto-hide the dock on macOS, however the animation delay is a waste of time. You can set the animation time with the following command:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/oscar.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/oscar.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Strip flow types to read flowtype file from vanilla JS</title><link href="https://ospfranco.com/post/2023/08/16/strip-flow-types-to-read-flowtype-file-from-vanilla-js/" rel="alternate" type="text/html" title="Strip flow types to read flowtype file from vanilla JS" /><published>2023-08-16T15:00:00+02:00</published><updated>2023-08-16T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/16/strip%20flow%20types%20to%20read%20flowtype%20file%20from%20vanilla%20js</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/16/strip-flow-types-to-read-flowtype-file-from-vanilla-js/"><![CDATA[<p>Unlike Typescript where you have tools like ts-node that allow you to quickly run typescript files without tooling (think without webpack or metro), I found however no way to achieve this with FlowType.</p>

<p>I needed to use a translation file that had flow types in vanilla JS and I figured out a way to strip the types.</p>

<h2 id="install-flow-remove-types-package">Install flow remove types package</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">yarn</span> <span class="nx">add</span> <span class="nx">flow</span><span class="o">-</span><span class="nx">remove</span><span class="o">-</span><span class="nx">types</span>
</code></pre></div></div>

<h2 id="use-flow-remove-types">Use flow remove types</h2>

<p>In my use case I had a huge file with translations that is strongly typed and I wanted to migrate them to another format.</p>

<p>The process is basically:</p>

<ol>
  <li>Read file from disk</li>
  <li>Pass it to flow-remove-types</li>
  <li>Write to another file (or you can also load it in memory with another package <code class="language-plaintext highlighter-rouge">require-from-string</code>)</li>
  <li>import it normally</li>
</ol>

<p>Here is a part of the script I used:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// allows you to call this file like a script from the command line</span><span class="cp">
#!/usr/bin/env node
</span>
<span class="kd">let</span> <span class="nx">flowRemoveTypes</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">flow-remove-types</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">// let translations = require('../src/I18n/translations') // cannot import it bc it contains flow types</span>
<span class="kd">let</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">function</span> <span class="nf">unpackTranslation</span><span class="p">(</span><span class="nx">translationObj</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">translationObj</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">translationObj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">{}</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nf">entries</span><span class="p">(</span><span class="nx">translationObj</span><span class="p">).</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">entry</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">[</span><span class="nx">entry</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="nf">unpackTranslation</span><span class="p">(</span><span class="nx">entry</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">key</span><span class="p">)</span>
  <span class="p">})</span>

  <span class="k">return</span> <span class="nx">res</span>

<span class="p">}</span>

<span class="c1">// Start by taking the translations file and stripping flow out of it</span>
<span class="kd">let</span> <span class="nx">translationsInput</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nf">readFileSync</span><span class="p">(</span><span class="dl">'</span><span class="s1">../src/I18n/translations.js</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">);</span>

<span class="c1">// Remove flow and module export with traditional syntax</span>
<span class="kd">let</span> <span class="nx">translationsOutput</span> <span class="o">=</span> <span class="nf">flowRemoveTypes</span><span class="p">(</span><span class="nx">translationsInput</span><span class="p">).</span><span class="nf">toString</span><span class="p">().</span><span class="nf">replace</span><span class="p">(</span><span class="dl">'</span><span class="s1">export default TRANSLATIONS</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">module.exports = TRANSLATIONS</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">fs</span><span class="p">.</span><span class="nf">writeFileSync</span><span class="p">(</span><span class="dl">'</span><span class="s1">./translations.js</span><span class="dl">'</span><span class="p">,</span> <span class="nx">translationsOutput</span><span class="p">);</span>

<span class="c1">// then we can just read this file</span>
<span class="kd">const</span> <span class="nx">translations</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./translations</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">languages</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">en</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">it</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">pt</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fr</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">es</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">de</span><span class="dl">'</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nf">readFileSync</span><span class="p">(</span><span class="dl">'</span><span class="s1">./webAppTranslationKeys.json</span><span class="dl">'</span><span class="p">))</span>


<span class="nx">languages</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">languageKey</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// let languageTranslations = JSON.parse(fs.readFileSync(`../webapp/public/locales/${languageKey}/translation.json`))</span>
  <span class="kd">let</span> <span class="nx">languageTranslations</span> <span class="o">=</span> <span class="p">{}</span>
  <span class="nx">keys</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">key</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">ogTranslation</span> <span class="o">=</span> <span class="nx">translations</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>

    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">ogTranslation</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">🛑 Could not find translations for</span><span class="dl">'</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
      <span class="nx">process</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nx">languageTranslations</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nf">unpackTranslation</span><span class="p">(</span><span class="nx">ogTranslation</span><span class="p">,</span> <span class="nx">languageKey</span><span class="p">)</span>
  <span class="p">})</span>
  <span class="nx">fs</span><span class="p">.</span><span class="nf">writeFileSync</span><span class="p">(</span><span class="s2">`../webapp/public/locales/</span><span class="p">${</span><span class="nx">languageKey</span><span class="p">}</span><span class="s2">/translation.json`</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">(</span><span class="nx">languageTranslations</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="p">})</span>

<span class="c1">// Delete auto generated file</span>
<span class="nx">fs</span><span class="p">.</span><span class="nf">unlinkSync</span><span class="p">(</span><span class="dl">'</span><span class="s1">./translations.js</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">✅ Generated webapp translations</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Unlike Typescript where you have tools like ts-node that allow you to quickly run typescript files without tooling (think without webpack or metro), I found however no way to achieve this with FlowType.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/oscar.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/oscar.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Disambiguate TypeScript union types</title><link href="https://ospfranco.com/post/2023/08/16/disambiguate-typescript-union-types/" rel="alternate" type="text/html" title="Disambiguate TypeScript union types" /><published>2023-08-16T15:00:00+02:00</published><updated>2023-08-16T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/16/disambiguate%20typescript%20union%20types</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/16/disambiguate-typescript-union-types/"><![CDATA[<p>On TypeScript you can easily create the union of two similar, yet distinct, types:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">iOSPaymentInfo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">orderId</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">iOSOnlyField</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">AndroidPaymentInfo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">orderId</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">androidOnlyField</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">PaymentInfo</span> <span class="o">=</span> <span class="nx">iOSPaymentInfo</span> <span class="o">|</span> <span class="nx">AndroidPaymentInfo</span><span class="p">;</span>

<span class="c1">// Trouble comes</span>

<span class="kd">let</span> <span class="nx">paymentInfo</span><span class="p">:</span> <span class="nx">PaymentInfo</span> <span class="o">=</span> <span class="p">...</span> <span class="c1">// some payment info</span>

<span class="c1">// You cannot access iOSOnlyField or AndroidOnlyField TypeScript will complain the field might be null</span>
<span class="nx">paymentInfo</span><span class="p">.</span><span class="nx">iOSOnlyField</span> <span class="c1">// kaboom</span>
</code></pre></div></div>

<p>You can make typescript happy by adding a literal field that will provide it with enough info to make sure the object is correct:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">iOSPaymentInfo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">orderId</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">iOSOnlyField</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">kind</span><span class="p">:</span> <span class="dl">'</span><span class="s1">iOS</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">AndroidPaymentInfo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">orderId</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">androidOnlyField</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">kind</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Android</span><span class="dl">'</span><span class="p">;</span>

<span class="p">}</span>

<span class="kd">type</span> <span class="nx">PaymentInfo</span> <span class="o">=</span> <span class="nx">iOSPaymentInfo</span> <span class="o">|</span> <span class="nx">AndroidPaymentInfo</span><span class="p">;</span>

<span class="c1">// Trouble comes</span>

<span class="kd">let</span> <span class="nx">paymentInfo</span><span class="p">:</span> <span class="nx">PaymentInfo</span> <span class="o">=</span> <span class="p">...</span> <span class="c1">// some payment info</span>

<span class="k">if</span><span class="p">(</span><span class="nx">paymentInfo</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">iOS</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Type safe code for iOSPaymentInfo</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="c1">// Type safe code for AndroidPaymentInfo</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p><a href="https://basarat.gitbook.io/typescript/type-system/discriminated-unions">Source</a></p>
</blockquote>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[On TypeScript you can easily create the union of two similar, yet distinct, types:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/oscar.jpg" /><media:content medium="image" url="https://ospfranco.com/assets/oscar.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>