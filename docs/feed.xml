<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://ospfranco.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ospfranco.com/" rel="alternate" type="text/html" /><updated>2023-08-11T09:50:31+02:00</updated><id>https://ospfranco.com/feed.xml</id><title type="html">Oscar Franco</title><author><name>Oscar Franco</name></author><entry><title type="html">React Native, how to set up fonts with a single canonical name</title><link href="https://ospfranco.com/post/2023/08/11/react-native,-how-to-set-up-fonts-with-a-single-canonical-name/" rel="alternate" type="text/html" title="React Native, how to set up fonts with a single canonical name" /><published>2023-08-11T15:00:00+02:00</published><updated>2023-08-11T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/11/react%20native,%20how%20to%20set%20up%20fonts%20with%20a%20single%20canonical%20name</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/11/react-native,-how-to-set-up-fonts-with-a-single-canonical-name/"><![CDATA[<p>Dealing with fonts in React Nativeis painful, iOS uses the canonical name, while android uses file names. This leads to most developers wrapping the <code class="language-plaintext highlighter-rouge">&lt;Text&gt;</code> component in some custom component that sets the <code class="language-plaintext highlighter-rouge">fontFamily</code> style in some logic to detect the correct name in iOS and Android. We can however fix this and use a single canonical name. Like this:</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">Text</span>
	<span class="na">style</span><span class="p">=</span><span class="si">{</span> <span class="p">{</span>
		<span class="na">fontFamily</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Raleway</span><span class="dl">'</span><span class="p">,</span>
		<span class="na">fontWeight</span><span class="p">:</span> <span class="dl">'</span><span class="s1">600</span><span class="dl">'</span>
	<span class="p">}</span><span class="si">}</span>
<span class="p">&gt;</span>
	Hello
<span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>iOS already takes the canonical name, but we need to help Android.</p>

<h1 id="download-the-fonts">Download the fonts</h1>

<p>Download your font family, you should get all the files in a folder (we will call ours <code class="language-plaintext highlighter-rouge">./raleway</code>):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>`Raleway-Thin.ttf` (100)
`Raleway-ThinItalic.ttf`
`Raleway-ExtraLight.ttf` (200)
`Raleway-ExtraLightItalic.ttf`
`Raleway-Light.ttf` (300)
`Raleway-LightItalic.ttf`
`Raleway-Regular.ttf` (400)
`Raleway-Italic.ttf`
`Raleway-Medium.ttf` (500)
`Raleway-MediumItalic.ttf`
`Raleway-SemiBold.ttf` (600)
`Raleway-SemiBoldItalic.ttf`
`Raleway-Bold.ttf` (700)
`Raleway-BoldItalic.ttf`
`Raleway-ExtraBold.ttf` (800)
`Raleway-ExtraBoldItalic.ttf`
`Raleway-Black.ttf` (900)
`Raleway-BlackItalic.ttf`
</code></pre></div></div>

<h3 id="find-the-font-family-name">Find the font family name</h3>

<blockquote>
  <p>You will need otfinfo installed in your system to perform this step. It is shipped with many Linux distributions. On MacOS, install it via <code class="language-plaintext highlighter-rouge">lcdf-typetools</code> brew package.</p>

</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>otfinfo <span class="nt">--family</span> Raleway-Regular.ttf
</code></pre></div></div>

<p>Should print “Raleway”. This value must be retained for the Android setup. This name will be used in React <code class="language-plaintext highlighter-rouge">fontFamily</code> style.</p>

<h1 id="android">Android</h1>

<p>For Android, we are going to use <a href="https://developer.android.com/guide/topics/ui/look-and-feel/fonts-in-xml">XML Fonts</a> to define variants of a base font family.</p>

<blockquote>
  <p>Remark: This procedure is available in React Native since commit fd6386a07eb75a8ec16b1384a3e5827dea520b64 (7 May 2019 ), with the addition of ReactFontManager::addCustomFont method.</p>

</blockquote>

<h3 id="1-copy-and-rename-assets-to-the-resource-font-folder">1. Copy and rename assets to the resource font folder</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>android/app/src/main/res/font
<span class="nb">cp</span> ./raleway/<span class="k">*</span>.ttf android/app/src/main/res/font
</code></pre></div></div>

<p>We must rename the font files following these rules to comply with Android asset names restrictions:</p>

<ul>
  <li>Replace <code class="language-plaintext highlighter-rouge">-</code> with <code class="language-plaintext highlighter-rouge">_</code>;</li>
  <li>Replace any uppercase letter with its lowercase counterpart.</li>
</ul>

<p>You can use the below bash script (make sure you give the font folder as first argument):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># fixfonts.sh</span>

<span class="nb">typeset </span><span class="nv">folder</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span><span class="k">if</span> <span class="o">[[</span> <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$folder</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$folder</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">pushd</span> <span class="s2">"</span><span class="nv">$folder</span><span class="s2">"</span><span class="p">;</span>
  <span class="k">for </span>file <span class="k">in</span> <span class="k">*</span>.ttf<span class="p">;</span> <span class="k">do
    </span><span class="nb">typeset </span><span class="nv">normalized</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">file</span><span class="p">//-/_</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span>
    <span class="nv">normalized</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">normalized</span><span class="p">,,</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span>
    <span class="nb">mv</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$normalized</span><span class="s2">"</span>  <span class="k">done
  </span><span class="nb">popd
</span><span class="k">fi</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./fixfonts.sh /path/to/root/FontDemo/android/app/src/main/res/font
</code></pre></div></div>

<h3 id="2-create-the-definition-file">2. Create the definition file</h3>

<p>Create the <code class="language-plaintext highlighter-rouge">android/app/src/main/res/font/raleway.xml</code> file with the below content. Basically, we must create one entry per <code class="language-plaintext highlighter-rouge">fontStyle</code> / <code class="language-plaintext highlighter-rouge">fontWeight</code> combination we wish to support, and register the corresponding asset name.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;font-family xmlns:app="http://schemas.android.com/apk/res-auto"&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="100" app:font="@font/raleway_thin" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="100" app:font="@font/raleway_thinitalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="200" app:font="@font/raleway_extralight" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="200" app:font="@font/raleway_extralightitalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="300" app:font="@font/raleway_light" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="300" app:font="@font/raleway_lightitalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="400" app:font="@font/raleway_regular" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="400" app:font="@font/raleway_italic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="500" app:font="@font/raleway_medium" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="500" app:font="@font/raleway_mediumitalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="600" app:font="@font/raleway_semibold" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="600" app:font="@font/raleway_semibolditalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="700" app:font="@font/raleway_bold" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="700" app:font="@font/raleway_bolditalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="800" app:font="@font/raleway_extrabold" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="800" app:font="@font/raleway_extrabolditalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="900" app:font="@font/raleway_black" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="900" app:font="@font/raleway_blackitalic"/&gt;
&lt;/font-family&gt;
</code></pre></div></div>

<h3 id="3-register-the-new-font">3. Register the new font</h3>

<p>In <code class="language-plaintext highlighter-rouge">android/app/src/main/java/com/fontdemo/MainApplication.java</code>, bind the font family name with the asset we just created inside <code class="language-plaintext highlighter-rouge">onCreate</code> method.</p>

<blockquote>
  <p>⚠️ If you are registering a different font, make sure you replace “Raleway” with the name found in the former step (find font family name).</p>

</blockquote>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">import com.facebook.react.ReactApplication;
</span> import com.facebook.react.ReactInstanceManager;
 import com.facebook.react.ReactNativeHost;
 import com.facebook.react.ReactPackage;
<span class="gi">+import com.facebook.react.views.text.ReactFontManager;
</span> import com.facebook.soloader.SoLoader;
 import java.lang.reflect.InvocationTargetException;
 import java.util.List;

public class MainApplication extends Application implements ReactApplication {
   @Override
   public void onCreate() {
     super.onCreate();
<span class="gi">+    [ReactFontManager.getInstance().addCustomFont(this, "Raleway", R.font.raleway);](https://www.notion.so/Locio-6a09ff579fbc4cb6aaf5cff020ef8df0?pvs=21)
</span>     SoLoader.init(this, /* native exopackage */ false);
     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
   }

</code></pre></div></div>

<h1 id="ios">iOS</h1>

<p>On iOS, things will get much easier. We will basically just need to use React Native asset link functionality. This method requires that we use the font family name retrieved in the first step as <code class="language-plaintext highlighter-rouge">fontFamily</code> style attribute.</p>

<h3 id="copy-font-files-to-assets-folder">Copy font files to assets folder</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir -p assets/fonts
cp /tmp/raleway/*.ttf assets/fonts
</code></pre></div></div>

<h3 id="addreact-nativeconfigjs">Add <code class="language-plaintext highlighter-rouge">react-native.config.js</code></h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>module.exports = {
  project: {
    ios: {},
    android: {},
  },
  assets: ['./assets/fonts'],
};
</code></pre></div></div>

<h3 id="link">Link</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx react-native-asset
</code></pre></div></div>

<p>You can remove assets for android generated with this command, since we are using the XML Font method. Otherwise, they would be included twice in the app bundle!</p>

<p><code class="language-plaintext highlighter-rouge">rm -rf android/app/src/main/assets/fonts</code></p>

<h1 id="setting-a-default-global-font">Setting a default global font</h1>

<p>After the fonts are installed one can simply define a global default font by installing <code class="language-plaintext highlighter-rouge">react-native-simple-default-props</code>:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">yarn add react-native-simple-default-props
</span></code></pre></div></div>

<p>Then on app start:</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">setDefaultProps</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-native-simple-default-props</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">setDefaultProps</span><span class="p">(</span><span class="nx">Text</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">style</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">fontFamily</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Raleway</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#0F0F26</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Now you can simply use any <code class="language-plaintext highlighter-rouge">&lt;Text/&gt;</code>component without the need for any semantic wrapper!</p>

<h1 id="credits">Credits</h1>

<p>Credit to <a href="https://github.com/jsamr/react-native-font-demo#goal">https://github.com/jsamr/react-native-font-demo</a> for finding the xml fonts setup.</p>

<p><a href="https://github.com/dioi2000/react-native-simple-default-props#readme">https://github.com/dioi2000/react-native-simple-default-props</a> for the easy setup of default styles.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Dealing with fonts in React Nativeis painful, iOS uses the canonical name, while android uses file names. This leads to most developers wrapping the &lt;Text&gt; component in some custom component that sets the fontFamily style in some logic to detect the correct name in iOS and Android. We can however fix this and use a single canonical name. Like this:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">React Native hot module hooks</title><link href="https://ospfranco.com/post/2023/08/11/react-native-hot-module-hooks/" rel="alternate" type="text/html" title="React Native hot module hooks" /><published>2023-08-11T15:00:00+02:00</published><updated>2023-08-11T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/11/react%20native%20hot%20module%20hooks</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/11/react-native-hot-module-hooks/"><![CDATA[<p>In some cases you might want to clear listeners or state when a fast-refresh/hot-reload cycle happens. You can do so by hooking up to the hot module:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span><span class="p">.</span><span class="nx">hot</span><span class="p">?.</span><span class="nx">accept</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="nx">store</span><span class="p">.</span><span class="nx">cleanUp</span><span class="p">()</span>
<span class="p">})</span>
</code></pre></div></div>

<p>This will only be called once the new module is mounted, this means any reference the previous in-memory module had, will not be there. Sometimes you really need a reference to an old object to clean it, you can use the counter part <code class="language-plaintext highlighter-rouge">dispose</code>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span><span class="p">.</span><span class="nx">hot</span><span class="p">?.</span><span class="nx">dispose</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="nx">myVarThatHoldsARef</span><span class="p">.</span><span class="nx">reset</span><span class="p">()</span>	
<span class="p">});</span>
</code></pre></div></div>

<p>Take note of the optional chaining operator, when compiling the app on production the <code class="language-plaintext highlighter-rouge">hot</code> module will not be there, causing a crash if trying to be called.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[In some cases you might want to clear listeners or state when a fast-refresh/hot-reload cycle happens. You can do so by hooking up to the hot module:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">React Native JSI/TurboModules pitfalls</title><link href="https://ospfranco.com/post/2022/06/05/jsi-pitfalls/" rel="alternate" type="text/html" title="React Native JSI/TurboModules pitfalls" /><published>2022-06-05T15:00:00+02:00</published><updated>2022-06-05T15:00:00+02:00</updated><id>https://ospfranco.com/post/2022/06/05/jsi%20pitfalls</id><content type="html" xml:base="https://ospfranco.com/post/2022/06/05/jsi-pitfalls/"><![CDATA[<p>Here is the latest information dump my findings with React Native’s JSI.</p>

<h1 id="speed-is-relative">Speed is relative</h1>

<p>C++ is the fastest but Swift is fast, Java ByteCode is also fast. Using JSI/TurboModules won’t necessarily make your module faster. <strong>The JSI is a communication layer</strong>, therefore it excels in situations where you <strong>transfer</strong> a lot of data between native and JavaScript.</p>

<p>If you need to pass a few bytes once (or a few times), the old APIs are easier to work with and the performance penalty might be small enough that you might be better off skipping the JSI. Reading a small piece of data from AsyncStorage takes 5ms on release mode, so this extrapolates to any package that does a lot of calculation on the native side and then only returns a small chunk of data to JavaScript.</p>

<p>Here is a comparison, reading a small string (“hello”), one time (release mode -O2 optimized):</p>

<table>
  <thead>
    <tr>
      <th>Framework</th>
      <th>Time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>MMKV</td>
      <td>&gt; 0ms</td>
    </tr>
    <tr>
      <td>Quick SQLite</td>
      <td>&gt; 0ms</td>
    </tr>
    <tr>
      <td>WatermelonDB</td>
      <td>&gt; 8ms</td>
    </tr>
    <tr>
      <td>Async Storage</td>
      <td>&gt; 5ms</td>
    </tr>
  </tbody>
</table>

<p>Artificial benchmarks testing reading the same value or calculating something thousands of times are… disingenuous.</p>

<p>Most frameworks have caches implemented to them, reading anything more than once results in testing if the cache is there. Other important details cannot be ignored: MMKV is a key/value storage, whereas Quick SQLite and WatermelonDB are relational databases on top of SQLite, comparing them is comparing apples to oranges.</p>

<p>Calculating data thousands of times will also mix JSI performance with C++/Swift/Kotlin performance, hard to tell when one ends and the other begins.</p>

<p>IMO it is better to test <strong>transferring a large amount of data</strong>. However, it is hard to find a test that actually makes sense, because details can affect the performance. Returning one large string will only mem-copy (Strings on your native code are not returned directly to JavaScript, but the memory needs to be copied to JSI Strings) once, whereas returning a lot of strings, will have allocate memory multiple times.</p>

<p>I can share some anecdotic experience of some people using Quick SQLite. <a href="https://dev.to/craftzdog/a-performant-way-to-use-pouchdb7-on-react-native-in-2022-24ej">Takuya experienced 2x to 5x speed boost</a> when switching from the old bridge SQLite driver, user <a href="https://twitter.com/sallar">@sallar</a> experienced 2x - 2.5x speed improvement, query time reduced from 600ms to ~250ms, with large SQLite queries. The larger your SQL results the better will Quick SQLite perform for you.</p>

<p>Just to be clear <strong>JSI does cuts the overhead of communication</strong>, transferring a few bytes once is just not the best use-case. It will also excel in cases where you transfer a small chunk of data but you need to do it very often, e.g. reanimated.</p>

<h1 id="i-want-to-use-xyz-programming-language">I want to use XYZ programming language</h1>

<p>Among the questions that get repeated over and over is “how can I use my favorite language?”. I even made a video about it, <a href="https://www.youtube.com/watch?v=_I6bH5_rO2k&amp;t=178s">go watch it</a>.</p>

<p>In the video I made a mistake, I made it sound like there is no possibility to use any other language, which is not technically correct. So here it is explained in a list so hopefully it will be clearer for everyone:</p>

<ul>
  <li>Everything is based on the JSI.</li>
  <li>The JSI is C++.</li>
  <li>TurboModules generates C++ headers (meant to be used with ObjC++ and JNI C++).</li>
  <li>TurboModules currently only allow to use implement the generated headers with ObjC++ and JNI C++.</li>
  <li><strong>You can use any language you want, if you can call it from the native mobile languages</strong>. If you can compile your code (and link it as a static library if necessary), you can just call it. It just misses the point of TurboModules, because a big reason is to give auto-generated type safety. Your compilation process might also become complex (e.g. using Rust)</li>
</ul>

<p>You can use w/e you want, it’s just that you will have to manually modify and sync your function signatures. And to be clear this is partly a limitation of JSI and in some cases compatibility between languages (e.g. Swift and C++ interoperability).</p>

<h1 id="its-so-complex-flutter-is-easy">It’s so complex! Flutter is easy</h1>

<p>Don’t drink this cool-aid, all frameworks abstract the heavy-lifting for you. Even if you would write your app in native there would be occasions where you will have to deal with some complexity. If not on the language level, it would be on the API level, on some integration, on some framework model. etc. I have written a fair amount of native code at this point and I it doesn’t get any easier.</p>

<p>I have already seen tweets from flutter devs complaining they are writing dart/swift/kotlin/c++ code at the same time. If you are interested in this topic you are going deep into the inner working of the frameworks, this is usually what it takes to build software at this level.</p>

<p>As far as I can see here are the options:</p>

<ul>
  <li>Wait and hope someone solves your problem</li>
  <li>Create your own framework (With time you will hit the C++/Swift/Kotlin problem anyways)</li>
  <li>Pay someone to solve the problem for you</li>
  <li>DIY and enjoy the process</li>
</ul>

<p><a href="mailto:ospfranco@gmail.com">Get in touch if you need help with the JSI</a>.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Here is the latest information dump my findings with React Native’s JSI.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Email templates with React and Tailwind</title><link href="https://ospfranco.com/post/2022/01/08/email-templates-with-react-and-tailwind/" rel="alternate" type="text/html" title="Email templates with React and Tailwind" /><published>2022-01-08T14:00:00+01:00</published><updated>2022-01-08T14:00:00+01:00</updated><id>https://ospfranco.com/post/2022/01/08/email%20templates%20with%20react%20and%20tailwind</id><content type="html" xml:base="https://ospfranco.com/post/2022/01/08/email-templates-with-react-and-tailwind/"><![CDATA[<p>Sending emails is basic SaaS 101, however it always feel broken to me. Instead of using the same tools I used to develop my apps, I always ended up importing a different framework, we used to use one many years ago with Java, on Node we used handlebars, this is just one more link of complexity in the modern tech stack.</p>

<p>I didn’t want to go down that path one more time, so I spend some time trying to answer one question: can I create a email template using only React and Tailwind (with my existing configuration) and the answer is: YES! well, mostly…</p>

<h2 id="render-a-react-component-to-plain-html-markup">Render a React component to plain HTML Markup</h2>

<p>The first part of this question was the easiest to answer, how to turn a React component into raw html string:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// unfortunately no type information for this module</span>
<span class="c1">// @ts-ignore</span>
<span class="k">import</span> <span class="nx">ReactDOMServer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-dom/server</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">TestMail</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
      <span class="c1">// important to keep the color scheme on some email clients</span>
      <span class="p">{</span><span class="cm">/* &lt;meta name="color-scheme" content="only"&gt;&lt;/meta&gt; */</span><span class="p">}</span>
      <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span><span class="c1">// We will use this later&lt;/head&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">py-3</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Hi</span> <span class="nx">I</span> <span class="nx">am</span> <span class="nx">a</span> <span class="nx">react</span> <span class="nx">component</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/html</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">emailHtml</span> <span class="o">=</span> <span class="nx">ReactDOMServer</span><span class="p">.</span><span class="nx">renderToStaticMarkup</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">TestMail</span> <span class="o">/&gt;</span><span class="p">);</span>
</code></pre></div></div>

<p>This will take a React component and render it as a plain HTML markup, you can see I have a tailwind class in there <code class="language-plaintext highlighter-rouge">py-3</code>, unfortunately if you take a look inside the html, you will see it has not been transpiled, so we need to run this html through an inliner to it inlines all the classes as embedded style props in the html.</p>

<p>This was the tricky part, there are some frameworks that try to solve this exact problem, like maizzle for example, but just by reading the home page I already see an ocean of complexity, so early in my googling I stumbled upon <a href="https://github.com/soheilpro/mailwind">Mailwind</a>, the instructions were scant, but it was exactly what I wanted, it works based on <a href="https://github.com/Automattic/juice">Juice</a>, not going to bore you with the details, here is the snippet that makes it work:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">juice</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">juice</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nx">juicify</span><span class="p">(</span><span class="nx">html</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">juice</span><span class="p">.</span><span class="nx">juiceResources</span><span class="p">(</span>
      <span class="nx">html</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="na">webResources</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">relativeTo</span><span class="p">:</span> <span class="dl">"</span><span class="s2">public/</span><span class="dl">"</span><span class="p">,</span>
        <span class="p">},</span>
      <span class="p">},</span>
      <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">processed</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">`Could not juice email</span><span class="p">${</span><span class="nx">err</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="nx">resolve</span><span class="p">(</span><span class="nx">processed</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You also need to update the email component to include a stylesheet in the head tag:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
  <span class="p">{</span><span class="cm">/* eslint-disable-next-line @next/next/no-css-tags */</span><span class="p">}</span>
  <span class="o">&lt;</span><span class="nx">link</span> <span class="nx">href</span><span class="o">=</span><span class="dl">"</span><span class="s2">mailwind.css</span><span class="dl">"</span> <span class="nx">rel</span><span class="o">=</span><span class="dl">"</span><span class="s2">stylesheet</span><span class="dl">"</span> <span class="nx">data</span><span class="o">-</span><span class="nx">inline</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="sr">/head</span><span class="err">&gt;
</span></code></pre></div></div>

<blockquote>
  <p>You can already see that you need to import mailwind.css file and make it accessible somewhere in your project, on the juicify function the <code class="language-plaintext highlighter-rouge">relativeTo</code> path, will allow juice to correctly determine where to fetch the .css file</p>
</blockquote>

<p>And TA-DA you have working email templates with React and Tailwind, no need for complex framework, configuration files, etc. The juicify function will output a raw string, which you can send to your email distributor and it should work just fine.</p>

<h2 id="the-caveat">The caveat</h2>

<p>Now there is one small caveat here, which is the mailwind.css file, it’s not going to be your application styles, some of the changes are good, for example everything being based on px styles, but you might need your own colors, or paddings, etc.</p>

<p>TBH this is where I stopped because this is good enough for me, but if you really need your own styles, I figure this is not too hard to achieve, you basically need to tell tailwind to process your <code class="language-plaintext highlighter-rouge">tailwind.config.js</code> and spit out a <code class="language-plaintext highlighter-rouge">.css</code> file, shouldn’t be too hard, the small details of PX units I have not tried, but I think that should also be fixable. For me I only had to add 2 - 3 classes with some extra fill colors, and I can live with that.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Sending emails is basic SaaS 101, however it always feel broken to me. Instead of using the same tools I used to develop my apps, I always ended up importing a different framework, we used to use one many years ago with Java, on Node we used handlebars, this is just one more link of complexity in the modern tech stack.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Reset NVRAM on m1 mac</title><link href="https://ospfranco.com/post/2021/12/21/reset-nvram-on-m1-mac/" rel="alternate" type="text/html" title="Reset NVRAM on m1 mac" /><published>2021-12-21T14:00:00+01:00</published><updated>2021-12-21T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/12/21/reset%20nvram%20on%20m1%20mac</id><content type="html" xml:base="https://ospfranco.com/post/2021/12/21/reset-nvram-on-m1-mac/"><![CDATA[<p>I needed to reset my M1 NVRAM for reasons, here to save you some seconds of googling</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo nvram -c
</code></pre></div></div>

<p>You might see some errors regarding some services that cannot be restarted (fmm-mobileme and fmm-computer-name), but you can ignore those, afterwards restart your computer and it should be fine</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[I needed to reset my M1 NVRAM for reasons, here to save you some seconds of googling]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Never use anything except a pure UUID (Anti REGEX argument)</title><link href="https://ospfranco.com/post/2021/12/18/never-use-anything-except-a-pure-uuid/" rel="alternate" type="text/html" title="Never use anything except a pure UUID (Anti REGEX argument)" /><published>2021-12-18T14:00:00+01:00</published><updated>2021-12-18T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/12/18/never%20use%20anything%20except%20a%20pure%20uuid</id><content type="html" xml:base="https://ospfranco.com/post/2021/12/18/never-use-anything-except-a-pure-uuid/"><![CDATA[<p>Browsing my notes found this small gem</p>

<blockquote>
  <p>Use UUIDs for id-ing your entities. Period.</p>

  <p>Do not use anything else, don’t try to be clever, it just creates embedded logic and soon you will find yourself regexing your ids like a chump</p>
</blockquote>

<h2 id="lesson-never-learned">Lesson never learned</h2>

<p>I first came into this idea many years ago, my college professor was in charge of designing and leading the team responsible for the student system (assignments, class schedules, notes, etc), they bought an Israeli system and then adapted it for our university.</p>

<p>At the time, my professor thought it would be a great idea to make the user ids contain some extra information, so that one could at first glance tell the enrollment year and the student age, so each student id would be something like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[enrollment_year]_[birth_year]_[id_number]
</code></pre></div></div>

<p>This is great in theory, whoemever is in charge already gets some information without needing to type the id into the system.</p>

<h2 id="embedded-logic">Embedded logic</h2>

<p>In real life, this created a slew of problems, one of them was that the students id were easily guessable, this created a lot of problems with phishing attempts, this had serious consequences.</p>

<p>But another more subtle was the consequence for the project code itself, since some of the information now did not need a query to the database, then came the REGEXES, to parse and extract this meta information from the IDs.</p>

<p>This generates a lot implicit and embedded logic, what if the ID needs to be changed? then entire parts of the system didn’t work properly anymore.</p>

<h2 id="regexes-are-fine-on-5-of-the-cases">REGEXES are fine on 5% of the cases</h2>

<p>Regexes definitely have their use cases, especially when extracting information from a third-party data source, where you have no control over the data you are getting.</p>

<p>But please, don’t ever try to embed data in your systems.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Browsing my notes found this small gem]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to install M1 (arm) compatible JDK</title><link href="https://ospfranco.com/post/2021/12/11/how-to-install-m1-(arm)-compatible-jdk/" rel="alternate" type="text/html" title="How to install M1 (arm) compatible JDK" /><published>2021-12-11T14:00:00+01:00</published><updated>2021-12-11T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/12/11/how%20to%20install%20m1%20(arm)%20compatible%20jdk</id><content type="html" xml:base="https://ospfranco.com/post/2021/12/11/how-to-install-m1-(arm)-compatible-jdk/"><![CDATA[<p>Recently found out a nice trick to easily install a compatible JDK on mac without scouring the internet or brew formulas.</p>

<p>You can directly do it via Android Studio (or intellij IDEA), just go into the preferences and on the build tools &gt; gradle menu, you can select which version of the JDK you want to use, if you open the dropdown you will see there is also an option to download a JDK.</p>

<p><img src="https://ospfranco.com/assets/androidStudio1.png" alt="Android Studio 1" /></p>

<p>Click on it and you will get a small dialog were you can select the flavor of JDK you want, I know for certain that the Azul versions are arm compatible.</p>

<p><img src="https://ospfranco.com/assets/androidStudio2.png" alt="Android Studio 2" /></p>

<p>(BTW I’m using the Android Studio Preview to get native arm android images)</p>

<p>Very convenient!</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Recently found out a nice trick to easily install a compatible JDK on mac without scouring the internet or brew formulas.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Beauty on code iterations</title><link href="https://ospfranco.com/post/2021/12/08/beauty-on-code-iterations/" rel="alternate" type="text/html" title="Beauty on code iterations" /><published>2021-12-08T14:00:00+01:00</published><updated>2021-12-08T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/12/08/beauty%20on%20code%20iterations</id><content type="html" xml:base="https://ospfranco.com/post/2021/12/08/beauty-on-code-iterations/"><![CDATA[<p>A perfect model of your problem exists, you will just never be able to find it and that <strong>should</strong> be OK.</p>

<p>I believe the moment you have typed your code, it’s already becoming obsolete and it’s already wrong, because of your understanding of the problem will only expand with time, and since every problem is an ocean of complexity, you are pretty much hopeless in trying to code your way to enlightenment.</p>

<p>My approach: do OK code when solving the problem for the first time, fast, kinda dirty, see how it performs, see if it solves the problem, with a bit of time and patience you will see patterns solidify. The catch is: you have to clean it up, with the same energy and fervour you wrote it the first time.</p>

<p>I find this technique so invigorating though, instead of sloshing through endless discussions, I get the satisfaction of solving the problem first, instead of wasting my time on a potential dead-end. Afterwards, I get the pleasure of polishing the solution to a shiny state.</p>

<p>Now if I could only convince my team to see it that way…</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[A perfect model of your problem exists, you will just never be able to find it and that should be OK.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Startups Latinoamerica</title><link href="https://ospfranco.com/post/2021/11/04/startups-latinoamerica/" rel="alternate" type="text/html" title="Startups Latinoamerica" /><published>2021-11-04T14:00:00+01:00</published><updated>2021-11-04T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/11/04/startups%20latinoamerica</id><content type="html" xml:base="https://ospfranco.com/post/2021/11/04/startups-latinoamerica/"><![CDATA[<p>Aquí les dejo la presentanción de la charla sobre Startups en Latinoamérica:</p>

<p><a href="https://ospfranco.com/assets/StartUpsLatinoamerica.key">Presentación</a></p>

<p>Espero ver alguna Startup Boliviana en algunos años! Si necesitan apoyo no duden en contactarme!</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Aquí les dejo la presentanción de la charla sobre Startups en Latinoamérica:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Stop throwing exceptions</title><link href="https://ospfranco.com/post/2021/08/31/stop-throwing-exceptions/" rel="alternate" type="text/html" title="Stop throwing exceptions" /><published>2021-08-31T15:00:00+02:00</published><updated>2021-08-31T15:00:00+02:00</updated><id>https://ospfranco.com/post/2021/08/31/stop%20throwing%20exceptions</id><content type="html" xml:base="https://ospfranco.com/post/2021/08/31/stop-throwing-exceptions/"><![CDATA[<p>Throwing exceptions makes programms unpredictable by breaking the normal control flow.</p>

<p>Consider a simple axiom: <strong>unexpected things happen all the time</strong>.</p>

<p>Some unexpected things are “common”: users input weird characters, things get deleted, libraries have unexpected behaviors, etc. However, there are other kind of unexpected things, things cannot be recovered from: disks get full, dynamic library is missing, program is missconfigured, etc. Today’s ecosystem treats every exception as equal by throwing exceptions.</p>

<p>The real problem comes when we forget to handle these exceptions or we don’t know the code we are calling can throw exceptions.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// oops forgot to sanitize my input</span>
<span class="kd">let</span> <span class="nx">userInput</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">10a</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// APPLICATION CRASH! 10a cannot be parsed as a int!</span>
<span class="kd">let</span> <span class="nx">date</span> <span class="o">=</span> <span class="nx">originalDate</span><span class="p">.</span><span class="nx">setDay</span><span class="p">(</span><span class="nx">userInput</span><span class="p">).</span><span class="nx">toISO</span><span class="p">();</span>

<span class="c1">// it might not even be thrown by the date library, but some second level dependency...</span>
</code></pre></div></div>

<p>A lot of times this code is implicit and invisible to the application developer. The exception simply bulldozes and bubbles until it is catched or crashes the programm.</p>

<p>There lies one of the biggest problems: <strong>how do I know which function can throw?</strong> do I have to try/catch every line of code I have not written myself?</p>

<h1 id="kernel-errors">Kernel errors</h1>

<p>If exceptions are so disruptive to the flow of a program, why do we use them?</p>

<p>In the earlier days of computing, programs were not as brittle, that is because exceptions were reserved for kernel panic calls. If your program succesfully executed its task it would terminate with a 0 integer and anything else meant a unsuccessful execution. This is still visible in today’s shell scripts, where if a command fails with a non-zero exit code, it means it has not succesfully completed. Exceptions where reserved for Kernel panics, exactly those I mentioned (full disk, missing dll, etc.) and were meant to completely halt a program (or even the computer!)</p>

<p>Inspired by this kernel exceptions the developer community seems to have thought: “that’s a neat trick! I can just throw an exception here and catch it somewhere above my stack! It even unwinds the call stack for me!”. Other words: short-term convenience.</p>

<p>But this short-term convenience carried a price, <strong>it added implicit behavior to ALL code</strong>, you could no longer read the calling code and understand what was going on without understanding the whole.</p>

<p>I believe user code without exceptions makes for a easier pattern to understand, debug and maintain.</p>

<h1 id="error-carrying-monads">Error carrying monads</h1>

<p>What if every function not only returned the output but any error it produces.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">userInput</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">10a</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">let</span> <span class="p">{</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">date</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">originalDate</span><span class="p">.</span><span class="nx">setDay</span><span class="p">(</span><span class="nx">userInput</span><span class="p">).</span><span class="nx">toISO</span><span class="p">();</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// handle the error gracefully</span>
  <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// do my thing</span>
</code></pre></div></div>

<p>This brings multiple benefits:</p>

<ul>
  <li>Code that can fail becomes explicit (even better with TypeScript)</li>
  <li>Errors are part of the normal flow of a program</li>
  <li>Easily readable and the intention of the code is clear</li>
</ul>

<p>Many of the new languages, like Rust or Swift, have now used composite types that carry this information, which will even force you to handle code that can fail. For example in Rust:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">enum</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">E</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="nf">Ok</span><span class="p">(</span><span class="n">T</span><span class="p">),</span>
    <span class="nf">Err</span><span class="p">(</span><span class="n">E</span><span class="p">),</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is what is called an <code class="language-plaintext highlighter-rouge">Error Monad</code>. This struct is not available in JavaScript yet, but you can return tuples or objects and the result is just as good!</p>

<h1 id="use-exceptions-for-real-panics">Use exceptions for real panics</h1>

<p>So now you can let real “exceptions” be what they were meant for <strong>unrecoverable program state</strong> and therefore should crash the application. Whereas the rest of your code will just be better.</p>

<p>I have encountered some libraries that follow this pattern, joi for example, as well as some API libraries like Stripe.</p>

<h1 id="references">References</h1>

<p>Although I tweeted about this issue before, it was only after reading <a href="https://humanlytyped.hashnode.dev/away-from-exceptions-errors-as-values">Barise’s article</a> that I decided to write my own. And there are many more articles on the topic: <a href="https://mattwarren.org/2016/12/20/Why-Exceptions-should-be-Exceptional/">some against exceptions</a> some <a href="https://blog.plan99.net/what-s-wrong-with-exceptions-nothing-cee2ed0616">for them</a>.</p>

<p>I believe some of the claims <strong>for</strong> exceptions are quite missguided, such as: fast prototyping! Stack traces! etc. Exceptions are definitely useful and as stated some of this mechanisms are golden for real exceptional situations, but hurt so much when used freely and carelessly.</p>

<h1 id="bonus-js-exceptions-can-leak-memory">Bonus: JS exceptions can leak memory</h1>

<p><img src="https://ospfranco.com/assets/errorStack.png" alt="errorStack" title="errorStack" /></p>

<blockquote>
  <p>The error keeps the function frames around until it the stack string is created or it is garbage collected</p>
</blockquote>

<p>It’s a bit of an edge case, but given a large enough application it’s bound to happen.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Throwing exceptions makes programms unpredictable by breaking the normal control flow.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>