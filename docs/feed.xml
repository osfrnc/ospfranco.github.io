<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://ospfranco.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ospfranco.com/" rel="alternate" type="text/html" /><updated>2023-11-09T22:04:28+01:00</updated><id>https://ospfranco.com/feed.xml</id><title type="html">Oscar Franco</title><author><name>Oscar Franco</name></author><entry><title type="html">Advanced C++ notes</title><link href="https://ospfranco.com/post/2023/11/08/advanced-c++-notes/" rel="alternate" type="text/html" title="Advanced C++ notes" /><published>2023-11-08T14:00:00+01:00</published><updated>2023-11-08T14:00:00+01:00</updated><id>https://ospfranco.com/post/2023/11/08/advanced%20c++%20notes</id><content type="html" xml:base="https://ospfranco.com/post/2023/11/08/advanced-c++-notes/"><![CDATA[<h1 id="noteworthy-types">Noteworthy Types</h1>

<p><code class="language-plaintext highlighter-rouge">uint8_t</code> = <code class="language-plaintext highlighter-rouge">byte</code> = a type of unsigned integer of length 8 bits</p>

<h1 id="references">References</h1>

<h2 id="printf">Printf</h2>

<p><code class="language-plaintext highlighter-rouge">printf</code> is legacy C, type unsafe, meaning you should REALLY NOT USE IT. <code class="language-plaintext highlighter-rouge">cout</code> seems to be accepted but android logging does not use it.</p>

<blockquote>
  <p>üí° printing a <code class="language-plaintext highlighter-rouge">size_t</code> is done via <code class="language-plaintext highlighter-rouge">printf(‚Äù%zu‚Äù, sizeVar)</code></p>
</blockquote>

<h2 id="define-pre-processors">DEFINE pre-processors</h2>

<p>In various C code, I see constants defined like this:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define T 100
</span></code></pre></div></div>

<p>Whereas in C++ examples, it is almost always:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">int</span> <span class="n">T</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>THEY ARE BAD PRACTICE IN C++</strong></p>

<p>Because all macros (which are what¬†<code class="language-plaintext highlighter-rouge">#define</code>s define) are in a single namespace and they take effect everywhere. Variables, including¬†<code class="language-plaintext highlighter-rouge">const</code>-qualified variables, can be encapsulated in classes and namespaces.</p>

<p>Macros are used in C because in C, a¬†<code class="language-plaintext highlighter-rouge">const</code>-qualified variable is not actually a constant, it is just a variable that cannot be modified. A¬†<code class="language-plaintext highlighter-rouge">const</code>-qualified variable cannot appear in a constant expression, so it can‚Äôt be used as an array size, for example.</p>

<p>In C++, a¬†<code class="language-plaintext highlighter-rouge">const</code>-qualified object that is initialized with a constant expression (like¬†<code class="language-plaintext highlighter-rouge">const int x = 5 * 2;</code>)¬†<em>is</em>¬†a constant and can be used in a constant expression, so you can and should use them.</p>

<h1 id="libraries">Libraries</h1>

<p>After your code is compiled to a static lib (<code class="language-plaintext highlighter-rouge">.a</code> on macOS and <code class="language-plaintext highlighter-rouge">.so</code> on linux)</p>

<p>One useful tool is <code class="language-plaintext highlighter-rouge">nm</code>. Displays the symbol label inside of your so file, which is useful for debugging any missing symbols.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nm <span class="nt">-gDC</span> myLibrary.so
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">-g</code> Displays only global (external) symbols</p>
</blockquote>

<p>Each symbol name is preceded by its value, followed by the following description character:</p>

<table>
  <thead>
    <tr>
      <th>Symbol</th>
      <th>Object</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>U</td>
      <td>undefined</td>
    </tr>
    <tr>
      <td>A</td>
      <td>absolute</td>
    </tr>
    <tr>
      <td>T</td>
      <td>text section symbol</td>
    </tr>
    <tr>
      <td>D</td>
      <td>data selection symbol</td>
    </tr>
    <tr>
      <td>B</td>
      <td>bss section symbol</td>
    </tr>
    <tr>
      <td>C</td>
      <td>common symbol</td>
    </tr>
    <tr>
      <td>-</td>
      <td>Debugger symbol entries (only with -a)</td>
    </tr>
    <tr>
      <td>S</td>
      <td>Symbol in a section other than those above(???)</td>
    </tr>
    <tr>
      <td>I</td>
      <td>indirect symbol</td>
    </tr>
  </tbody>
</table>

<p>If the symbol is local (non-external), the symbol‚Äôs type is instead represented by the corresponding lower case letter. A lowercase <code class="language-plaintext highlighter-rouge">u</code> in a dynamic shared library indicates an undefined reference to a private external in another module in the same library. Meaning your symbol is missing in the headers and cannot be linked/called.</p>

<p>If the symbol is a Objective-C method, the symbol name is <code class="language-plaintext highlighter-rouge">¬±[Class_name(category_name) method:name:]</code>, where <code class="language-plaintext highlighter-rouge">+</code> is for class methods, <code class="language-plaintext highlighter-rouge">-</code> is for instance
methods, and (category_name) is present only when the method is in a category.</p>

<h1 id="type-aliases">Type aliases</h1>

<p>The old c style of introducing a type-alias is via <code class="language-plaintext highlighter-rouge">typedef</code></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vec</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vInt</span><span class="p">;</span>
</code></pre></div></div>

<p>Starting in C++ 11 the <code class="language-plaintext highlighter-rouge">using</code> keyword was introduced</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="n">vInt</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">vec</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div></div>

<h1 id="virtual-functions">Virtual functions</h1>

<p>Virtual function is a member function that we expect to redefine in a derived class. It ensures <strong>overriding</strong> even if you cast a pointer to the base class.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">print</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Base function"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Derived</span><span class="o">:</span> <span class="k">public</span> <span class="n">Base</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">print</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"derived function"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">Derived</span> <span class="n">d</span><span class="p">;</span>

    <span class="n">Base</span> <span class="o">*</span><span class="n">b</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">derived</span><span class="p">;</span>

    <span class="n">b</span><span class="o">-&gt;</span><span class="n">print</span><span class="p">();</span> <span class="c1">// prints "derived function"</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="smart-pointers">Smart pointers</h1>

<p>Whenever the context where you create the variables ends, the variables you created will get de-allocated. This is a big problem if you want to keep resources alive. e.g.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">function</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">a</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">};</span>
    <span class="p">...</span>
    <span class="c1">// function ends, a gets de-allocated</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Smart pointers will help you keep things alive depending on how you want to keep those objects alive</p>

<h2 id="unique-pointer">Unique pointer</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">p</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">);</span>
<span class="c1">// p &lt;--------&gt;  object</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">p</code> owns the object and the object has only one owner, <code class="language-plaintext highlighter-rouge">p</code>. A unique pointer cannot be copied or passed by value. However, the ownership of its object can be transferred.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">q</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">();</span> <span class="c1">// q created with an int object on the heap</span>
<span class="k">auto</span> <span class="n">p</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">q</span><span class="p">);</span> <span class="c1">// p owns the q's object, q lost it (null pointer).</span>
</code></pre></div></div>

<p>Here is a more complete example</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;memory&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">struct</span> <span class="nc">A</span><span class="p">{</span>
    <span class="o">~</span><span class="n">A</span><span class="p">(){</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Deleted."</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="n">PassIn</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span> <span class="n">a</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="s">"Pointer received."</span><span class="o">&lt;&lt;</span><span class="sc">'\n'</span><span class="p">;</span>

<span class="p">}</span> <span class="c1">// a and its object are deleted.</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>

    <span class="k">auto</span> <span class="n">x</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span><span class="p">();</span>
    <span class="n">PassIn</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="c1">// Pointer received.</span>
    <span class="p">;</span> <span class="c1">// Deleted.</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">x</span><span class="p">)</span> <span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="s">"x is empty."</span><span class="p">;</span> <span class="c1">// true: x is empty.</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A unique pointer is useful if you want to <strong>ensure</strong> only a single copy of your data is kept alive in your code. Once somebody has taken over the pointer (via std::move) the previous reference/owner will completely loose it.</p>

<h2 id="shared-pointer">Shared pointer</h2>

<p>A shared pointer is useful when you want to keep data around as long as any of the owners of the data are alive (e.g. multiple lamdas or multiple objects pointing to a common shared object). The semantics of passing a shared pointer however are subtle and prone to errors.</p>

<h3 id="pass-by-value">Pass by value</h3>

<p>Passing a shared pointer by value will actually add an owner to the pointee (keeping it alive) and is the main use case. In the following code, the vector <code class="language-plaintext highlighter-rouge">a</code> will have the count of owners bumped when foo is called and decreased when <code class="language-plaintext highlighter-rouge">foo</code> finishes running. So the semantics don‚Äôt change.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">function</span> <span class="nf">foo</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">ints</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Do something with ints</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">};</span>

    <span class="n">foo</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>But if you would have a long lived structure and you pass the pointer too it, then the vector will be kept alive as long as the struct is also alive:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">A</span> <span class="p">{</span>

    <span class="c1">// You get a shared vector from some external source</span>
    <span class="c1">// as long as the instance of this class is alive then a will also be kept alive</span>
    <span class="n">A</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="o">-&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>There is a small price to performance price to pay when owning the pointer. So if you only need to access it but not copy it you can pass by reference or by passing the underlaying pointer</p>

<h3 id="pass-by-reference">Pass by reference</h3>

<p>Passing by reference does not increase the owner count, you can however create a shared pointer and become an owner. The benefit of not taking ownership is that you don‚Äôt pay the price of copying and owning the shared pointer.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Does not take ownership (copy the std::shared_ptr) only uses it while this function is alive</span>
<span class="n">function</span> <span class="nf">foo</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="o">&amp;</span><span class="n">ints</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Do something with ints</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">};</span>

    <span class="n">foo</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="pass-the-underlaying-pointer">Pass the underlaying pointer</h3>

<p>Similar to passing by reference except you cannot create a shared_ptr (doing so will create a new shared_ptr but will not increase the owner count)</p>

<h3 id="lambdas">Lambdas</h3>

<p>With this the capture semantics of lambdas are much clearer:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">};</span>

<span class="c1">// Because a is a shared pointer, it will not be de-allocated until myLambda itself is de-allocated, which could be much later down the life of the program</span>
<span class="k">auto</span> <span class="n">myLambda</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="p">]()</span> <span class="p">{</span>
    <span class="c1">// Do something with a</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="weak-pointer">Weak pointer</h2>

<p>A weak pointer is a smart pointer that does not take ownership of an object but act as an observer. It‚Äôs used to observe the object of a shared pointer. It does not participate in reference counting. Weak pointers are mainly used to break circular dependencies.</p>

<h1 id="type-aliases-1">Type Aliases</h1>

<p>On C++ 11, the keyword is <code class="language-plaintext highlighter-rouge">using</code></p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// C++11</span>
<span class="nx">using</span> <span class="nx">counter</span> <span class="o">=</span> <span class="nx">long</span><span class="p">;</span>

<span class="c1">// C++03 equivalent:</span>
<span class="nx">typedef</span> <span class="nx">long</span> <span class="nx">counter</span><span class="p">;</span>
</code></pre></div></div>

<h1 id="null-vs-nullptr">NULL vs nullptr</h1>

<p><code class="language-plaintext highlighter-rouge">NULL</code> is C legacy, <code class="language-plaintext highlighter-rouge">nullptr</code>` is idiomatic C++. Null is convertible to integral types (int, bool, etc) whereas nullptr is not</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="err">‚úÖ</span>
<span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span> <span class="err">‚ùå</span> <span class="c1">// it is however castable to bool</span>
</code></pre></div></div>

<p>The reason why NULL is legacy is because it causes ambiguity when functions are overriden.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// this both match calling a(NULL);</span>

<span class="n">function</span> <span class="n">a</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">...</span>

<span class="n">function</span> <span class="n">a</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">)</span> <span class="p">...</span>
</code></pre></div></div>

<h1 id="stdany-and-stdvariant">std::any and std::variant</h1>

<h2 id="stdany">std::any</h2>

<p>Sometimes you don‚Äôt know which object you are going to receive. Starting on C++ you can use <code class="language-plaintext highlighter-rouge">std::any</code>. <code class="language-plaintext highlighter-rouge">std::any</code> is basically a pointer and a type information, you could do the same yourself but you can type cast to anything and get into trouble, while <code class="language-plaintext highlighter-rouge">std::any</code> can prevent you from gunfoot. It is useful to pass data data around to which you don‚Äôt know the exact type/size and you don‚Äôt care until it is time to cast it and do something useful with it. You can imagine how this is super useful with dealing with JS values that can have anything inside of them.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">any</span> <span class="n">myAnyInt</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">any</span> <span class="n">myAnyStr</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">"this is a string"</span><span class="p">);</span>
</code></pre></div></div>

<p>The problem with <code class="language-plaintext highlighter-rouge">std::any</code> however is you can only run code if you know the type ahead of time (read in your head and not in runtime). You can try to do casting and comparissons but it‚Äôs kinda shit.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">any</span> <span class="n">myAny</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>

<span class="c1">// Later down the line</span>
<span class="k">if</span><span class="p">(</span><span class="n">myAny</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="k">typeid</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">myInt</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">any_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">myAny</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// You cannot really check the type of the thing you held if not by raw comparisson</span>
<span class="c1">// and the types you get are implementation dependent</span>

<span class="k">struct</span> <span class="nc">A</span> <span class="p">{}</span>

<span class="n">std</span><span class="o">::</span><span class="n">any</span> <span class="n">myA</span> <span class="o">=</span> <span class="n">A</span><span class="p">();</span>

<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">myA</span><span class="p">.</span><span class="n">type</span><span class="p">().</span><span class="n">name</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span> <span class="c1">// Might output "x"</span>
</code></pre></div></div>

<h2 id="stdvariant">std::variant</h2>

<p>If you already know what your bag of holding will hold you can use std::variant. It is much better because it will only accept a set of types you define. It will also apply compiler optimizations.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="n">MyBagOfHolding</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">variant</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">double</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">long</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">nullptr_t</span><span class="o">&gt;</span><span class="p">;</span>

<span class="n">MyBagOfHolding</span> <span class="n">bag</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>

<span class="c1">// .. much later down in the code</span>

<span class="k">if</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">holds_alternative</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">bag</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">bag</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This example is simple and might look as good as <code class="language-plaintext highlighter-rouge">std::any</code>, but the compiler optimizations and the type warnings are worth it on it‚Äôs own.</p>

<h1 id="object-initialization">Object initialization</h1>

<p>There is only one way to initialize class consts or reference members, using the the <code class="language-plaintext highlighter-rouge">initialization list</code> syntax. It initializes the variables of an instance before the body of the constructor is called</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Demo</span>
<span class="p">{</span>
    <span class="nx">Demo</span><span class="p">(</span><span class="nx">int</span><span class="o">&amp;</span> <span class="nx">val</span><span class="p">)</span> <span class="p">:</span> <span class="nx">m_val</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span>
     <span class="p">{</span>
     <span class="p">}</span>
<span class="nl">private</span><span class="p">:</span>
    <span class="kd">const</span> <span class="nx">int</span><span class="o">&amp;</span> <span class="nx">m_val</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="destructor">Destructor</h2>

<p>You can execute code after an object has been destructured</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// dispatch_queue.h</span>
<span class="k">class</span> <span class="nc">dispatch_queue</span> <span class="p">{</span>

<span class="nl">public:</span>
<span class="c1">// Explicit constructor (does not allow for argument implicit conversion)</span>
<span class="k">explicit</span> <span class="n">dispatch_queue</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">thread_cnt</span> <span class="o">=</span> <span class="mi">1</span><span class="p">);</span>
<span class="c1">// Destructor</span>
<span class="o">~</span><span class="n">dispatch_queue</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Noteworthy Types]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Cocoapods, use_frameworks with static linking</title><link href="https://ospfranco.com/post/2023/10/15/cocoapods,-use_frameworks-with-static-linking/" rel="alternate" type="text/html" title="Cocoapods, use_frameworks with static linking" /><published>2023-10-15T15:00:00+02:00</published><updated>2023-10-15T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/10/15/cocoapods,%20use_frameworks%20with%20static%20linking</id><content type="html" xml:base="https://ospfranco.com/post/2023/10/15/cocoapods,-use_frameworks-with-static-linking/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">use_frameworks!</code> tells CocoaPods that you want to use XCFrameworks instead of Static Libraries. However, turning on use_frameworks will try to link all dependencies as dynamic, every once in a while you might need to turn it on and might face compilation error in some other library (e.g. vision-camera).</p>

<p>In this case, you can actually use frameworks, yet still force static compiling. Replace</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">use_frameworks!</span>
</code></pre></div></div>

<p>with</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">use_frameworks!</span> <span class="ss">linkage: :static</span>
</code></pre></div></div>

<h1 id="xcframeworks">XCFrameworks</h1>

<p>In case you didn‚Äôt know frameworks are just an Apple concept to package different architectures into a single file. Nothing fancy to it. Inside the <code class="language-plaintext highlighter-rouge">.xcframework</code> file you might find folders per architecture and a <code class="language-plaintext highlighter-rouge">.plist</code> file.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[use_frameworks! tells CocoaPods that you want to use XCFrameworks instead of Static Libraries. However, turning on use_frameworks will try to link all dependencies as dynamic, every once in a while you might need to turn it on and might face compilation error in some other library (e.g. vision-camera).]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">React Native load release bundle in iOS dev app</title><link href="https://ospfranco.com/post/2023/10/12/react-native-load-release-bundle-in-ios-dev-app/" rel="alternate" type="text/html" title="React Native load release bundle in iOS dev app" /><published>2023-10-12T15:00:00+02:00</published><updated>2023-10-12T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/10/12/react%20native%20load%20release%20bundle%20in%20ios%20dev%20app</id><content type="html" xml:base="https://ospfranco.com/post/2023/10/12/react-native-load-release-bundle-in-ios-dev-app/"><![CDATA[<p>When using React Native on Android you can enter the dev menu and choose not to use a development JS bundle. Usually useful to catch performance regressions in your JS code. For iOS this option is not present on the dev menu, but you can still achieve it if you hack around the native code.</p>

<p>In your AppDelegate, replace</p>

<div class="language-obj-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="p">[[</span><span class="n">RCTBundleURLProvider</span> <span class="nf">sharedSettings</span><span class="p">]</span> <span class="nf">jsBundleURLForBundleRoot</span><span class="p">:</span><span class="s">@"index"</span><span class="p">];</span>
</code></pre></div></div>

<p>with</p>

<div class="language-obj-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NSString</span> <span class="o">*</span><span class="n">packagerServerHostPort</span> <span class="o">=</span> <span class="p">[[</span><span class="n">RCTBundleURLProvider</span> <span class="nf">sharedSettings</span><span class="p">]</span> <span class="nf">packagerServerHostPort</span><span class="p">];</span>
<span class="k">return</span> <span class="p">[</span><span class="n">RCTBundleURLProvider</span> <span class="nf">jsBundleURLForBundleRoot</span><span class="p">:</span><span class="s">@"index"</span>
                                         <span class="nl">packagerHost:</span><span class="n">packagerServerHostPort</span>
                                            <span class="nl">enableDev:</span><span class="nb">NO</span>
                                   <span class="nl">enableMinification:</span><span class="nb">NO</span><span class="p">];</span>
</code></pre></div></div>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[When using React Native on Android you can enter the dev menu and choose not to use a development JS bundle. Usually useful to catch performance regressions in your JS code. For iOS this option is not present on the dev menu, but you can still achieve it if you hack around the native code.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Add gap support to Native Wind 2.x.x</title><link href="https://ospfranco.com/post/2023/08/21/add-gap-support-to-native-wind-2.x.x/" rel="alternate" type="text/html" title="Add gap support to Native Wind 2.x.x" /><published>2023-08-21T15:00:00+02:00</published><updated>2023-08-21T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/21/add%20gap%20support%20to%20native%20wind%202.x.x</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/21/add-gap-support-to-native-wind-2.x.x/"><![CDATA[<p>I‚Äôm a big fan of Tailwind CSS. On React Native I use Nativewind.</p>

<p>There is however a small problem with the 2.X.X version of Nativewind, it doesn‚Äôt support the <code class="language-plaintext highlighter-rouge">gap</code> property, which was added on RN 0.70.</p>

<p>We can however patch this functionality (without using the unstable 3.x.x branch).</p>

<p>Add the following to <code class="language-plaintext highlighter-rouge">tailwind.config.js</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/** @type {import('tailwindcss').Config} */</span>

<span class="kd">const</span> <span class="nx">plugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">tailwindcss/plugin</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">content</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">./App.tsx</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">./src/**/*.{ts,tsx}</span><span class="dl">"</span><span class="p">],</span>
  <span class="na">theme</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">g</span><span class="p">:</span> <span class="p">({</span> <span class="nx">theme</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">theme</span><span class="p">(</span><span class="dl">"</span><span class="s2">spacing</span><span class="dl">"</span><span class="p">),</span> <span class="c1">// ADD THIS FUNCTION</span>
    <span class="na">extend</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">colors</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">lightPurple</span><span class="p">:</span> <span class="dl">"</span><span class="s2">#6360EB</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">darkPurple</span><span class="p">:</span> <span class="dl">"</span><span class="s2">#001448</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">},</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">plugin</span><span class="p">(</span><span class="kd">function</span> <span class="p">({</span> <span class="nx">matchUtilities</span><span class="p">,</span> <span class="nx">theme</span> <span class="p">})</span> <span class="p">{</span>
      <span class="c1">// ADD THIS PLUGIN</span>
      <span class="nx">matchUtilities</span><span class="p">(</span>
        <span class="p">{</span>
          <span class="na">g</span><span class="p">:</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
            <span class="na">gap</span><span class="p">:</span> <span class="nx">value</span><span class="p">,</span>
          <span class="p">}),</span>
        <span class="p">},</span>
        <span class="p">{</span> <span class="na">values</span><span class="p">:</span> <span class="nx">theme</span><span class="p">(</span><span class="dl">"</span><span class="s2">g</span><span class="dl">"</span><span class="p">)</span> <span class="p">}</span>
      <span class="p">);</span>
    <span class="p">}),</span>
  <span class="p">],</span>
<span class="p">};</span>
</code></pre></div></div>

<h1 id="use-patch-package-to-patch-the-list-of-supported-properties">Use patch-package to patch the list of supported properties</h1>

<p>Internally Nativewind maintains a list of supported properties, and gap is not among them, so we are going to have to <code class="language-plaintext highlighter-rouge">patch-package</code> it. Create a patch <code class="language-plaintext highlighter-rouge">nativewind+2.0.11.patch</code> file in your <code class="language-plaintext highlighter-rouge">patches</code> directory, with the following content:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/node_modules/nativewind/dist/postcss/to-react-native/is-invalid-property.js b/node_modules/nativewind/dist/postcss/to-react-native/is-invalid-property.js
index 7d7715b..56472bc 100644
</span><span class="gd">--- a/node_modules/nativewind/dist/postcss/to-react-native/is-invalid-property.js
</span><span class="gi">+++ b/node_modules/nativewind/dist/postcss/to-react-native/is-invalid-property.js
</span><span class="p">@@ -1,120 +1,121 @@</span>
<span class="gd">-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.isInvalidProperty = void 0;
</span><span class="gi">+'use strict'
+Object.defineProperty(exports, '__esModule', {value: true})
+exports.isInvalidProperty = void 0
</span> function isInvalidProperty(property) {
<span class="gd">-    return !validProps.has(property);
</span><span class="gi">+  return !validProps.has(property)
</span> }
<span class="gd">-exports.isInvalidProperty = isInvalidProperty;
</span><span class="gi">+exports.isInvalidProperty = isInvalidProperty
</span> const validProps = new Set([
<span class="gd">-    "alignContent",
-    "alignItems",
-    "alignSelf",
-    "aspectRatio",
-    "backfaceVisibility",
-    "backgroundColor",
-    "borderBottomColor",
-    "borderBottomEndRadius",
-    "borderBottomLeftRadius",
-    "borderBottomRightRadius",
-    "borderBottomStartRadius",
-    "borderBottomWidth",
-    "borderColor",
-    "borderEndColor",
-    "borderEndWidth",
-    "borderLeftColor",
-    "borderLeftWidth",
-    "borderRadius",
-    "borderRightColor",
-    "borderRightWidth",
-    "borderStartColor",
-    "borderStartWidth",
-    "borderStyle",
-    "borderTopColor",
-    "borderTopEndRadius",
-    "borderTopLeftRadius",
-    "borderTopRightRadius",
-    "borderTopStartRadius",
-    "borderTopWidth",
-    "borderWidth",
-    "bottom",
-    "color",
-    "direction",
-    "display",
-    "elevation",
-    "end",
-    "flex",
-    "flexBasis",
-    "flexDirection",
-    "flexGrow",
-    "flexShrink",
-    "flexWrap",
-    "fontFamily",
-    "fontSize",
-    "fontStyle",
-    "fontVariant",
-    "fontWeight",
-    "height",
-    "includeFontPadding",
-    "justifyContent",
-    "left",
-    "letterSpacing",
-    "lineHeight",
-    "margin",
-    "marginBottom",
-    "marginEnd",
-    "marginHorizontal",
-    "marginLeft",
-    "marginRight",
-    "marginStart",
-    "marginTop",
-    "marginVertical",
-    "maxHeight",
-    "maxWidth",
-    "minHeight",
-    "minWidth",
-    "opacity",
-    "overflow",
-    "overlayColor",
-    "padding",
-    "paddingBottom",
-    "paddingEnd",
-    "paddingHorizontal",
-    "paddingLeft",
-    "paddingRight",
-    "paddingStart",
-    "paddingTop",
-    "paddingVertical",
-    "position",
-    "resizeMode",
-    "right",
-    "rotation",
-    "scaleX",
-    "scaleY",
-    "shadowColor",
-    "shadowOffset",
-    "shadowOpacity",
-    "shadowRadius",
-    "start",
-    "textAlign",
-    "textAlignVertical",
-    "textDecorationColor",
-    "textDecorationLine",
-    "textDecorationStyle",
-    "textShadowColor",
-    "textShadowOffset",
-    "textShadowRadius",
-    "textTransform",
-    "tintColor",
-    "top",
-    "transform",
-    "transformMatrix",
-    "translateX",
-    "translateY",
-    "width",
-    "writingDirection",
-    "zIndex",
-    /* SVG Props */
-    "fill",
-    "stroke",
-    "strokeWidth",
-]);
</span><span class="gi">+  'alignContent',
+  'alignItems',
+  'alignSelf',
+  'aspectRatio',
+  'backfaceVisibility',
+  'backgroundColor',
+  'borderBottomColor',
+  'borderBottomEndRadius',
+  'borderBottomLeftRadius',
+  'borderBottomRightRadius',
+  'borderBottomStartRadius',
+  'borderBottomWidth',
+  'borderColor',
+  'borderEndColor',
+  'borderEndWidth',
+  'borderLeftColor',
+  'borderLeftWidth',
+  'borderRadius',
+  'borderRightColor',
+  'borderRightWidth',
+  'borderStartColor',
+  'borderStartWidth',
+  'borderStyle',
+  'borderTopColor',
+  'borderTopEndRadius',
+  'borderTopLeftRadius',
+  'borderTopRightRadius',
+  'borderTopStartRadius',
+  'borderTopWidth',
+  'borderWidth',
+  'bottom',
+  'color',
+  'direction',
+  'display',
+  'elevation',
+  'end',
+  'flex',
+  'flexBasis',
+  'flexDirection',
+  'flexGrow',
+  'flexShrink',
+  'flexWrap',
+  'fontFamily',
+  'fontSize',
+  'fontStyle',
+  'fontVariant',
+  'fontWeight',
+  'height',
+  'includeFontPadding',
+  'justifyContent',
+  'left',
+  'letterSpacing',
+  'lineHeight',
+  'margin',
+  'marginBottom',
+  'marginEnd',
+  'marginHorizontal',
+  'marginLeft',
+  'marginRight',
+  'marginStart',
+  'marginTop',
+  'marginVertical',
+  'maxHeight',
+  'maxWidth',
+  'minHeight',
+  'minWidth',
+  'opacity',
+  'overflow',
+  'overlayColor',
+  'padding',
+  'paddingBottom',
+  'paddingEnd',
+  'paddingHorizontal',
+  'paddingLeft',
+  'paddingRight',
+  'paddingStart',
+  'paddingTop',
+  'paddingVertical',
+  'position',
+  'resizeMode',
+  'right',
+  'rotation',
+  'scaleX',
+  'scaleY',
+  'shadowColor',
+  'shadowOffset',
+  'shadowOpacity',
+  'shadowRadius',
+  'start',
+  'textAlign',
+  'textAlignVertical',
+  'textDecorationColor',
+  'textDecorationLine',
+  'textDecorationStyle',
+  'textShadowColor',
+  'textShadowOffset',
+  'textShadowRadius',
+  'textTransform',
+  'tintColor',
+  'top',
+  'transform',
+  'transformMatrix',
+  'translateX',
+  'translateY',
+  'width',
+  'writingDirection',
+  'zIndex',
+  'gap',
+  /* SVG Props */
+  'fill',
+  'stroke',
+  'strokeWidth',
+])
</span></code></pre></div></div>

<blockquote>
  <p>Actually we only need to add gap to the list, but my formatter cleaned everything and I‚Äôm too lazy to clean it :)</p>
</blockquote>

<p>Afterwards you can run <code class="language-plaintext highlighter-rouge">yarn</code> again for the patch to take effect, restart the packager (maybe with ‚Äìreset-cache) and you can now use the gap property via <code class="language-plaintext highlighter-rouge">g-[n]</code> utilities.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[I‚Äôm a big fan of Tailwind CSS. On React Native I use Nativewind.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Change macOS dock animation time</title><link href="https://ospfranco.com/post/2023/08/20/change-macos-dock-animation-time/" rel="alternate" type="text/html" title="Change macOS dock animation time" /><published>2023-08-20T15:00:00+02:00</published><updated>2023-08-20T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/20/change%20macos%20dock%20animation%20time</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/20/change-macos-dock-animation-time/"><![CDATA[<p>I auto-hide the dock on macOS, however the animation delay is a waste of time. You can set the animation time with the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defaults write com.apple.dock autohide-time-modifier <span class="nt">-float</span> 0<span class="p">;</span> killall Dock
</code></pre></div></div>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[I auto-hide the dock on macOS, however the animation delay is a waste of time. You can set the animation time with the following command:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Strip flow types to read flowtype file from vanilla JS</title><link href="https://ospfranco.com/post/2023/08/16/strip-flow-types-to-read-flowtype-file-from-vanilla-js/" rel="alternate" type="text/html" title="Strip flow types to read flowtype file from vanilla JS" /><published>2023-08-16T15:00:00+02:00</published><updated>2023-08-16T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/16/strip%20flow%20types%20to%20read%20flowtype%20file%20from%20vanilla%20js</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/16/strip-flow-types-to-read-flowtype-file-from-vanilla-js/"><![CDATA[<p>Unlike Typescript where you have tools like ts-node that allow you to quickly run typescript files without tooling (think without webpack or metro), I found however no way to achieve this with FlowType.</p>

<p>I needed to use a translation file that had flow types in vanilla JS and I figured out a way to strip the types.</p>

<h2 id="install-flow-remove-types-package">Install flow remove types package</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">yarn</span> <span class="nx">add</span> <span class="nx">flow</span><span class="o">-</span><span class="nx">remove</span><span class="o">-</span><span class="nx">types</span>
</code></pre></div></div>

<h2 id="use-flow-remove-types">Use flow remove types</h2>

<p>In my use case I had a huge file with translations that is strongly typed and I wanted to migrate them to another format.</p>

<p>The process is basically:</p>

<ol>
  <li>Read file from disk</li>
  <li>Pass it to flow-remove-types</li>
  <li>Write to another file (or you can also load it in memory with another package <code class="language-plaintext highlighter-rouge">require-from-string</code>)</li>
  <li>import it normally</li>
</ol>

<p>Here is a part of the script I used:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// allows you to call this file like a script from the command line</span><span class="cp">
#!/usr/bin/env node
</span>
<span class="kd">let</span> <span class="nx">flowRemoveTypes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">flow-remove-types</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">// let translations = require('../src/I18n/translations') // cannot import it bc it contains flow types</span>
<span class="kd">let</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">unpackTranslation</span><span class="p">(</span><span class="nx">translationObj</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">translationObj</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">translationObj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">{}</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">translationObj</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">entry</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">[</span><span class="nx">entry</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">unpackTranslation</span><span class="p">(</span><span class="nx">entry</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">key</span><span class="p">)</span>
  <span class="p">})</span>

  <span class="k">return</span> <span class="nx">res</span>

<span class="p">}</span>

<span class="c1">// Start by taking the translations file and stripping flow out of it</span>
<span class="kd">let</span> <span class="nx">translationsInput</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="dl">'</span><span class="s1">../src/I18n/translations.js</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">);</span>

<span class="c1">// Remove flow and module export with traditional syntax</span>
<span class="kd">let</span> <span class="nx">translationsOutput</span> <span class="o">=</span> <span class="nx">flowRemoveTypes</span><span class="p">(</span><span class="nx">translationsInput</span><span class="p">).</span><span class="nx">toString</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="dl">'</span><span class="s1">export default TRANSLATIONS</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">module.exports = TRANSLATIONS</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">fs</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="dl">'</span><span class="s1">./translations.js</span><span class="dl">'</span><span class="p">,</span> <span class="nx">translationsOutput</span><span class="p">);</span>

<span class="c1">// then we can just read this file</span>
<span class="kd">const</span> <span class="nx">translations</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./translations</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">languages</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">en</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">it</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">pt</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fr</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">es</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">de</span><span class="dl">'</span><span class="p">]</span>
<span class="kd">let</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="dl">'</span><span class="s1">./webAppTranslationKeys.json</span><span class="dl">'</span><span class="p">))</span>


<span class="nx">languages</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">languageKey</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// let languageTranslations = JSON.parse(fs.readFileSync(`../webapp/public/locales/${languageKey}/translation.json`))</span>
  <span class="kd">let</span> <span class="nx">languageTranslations</span> <span class="o">=</span> <span class="p">{}</span>
  <span class="nx">keys</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">key</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">ogTranslation</span> <span class="o">=</span> <span class="nx">translations</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>

    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">ogTranslation</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">üõë Could not find translations for</span><span class="dl">'</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
      <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nx">languageTranslations</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">unpackTranslation</span><span class="p">(</span><span class="nx">ogTranslation</span><span class="p">,</span> <span class="nx">languageKey</span><span class="p">)</span>
  <span class="p">})</span>
  <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="s2">`../webapp/public/locales/</span><span class="p">${</span><span class="nx">languageKey</span><span class="p">}</span><span class="s2">/translation.json`</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">languageTranslations</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="p">})</span>

<span class="c1">// Delete auto generated file</span>
<span class="nx">fs</span><span class="p">.</span><span class="nx">unlinkSync</span><span class="p">(</span><span class="dl">'</span><span class="s1">./translations.js</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">‚úÖ Generated webapp translations</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Unlike Typescript where you have tools like ts-node that allow you to quickly run typescript files without tooling (think without webpack or metro), I found however no way to achieve this with FlowType.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Disambiguate TypeScript union types</title><link href="https://ospfranco.com/post/2023/08/16/disambiguate-typescript-union-types/" rel="alternate" type="text/html" title="Disambiguate TypeScript union types" /><published>2023-08-16T15:00:00+02:00</published><updated>2023-08-16T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/16/disambiguate%20typescript%20union%20types</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/16/disambiguate-typescript-union-types/"><![CDATA[<p>On TypeScript you can easily create the union of two similar, yet distinct, types:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">iOSPaymentInfo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">orderId</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">iOSOnlyField</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">AndroidPaymentInfo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">orderId</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">androidOnlyField</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">PaymentInfo</span> <span class="o">=</span> <span class="nx">iOSPaymentInfo</span> <span class="o">|</span> <span class="nx">AndroidPaymentInfo</span><span class="p">;</span>

<span class="c1">// Trouble comes</span>

<span class="kd">let</span> <span class="nx">paymentInfo</span><span class="p">:</span> <span class="nx">PaymentInfo</span> <span class="o">=</span> <span class="p">...</span> <span class="c1">// some payment info</span>

<span class="c1">// You cannot access iOSOnlyField or AndroidOnlyField TypeScript will complain the field might be null</span>
<span class="nx">paymentInfo</span><span class="p">.</span><span class="nx">iOSOnlyField</span> <span class="c1">// kaboom</span>
</code></pre></div></div>

<p>You can make typescript happy by adding a literal field that will provide it with enough info to make sure the object is correct:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">iOSPaymentInfo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">orderId</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">iOSOnlyField</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">kind</span><span class="p">:</span> <span class="dl">'</span><span class="s1">iOS</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">AndroidPaymentInfo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">orderId</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">androidOnlyField</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">kind</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Android</span><span class="dl">'</span><span class="p">;</span>

<span class="p">}</span>

<span class="kd">type</span> <span class="nx">PaymentInfo</span> <span class="o">=</span> <span class="nx">iOSPaymentInfo</span> <span class="o">|</span> <span class="nx">AndroidPaymentInfo</span><span class="p">;</span>

<span class="c1">// Trouble comes</span>

<span class="kd">let</span> <span class="nx">paymentInfo</span><span class="p">:</span> <span class="nx">PaymentInfo</span> <span class="o">=</span> <span class="p">...</span> <span class="c1">// some payment info</span>

<span class="k">if</span><span class="p">(</span><span class="nx">paymentInfo</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">iOS</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Type safe code for iOSPaymentInfo</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="c1">// Type safe code for AndroidPaymentInfo</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p><a href="https://basarat.gitbook.io/typescript/type-system/discriminated-unions">Source</a></p>
</blockquote>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[On TypeScript you can easily create the union of two similar, yet distinct, types:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Objective-C cheatsheet</title><link href="https://ospfranco.com/post/2023/08/15/objective-c-cheatsheet/" rel="alternate" type="text/html" title="Objective-C cheatsheet" /><published>2023-08-15T15:00:00+02:00</published><updated>2023-08-15T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/15/objective%20c%20cheatsheet</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/15/objective-c-cheatsheet/"><![CDATA[<p>Quick reference guide when you need to do some objective C</p>

<h1 id="what-is-objective-c">What is Objective-C</h1>

<p>Objective-C aims to add <strong>Objects</strong> to the C language, they did this by adding SmallTalk-like message passing to C.</p>

<p>On practical terms and in our day and age: this means funny syntax when declaring classes and instead of calling methods you send messages.</p>

<p>I suggest you learn some C (or C++) first. A lot of the knowledge (pointers, pass-by-value, pass-by-reference) is shared.</p>

<h1 id="ns-fu"><code class="language-plaintext highlighter-rouge">NS-</code>Fu</h1>

<p>All the NS classes where created by the NeXT team and are the base objects which are used to interact with the base API of the language. They all come from the <code class="language-plaintext highlighter-rouge">Foundation</code> framework.</p>

<p>Some of them are: <code class="language-plaintext highlighter-rouge">NSLog</code>, <code class="language-plaintext highlighter-rouge">NSString</code>, <code class="language-plaintext highlighter-rouge">NSDictionary</code>, <code class="language-plaintext highlighter-rouge">NSArray</code> and so on. That is why you will always end up importing the <code class="language-plaintext highlighter-rouge">Foundation.h</code> header file at the top of your obj-c code.</p>

<h1 id="pass-by-reference">Pass by reference</h1>

<p>You will notice everytime you pass around a object you will need to pass it as a pointer. Sometimes this means you will loose typesafety and will need to internally cast the pointer to a more specific type</p>

<div class="language-objectivec highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Untyped (int? object?) array</span>
<span class="o">*</span><span class="n">NSArray</span> <span class="n">doSomething</span> <span class="p">{</span>
	<span class="n">NSArray</span> <span class="o">*</span><span class="n">myArray</span> <span class="o">=</span> <span class="p">@[...];</span>
	<span class="k">return</span> <span class="n">myArray</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="-macro">@ Macro</h1>

<p>The ‚Äú<strong>@</strong>‚Äù is a special macro (read text expansion) to instantiate certain classes, e.g. NSString</p>

<div class="language-objectivec highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#import &lt;Foundation/Foundation.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">NSLog</span><span class="p">(</span><span class="s">@"I'm a string"</span><span class="p">);</span>

	<span class="n">NSDictionary</span> <span class="o">*</span><span class="n">myDict</span> <span class="o">=</span> <span class="p">@{</span> <span class="s">@"Who am I"</span><span class="o">:</span> <span class="s">@"A dictionary"</span><span class="p">};</span>

	<span class="k">return</span> <span class="mi">0</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="classes">Classes</h1>

<div class="language-objectivec highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">MyObj</span><span class="p">:</span><span class="nc">NSObject</span>
<span class="c1">// Methods and properties declarations</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">MyObj</span>
<span class="c1">// Actual definition</span>
<span class="k">@end</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// Instatiation = Allocation + Constructor</span>
	<span class="n">MyObj</span> <span class="o">*</span><span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyObj</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">init</span><span class="p">];</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The definition of methods and properties goes inside the <code class="language-plaintext highlighter-rouge">@interface</code> block. The actual implementation inside the <code class="language-plaintext highlighter-rouge">@implementation</code> block.  It is also necessary to inherit from <code class="language-plaintext highlighter-rouge">NSObject</code> which the base class for any object.</p>

<h2 id="class-properties">Class properties</h2>

<p>Adding class properties you can actually interact with from code outside the class</p>

<div class="language-objectivec highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// interface</span>
<span class="k">@interface</span> <span class="nc">MyObj</span><span class="p">:</span> <span class="nc">NSObject</span> <span class="p">{</span>
	<span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readwrite</span><span class="p">)</span> <span class="kt">int</span> <span class="n">age</span><span class="p">;</span> <span class="c1">// writable instance property</span>

<span class="k">@end</span>

<span class="c1">// declaration</span>
<span class="k">@implementation</span> <span class="nc">MyObj</span>

<span class="k">@end</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">MyObj</span> <span class="o">*</span><span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyObj</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">init</span><span class="p">];</span>
	<span class="n">obj</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
	<span class="n">NSLog</span><span class="p">(</span><span class="s">@"Age %d"</span><span class="p">,</span> <span class="n">obj</span><span class="p">.</span><span class="n">age</span><span class="p">);</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="class-methods">Class methods</h2>

<p>You should be able to read the language like you read a normal english sentence, IMO that idea that has aged poorly.</p>

<div class="language-objectivec highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// interface</span>
<span class="k">@interface</span> <span class="nc">MyObj</span><span class="p">:</span> <span class="nc">NSObject</span> <span class="p">{</span>
<span class="o">+</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">getAnswerStatic</span><span class="p">;</span>
<span class="o">-</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">getAnswer</span>
<span class="o">-</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">setAnswer</span><span class="o">:</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">num</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readwrite</span><span class="p">)</span> <span class="kt">int</span> <span class="n">answer</span><span class="p">;</span> <span class="c1">// writable instance property</span>

<span class="k">@end</span>

<span class="c1">// declaration</span>
<span class="k">@implementation</span> <span class="nc">MyObj</span>
	<span class="k">+</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">getAnswerStatic</span> <span class="p">{</span>
		<span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">-</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">getAnswer</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">answer</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">-</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nf">setAnswer</span><span class="p">:</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">num</span> <span class="p">{</span>
		<span class="n">self</span><span class="p">.</span><span class="n">answer</span> <span class="o">=</span> <span class="n">num</span><span class="p">;</span>
	<span class="p">}</span>
<span class="k">@end</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">NSLog</span><span class="p">(</span><span class="s">@"%d"</span><span class="p">,</span> <span class="p">[</span><span class="n">MyObj</span> <span class="nf">getAnswerStatic</span><span class="p">]);</span> <span class="c1">// 42</span>

	<span class="n">MyObj</span> <span class="o">*</span><span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyObj</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">init</span><span class="p">];</span>
	<span class="n">NSLog</span><span class="p">(</span><span class="s">@"%d"</span><span class="p">,</span> <span class="p">[</span><span class="n">MyObj</span> <span class="nf">getAnswer</span><span class="p">]);</span> <span class="c1">// 0</span>

	<span class="p">[</span><span class="n">MyObj</span> <span class="n">setAnswer</span> <span class="nf">num</span><span class="p">:</span><span class="mi">52</span><span class="p">];</span>
	<span class="n">NSLog</span><span class="p">(</span><span class="s">@"%d"</span><span class="p">,</span> <span class="p">[</span><span class="n">MyObj</span> <span class="nf">getAnswer</span><span class="p">]);</span> <span class="c1">// 52</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Important to note the <code class="language-plaintext highlighter-rouge">+</code> and <code class="language-plaintext highlighter-rouge">-</code> prefixes. <code class="language-plaintext highlighter-rouge">+</code> means static method (class level) and <code class="language-plaintext highlighter-rouge">-</code> means instance method (object level).</p>

<h2 id="constructors">Constructors</h2>

<div class="language-objectivec highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// interface</span>
<span class="k">@interface</span> <span class="nc">Person</span><span class="p">:</span> <span class="nc">NSObject</span> <span class="p">{</span>
	<span class="n">NSString</span> <span class="o">*</span><span class="n">name</span>
	<span class="n">NSInteger</span> <span class="n">age</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="nf">initWithName</span><span class="p">:(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span> <span class="nf">andAge</span><span class="p">:(</span><span class="n">NSInteger</span> <span class="o">*</span><span class="p">)</span><span class="nv">age</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">print</span><span class="p">;</span>

<span class="k">@end</span>

<span class="c1">// declaration</span>
<span class="k">@implementation</span> <span class="nc">Person</span>
	<span class="k">-</span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="nf">initWithName</span><span class="p">:(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span> <span class="nf">andAge</span><span class="p">:(</span><span class="n">NSInteger</span> <span class="o">*</span><span class="p">)</span><span class="nv">age</span> <span class="p">{</span>
		<span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">;</span>
		<span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span><span class="p">;</span>
		<span class="k">return</span> <span class="n">self</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">print</span> <span class="p">{</span>
		<span class="n">NSLog</span><span class="p">(</span><span class="s">@"Person instance. name: %@, age: %@"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="p">);</span>
	<span class="p">}</span>
<span class="k">@end</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">Person</span> <span class="o">*</span><span class="n">person</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">initWithName</span><span class="p">:</span> <span class="s">@"Oscar"</span> <span class="nf">andAge</span><span class="p">:</span><span class="mi">5</span><span class="p">];</span>
	<span class="p">[</span><span class="n">person</span> <span class="nf">print</span><span class="p">];</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="obj-c">Obj-C++</h1>

<p>If you change the extension of you file from <code class="language-plaintext highlighter-rouge">.m</code> to <code class="language-plaintext highlighter-rouge">.mm</code> you will change the language to Obj-C++. It is basically C++ and Obj-C mixed together.</p>

<p>There will be a lot of caveats when you using it: You cannot call Obj-C methods using C++ syntax and so forth. But, it does allow to use and mix C++ classes and syntax inside Obj-C code. Very useful to re-use already existing modules.</p>

<p>Here is an example of a JSI function (C++) calling a Obj-C API:</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Quick reference guide when you need to do some objective C]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">JSI Cheatsheet: Part 3 - JSI API Reference</title><link href="https://ospfranco.com/post/2023/08/15/jsi-cheatsheet-part-3-jsi-api-reference/" rel="alternate" type="text/html" title="JSI Cheatsheet: Part 3 - JSI API Reference" /><published>2023-08-15T15:00:00+02:00</published><updated>2023-08-15T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/15/jsi%20cheatsheet%20part%203%20-%20jsi%20api%20reference</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/15/jsi-cheatsheet-part-3-jsi-api-reference/"><![CDATA[<p>JSI Documentation is lacking, I already learned quite a bit of tricks to achieve the most common operations, so here is cheatsheet.</p>

<h1 id="table-of-contents">Table of contents</h1>

<h1 id="jsi-source-code">JSI Source Code</h1>

<p>Due to the lack of serious documentation JSI source code will be your best friend:</p>

<p><a href="https://github.com/facebook/react-native/blob/main/ReactCommon/jsi/jsi/jsi.cpp">JSI.cpp</a></p>

<p><a href="https://github.com/facebook/react-native/blob/main/ReactCommon/jsi/jsi/jsi.h">JSI.h</a></p>

<p>Even if it doesn‚Äôt tell you <strong>HOW</strong> to do certain operations, both the header file and the source file are important as some of the functionality is implemented on the header file directly and can be used as a reference.</p>

<h1 id="setting-up-a-jsi-module">Setting up a JSI module</h1>

<p>The tutorial is free and is up on my website, just <a href="https://ospfranco.com/post/2021/02/24/how-to-create-a-javascript-jsi-module/">follow the instructions</a> to set up your own module</p>

<h1 id="jsi-runtime">JSI Runtime</h1>

<p>The Runtime object is your direct reference to the JavaScript context, think of it of an object representing a JavaScript Virtual Machine. You create/read/operate values by passing it to functions.</p>

<p>A lot of the operations you use with JSI require you to pass the runtime, you will either get it from your initialization code, or it will be passed to you when executing your JSI functions:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">initializeMyModule</span><span class="p">(</span><span class="n">jsi</span><span class="o">::</span><span class="n">Runtime</span> <span class="o">&amp;</span><span class="n">rt</span><span class="p">)</span>
</code></pre></div></div>

<p>Whenever you see <code class="language-plaintext highlighter-rouge">rt</code> on this cheatsheet, assume you have to pass the <code class="language-plaintext highlighter-rouge">rt</code> object from wherever you get it.</p>

<h1 id="jsivalue">jsi::Value</h1>

<p>the jsi::Value struct is the bread and butter of JSI objects, everything you get from the javascript side is a jsi::Value, it‚Äôs up to you then to interpret it to the correct C++ variables.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">jsi</span><span class="o">::</span><span class="n">Value</span> <span class="o">*</span><span class="n">args</span> <span class="o">=</span> <span class="p">...</span> <span class="c1">// Pointer to first elem in memory of jsi::Values</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">isString</span><span class="p">())</span> <span class="p">{</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"The first argument needs to be a string!"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="k">return</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">const</span> <span class="n">string</span> <span class="n">dbName</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">asString</span><span class="p">(</span><span class="n">rt</span><span class="p">).</span><span class="n">utf8</span><span class="p">(</span><span class="n">rt</span><span class="p">);</span>
</code></pre></div></div>

<p>jsi::Value has a lot of methods inside of it to help you with a bunch of operations:</p>

<ul>
  <li>isNull</li>
  <li>isBool</li>
  <li>isNumber</li>
  <li>isString</li>
  <li>strictEquals</li>
  <li>asObject</li>
  <li>asSymbol</li>
</ul>

<p>and many more, check the header file to know all the available operations, but this cheatsheet should guide you through the most used ones.</p>

<h1 id="numbersfloatsbooleans">Numbers/Floats/Booleans</h1>

<h2 id="from-jsivalue">From jsi::Value</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// value is a jsi::Value</span>
<span class="k">if</span><span class="p">(</span><span class="n">value</span><span class="p">.</span><span class="n">isNumber</span><span class="p">())</span> <span class="p">{</span>
	<span class="kt">double</span> <span class="n">doubleVal</span> <span class="o">=</span> <span class="n">value</span><span class="p">.</span><span class="n">asNumber</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">// All javascript numbers are doubles</span>
<span class="c1">// but sometimes you might want to operate on ints</span>
<span class="c1">// (you will loose precision, be careful)</span>
<span class="kt">int</span> <span class="n">intVal</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">doubleVal</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="to-jsivalue">To jsi::Value</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Conversion is done implicitly for you</span>
<span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">19</span><span class="p">;</span>
<span class="n">jsi</span><span class="o">::</span><span class="n">Value</span> <span class="n">jsAge</span> <span class="o">=</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Value</span><span class="p">(</span><span class="n">age</span><span class="p">);</span>
</code></pre></div></div>

<p>This same rules apply for bools and floats</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">doubleAge</span> <span class="o">=</span> <span class="mf">19.0</span><span class="p">;</span>
<span class="n">jsi</span><span class="o">::</span><span class="n">Value</span> <span class="n">jsDoubleAge</span> <span class="o">=</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Value</span><span class="p">(</span><span class="n">doubleAge</span><span class="p">);</span>

<span class="kt">bool</span> <span class="n">myBool</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
<span class="n">jsi</span><span class="o">::</span><span class="n">Value</span> <span class="n">jsMyBool</span> <span class="o">=</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Value</span><span class="p">(</span><span class="n">myBool</span><span class="p">);</span>
</code></pre></div></div>

<h1 id="strings">Strings</h1>

<p>Strings are not quite so straight forward because you need to take encoding into consideration</p>

<h2 id="from-jsivalue-1">From jsi::Value</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">jsi</span><span class="o">::</span><span class="n">Value</span> <span class="n">value</span> <span class="o">=</span> <span class="p">...</span> <span class="c1">// you will get it from somewhere</span>

<span class="c1">// Get a C++ std::string</span>
<span class="n">string</span> <span class="n">strVal</span> <span class="o">=</span> <span class="n">value</span><span class="p">.</span><span class="n">asString</span><span class="p">(</span><span class="n">rt</span><span class="p">).</span><span class="n">utf8</span><span class="p">(</span><span class="n">rt</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="to-jsivalue-1">To jsi::Value</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">string</span> <span class="n">myString</span> <span class="o">=</span> <span class="s">"hello from C++"</span><span class="p">;</span>
<span class="c1">// Older versions of the JSI library only took C-like strings</span>
<span class="n">jsi</span><span class="o">::</span><span class="n">String</span><span class="o">::</span><span class="n">createFromUtf8</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="n">myString</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
<span class="c1">// Newer version might accept a std::string directly</span>
<span class="n">jsi</span><span class="o">::</span><span class="n">String</span><span class="o">::</span><span class="n">createFromUtf8</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
</code></pre></div></div>

<h1 id="null">Null</h1>

<h2 id="to-jsivalue-2">to jsi::Value</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">jsi</span><span class="o">::</span><span class="n">Value</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="undefined">Undefined</h1>

<h2 id="create">Create</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">jsi</span><span class="o">::</span><span class="n">Value</span><span class="o">::</span><span class="n">undefined</span><span class="p">()</span>
</code></pre></div></div>

<p>You can also return <code class="language-plaintext highlighter-rouge">{}</code> on some functions directly and it will act as a shortcut to create a <code class="language-plaintext highlighter-rouge">undefined</code> value</p>

<h1 id="arrays">Arrays</h1>

<h2 id="create-1">Create</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Your arrays need to be fixed in size... no auto grow for you</span>
<span class="k">auto</span> <span class="n">array</span> <span class="o">=</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Array</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</code></pre></div></div>

<p>Since arrays need to be created with a fixed size, you might want to delay their creation on the C++ until you are ready to return data to Javascript, and use a vector meanwhile:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">myNumbers</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">Vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">();</span>
<span class="n">myNumbers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="n">myNumbers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="n">myNumbers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>

<span class="k">auto</span> <span class="n">array</span> <span class="o">=</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Array</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="n">myNumbers</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">myNumbers</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">array</span><span class="p">.</span><span class="n">setValueAtIndex</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">myNumbers</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="objects">Objects</h1>

<h2 id="create-2">Create</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// in javascript this would equal: module = {}</span>
<span class="n">jsi</span><span class="o">::</span><span class="n">Object</span> <span class="n">module</span> <span class="o">=</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Object</span><span class="p">(</span><span class="n">rt</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="set-property">Set property</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">jsi</span><span class="o">::</span><span class="n">Object</span> <span class="n">module</span> <span class="o">=</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Object</span><span class="p">(</span><span class="n">rt</span><span class="p">);</span> <span class="c1">// module = {}</span>
<span class="n">module</span><span class="p">.</span><span class="n">setProperty</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="s">"age"</span><span class="p">,</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Value</span><span class="p">(</span><span class="mi">19</span><span class="p">));</span> <span class="c1">// module = {age: 19}</span>
</code></pre></div></div>

<h2 id="global-object">Global object</h2>

<p>JSI exposes the globalThis object for you to register your module</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rt</span><span class="p">.</span><span class="n">global</span><span class="p">().</span><span class="n">setProperty</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="s">"myModule"</span><span class="p">,</span> <span class="n">move</span><span class="p">(</span><span class="n">module</span><span class="p">));</span>
</code></pre></div></div>

<h1 id="functions">Functions</h1>

<p>You create invokable javascript functions using the <code class="language-plaintext highlighter-rouge">createFromHostFunction</code> method</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// create a javascript function</span>
<span class="k">auto</span> <span class="n">getTheAnswerToLifeTheUniverseAndEverything</span> <span class="o">=</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Function</span><span class="o">::</span><span class="n">createFromHostFunction</span><span class="p">(</span>
      <span class="n">rt</span><span class="p">,</span> <span class="c1">// you need to pass the JSI runtime</span>
      <span class="n">jsi</span><span class="o">::</span><span class="n">PropNameID</span><span class="o">::</span><span class="n">forAscii</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="s">"getTheAnswerToLifeTheUniverseAndEverything"</span><span class="p">),</span> <span class="c1">// internal prop name</span>
      <span class="mi">1</span><span class="p">,</span> <span class="c1">// Number of parameters function takes</span>
      <span class="p">[](</span><span class="n">jsi</span><span class="o">::</span><span class="n">Runtime</span> <span class="o">&amp;</span><span class="n">rt</span><span class="p">,</span> <span class="k">const</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Value</span> <span class="o">&amp;</span><span class="n">thisValue</span><span class="p">,</span> <span class="k">const</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Value</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">count</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Value</span> <span class="c1">// C++ lambda</span>
      <span class="p">{</span>
				<span class="c1">// rt: the JSI runtime for you to pass down/use</span>
				<span class="c1">// thisValue: is the function context ("this" value in javascript)</span>
				<span class="c1">// *args: the arguments passed to your function</span>
				<span class="c1">// count: the number of arguments passed</span>
        <span class="k">return</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Value</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>
      <span class="p">});</span>

<span class="c1">// You can later register this function in the globalThis scope (for example)</span>
<span class="n">rt</span><span class="p">.</span><span class="n">global</span><span class="p">().</span><span class="n">setProperty</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="s">"getTheAnswerToLifeTheUniverseAndEverything"</span><span class="p">,</span> <span class="n">move</span><span class="p">(</span><span class="n">getTheAnswerToLifeTheUniverseAndEverything</span><span class="p">));</span>

<span class="c1">// Then in javascript you can call this global.getTheAnswerToLifeTheUniverseAndEverything() and should return 42</span>
</code></pre></div></div>

<h2 id="validation">Validation</h2>

<p>So you can see creating functions is quite raw due to the dynamic nature of javascript, your function could be called with anything, so it‚Äôs up to you to make sure you got the correct values.</p>

<p>Here is a sample function that validates that the passed params are strings:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">open</span> <span class="o">=</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Function</span><span class="o">::</span><span class="n">createFromHostFunction</span><span class="p">(</span>
      <span class="n">rt</span><span class="p">,</span>
      <span class="n">jsi</span><span class="o">::</span><span class="n">PropNameID</span><span class="o">::</span><span class="n">forAscii</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="s">"sequel_open"</span><span class="p">),</span>
      <span class="mi">1</span><span class="p">,</span>
      <span class="p">[](</span><span class="n">jsi</span><span class="o">::</span><span class="n">Runtime</span> <span class="o">&amp;</span><span class="n">rt</span><span class="p">,</span> <span class="k">const</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Value</span> <span class="o">&amp;</span><span class="n">thisValue</span><span class="p">,</span> <span class="k">const</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Value</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">count</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Value</span>
      <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">jsi</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">throwJSError</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="s">"[react-native-quick-sqlite] database name is required"</span><span class="p">);</span>
          <span class="k">return</span> <span class="p">{};</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">isString</span><span class="p">())</span>
        <span class="p">{</span>
          <span class="n">jsi</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">throwJSError</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="s">"[react-native-quick-sqlite] database name must be a string"</span><span class="p">);</span>
          <span class="k">return</span> <span class="p">{};</span>
        <span class="p">}</span>

        <span class="n">string</span> <span class="n">dbName</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">asString</span><span class="p">(</span><span class="n">rt</span><span class="p">).</span><span class="n">utf8</span><span class="p">(</span><span class="n">rt</span><span class="p">);</span>
        <span class="n">string</span> <span class="n">tempDocPath</span> <span class="o">=</span> <span class="n">string</span><span class="p">(</span><span class="n">docPathStr</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">args</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">isString</span><span class="p">())</span> <span class="p">{</span>
            <span class="n">jsi</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">throwJSError</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="s">"[react-native-quick-sqlite] database location must be a string"</span><span class="p">);</span>
            <span class="k">return</span> <span class="p">{};</span>
          <span class="p">}</span>
          
          <span class="n">tempDocPath</span> <span class="o">=</span> <span class="n">tempDocPath</span> <span class="o">+</span> <span class="s">"/"</span> <span class="o">+</span> <span class="n">args</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">asString</span><span class="p">(</span><span class="n">rt</span><span class="p">).</span><span class="n">utf8</span><span class="p">(</span><span class="n">rt</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="n">SequelResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">sequel_open</span><span class="p">(</span><span class="n">dbName</span><span class="p">,</span> <span class="n">tempDocPath</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">SequelResultError</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="n">jsi</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">throwJSError</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="n">message</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
          <span class="k">return</span> <span class="p">{};</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">move</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">value</span><span class="p">);</span>
      <span class="p">});</span>
</code></pre></div></div>

<h1 id="throwing-errors">Throwing Errors</h1>

<p>In the previous snippet you probably saw how to throw a Javascript error</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">jsi</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">throwJSError</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="s">"[react-native-quick-sqlite] database location must be a string"</span><span class="p">);</span>
<span class="c1">// You still have to cleanly terminate your lambda</span>
<span class="k">return</span> <span class="p">{};</span>
</code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">jsi</span><span class="o">::</span><span class="n">detail</span><span class="o">::</span><span class="n">throwJSError</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="s">"[react-native-quick-sqlite] database location must be a string"</span><span class="p">);</span>
<span class="c1">// You still have to cleanly terminate your lambda</span>
<span class="k">return</span> <span class="p">{};</span>
</code></pre></div></div>

<h1 id="stdmove-Ô∏è">std::move ‚ö†Ô∏èüö®</h1>

<p>I already teased in the <a href="https://www.notion.so/JSI-Cheatsheet-Part-I-C-f1872d77ee4c4dc3b9563fa6cb3005f6?pvs=21">JSI Cheatsheet Part I: C++</a> that moving objects in memory would be important.</p>

<blockquote>
  <p>üö® Wherever you create your JSI objects (and specially if you do it inside of lambda functions) the memory can/will be overwritten, therefore it is important to pass your created JSI objects to the JSI runtime to avoid memory being overwritten and your data being lost</p>
</blockquote>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// LOOK! move([blah blah])!!! DON'T FORGET IT!</span>
<span class="n">rt</span><span class="p">.</span><span class="n">global</span><span class="p">().</span><span class="n">setProperty</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="s">"sqlite"</span><span class="p">,</span> <span class="n">move</span><span class="p">(</span><span class="n">module</span><span class="p">));</span>
</code></pre></div></div>

<blockquote>
  <p>üö® This is important I‚Äôm going to say it again, make sure you std::move your data to avoid memory de-allocation, here is another example</p>
</blockquote>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vector</span><span class="o">&lt;</span><span class="n">jsi</span><span class="o">::</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="p">...</span> <span class="c1">// pretend here is a vector of jsi::Objects</span>

<span class="k">auto</span> <span class="n">array</span> <span class="o">=</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Array</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="n">results</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">results</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">array</span><span class="p">.</span><span class="n">setValueAtIndex</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">move</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span> <span class="c1">// üö® MOVE THEM! JUST MOVE THEM!</span>
<span class="p">}</span>

<span class="n">jsi</span><span class="o">::</span><span class="n">Object</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Object</span><span class="p">(</span><span class="n">rt</span><span class="p">);</span>
<span class="n">rows</span><span class="p">.</span><span class="n">setProperty</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="s">"length"</span><span class="p">,</span> <span class="n">jsi</span><span class="o">::</span><span class="n">Value</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">results</span><span class="p">.</span><span class="n">size</span><span class="p">()));</span>
<span class="n">rows</span><span class="p">.</span><span class="n">setProperty</span><span class="p">(</span><span class="n">rt</span><span class="p">,</span> <span class="s">"_array"</span><span class="p">,</span> <span class="n">move</span><span class="p">(</span><span class="n">array</span><span class="p">));</span>
</code></pre></div></div>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[JSI Documentation is lacking, I already learned quite a bit of tricks to achieve the most common operations, so here is cheatsheet.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">JSI Cheatsheet: Part 2 - Tooling</title><link href="https://ospfranco.com/post/2023/08/15/jsi-cheatsheet-part-2-tooling/" rel="alternate" type="text/html" title="JSI Cheatsheet: Part 2 - Tooling" /><published>2023-08-15T15:00:00+02:00</published><updated>2023-08-15T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/15/jsi%20cheatsheet%20part%202%20-%20tooling</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/15/jsi-cheatsheet-part-2-tooling/"><![CDATA[<p>Now that you know C++ (<a href="https://www.notion.so/JSI-Cheatsheet-Part-I-C-f1872d77ee4c4dc3b9563fa6cb3005f6?pvs=21">JSI Cheatsheet Part I: C++</a>) you are ready to tackle some of the other delicacies of coding in C++, namely how compilation and linking works.</p>

<h1 id="contents">Contents</h1>

<h1 id="basics">Basics</h1>

<p>Same as before, there are many resources how basic C++ compilation work, but here are the basics</p>

<p>The compilation of a C++ program involves three steps:</p>

<ol>
  <li>Preprocessing: the preprocessor takes a C++ source code file and deals with the <code class="language-plaintext highlighter-rouge">#include</code>s, <code class="language-plaintext highlighter-rouge">#define</code>s and other preprocessor directives. The output of this step is a ‚Äúpure‚Äù C++ file without pre-processor directives.</li>
  <li>Compilation: the compiler takes the pre-processor‚Äôs output and produces an object file from it.</li>
  <li>Linking: the linker takes the object files produced by the compiler and produces either a library or an executable file.</li>
</ol>

<h2 id="preprocessing">Preprocessing</h2>

<p>The preprocessor handles the <em>preprocessor directives</em>, like <code class="language-plaintext highlighter-rouge">#include</code> and <code class="language-plaintext highlighter-rouge">#define</code>. It is agnostic of the syntax of C++, which is why it must be used with care.</p>

<p>It works on one C++ source file at a time by replacing <code class="language-plaintext highlighter-rouge">#include</code> directives with the content of the respective files (which is usually just declarations), doing replacement of macros (<code class="language-plaintext highlighter-rouge">#define</code>), and selecting different portions of text depending of <code class="language-plaintext highlighter-rouge">#if</code>, <code class="language-plaintext highlighter-rouge">#ifdef</code> and <code class="language-plaintext highlighter-rouge">#ifndef</code> directives.</p>

<p>The preprocessor works on a stream of preprocessing tokens. Macro substitution is defined as replacing tokens with other tokens (the operator <code class="language-plaintext highlighter-rouge">##</code> enables merging two tokens when it makes sense).</p>

<p>After all this, the preprocessor produces a single output that is a stream of tokens resulting from the transformations described above. It also adds some special markers that tell the compiler where each line came from so that it can use those to produce sensible error messages.</p>

<p>Some errors can be produced at this stage with clever use of the <code class="language-plaintext highlighter-rouge">#if</code> and <code class="language-plaintext highlighter-rouge">#error</code> directives.</p>

<h2 id="compilation">Compilation</h2>

<p>The compilation step is performed on each output of the preprocessor.</p>

<p>The compiler parses the pure C++ source code (now without any preprocessor directives) and converts it into assembly code. Then invokes underlying back-end(assembler in toolchain) that assembles that code into machine code producing actual binary file in some format(ELF, COFF, a.out, ‚Ä¶). This object file contains the compiled code (in binary form) of the symbols defined in the input. Symbols in object files are referred to by name.</p>

<p>Object files can refer to symbols that are not defined. This is the case when you use a declaration, and don‚Äôt provide a definition for it. The compiler doesn‚Äôt mind this, and will happily produce the object file as long as the source code is well-formed.</p>

<p>Compilers usually let you stop compilation at this point. This is very useful because with it you can compile each source code file separately. The advantage this provides is that you don‚Äôt need to recompile <em>everything</em> if you only change a single file.</p>

<p>The produced object files can be put in special archives called static libraries, for easier reusing later on.</p>

<p>It‚Äôs at this stage that ‚Äúregular‚Äù compiler errors, like syntax errors or failed overload resolution errors, are reported.</p>

<h2 id="linking">Linking</h2>

<p>The linker is what produces the final compilation output from the object files the compiler produced. This output can be either a shared (or dynamic) library (and while the name is similar, they haven‚Äôt got much in common with static libraries mentioned earlier) or an executable.</p>

<p>It links all the object files by replacing the references to undefined symbols with the correct addresses. Each of these symbols can be defined in other object files or in libraries. If they are defined in libraries other than the standard library, you need to tell the linker 
about them.</p>

<p>At this stage the most common errors are missing definitions or duplicate definitions. The former means that either the definitions don‚Äôt exist (i.e. they are not written), or that the object files or 
libraries where they reside were not given to the linker. The latter is obvious: the same symbol was defined in two different object files or libraries.</p>

<h1 id="cmake">CMake</h1>

<p>That‚Äôs the theory, by now you probably know how you compile and execute a single C++ file:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">gcc</span> <span class="o">-</span><span class="nx">o</span> <span class="nx">hello</span> <span class="nx">hello</span><span class="p">.</span><span class="nx">cpp</span>
</code></pre></div></div>

<p>Now, if you have multiple files you need to compile you need to cram them into a single command and then quickly spin out of control, since the order on which you define your files might produce compilation errors of missing symbols</p>

<p>So, we are going to jump a bit ahead and talk about <a href="https://cmake.org/">CMake</a>.</p>

<p>CMake takes care of many things for you: building, packaging, testing, etc. It‚Äôs like some parts of npm for the c++ world. If you want to write C++ for android you will use CMake and more specifically a <code class="language-plaintext highlighter-rouge">CMakeLists.txt</code> that will define your compilation process</p>

<p>CMake is not used on iOS.</p>

<p>Since we are trying to be practical, you care about the <code class="language-plaintext highlighter-rouge">CMakeList.txt</code> file, here is an example:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Tell which version of CMake is required</span>
<span class="c1">// Check your android version, since they come bundled with the build-tools</span>
<span class="nx">cmake_minimum_required</span><span class="p">(</span><span class="nx">VERSION</span> <span class="mf">3.4</span><span class="p">.</span><span class="mi">1</span><span class="p">)</span>

<span class="kd">set</span> <span class="p">(</span><span class="nx">CMAKE_VERBOSE_MAKEFILE</span> <span class="nx">ON</span><span class="p">)</span>
<span class="c1">// set the version of C++ you are going to use</span>
<span class="kd">set</span> <span class="p">(</span><span class="nx">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>

<span class="c1">// Include all the directories with .cpp files that will need to be compiled</span>
<span class="nx">include_directories</span><span class="p">(</span>
  <span class="p">..</span><span class="o">/</span><span class="nx">cpp</span>
  <span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="nx">react</span><span class="o">-</span><span class="nx">native</span><span class="o">/</span><span class="nx">React</span>
  <span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="nx">react</span><span class="o">-</span><span class="nx">native</span><span class="o">/</span><span class="nx">React</span><span class="o">/</span><span class="nx">Base</span>
  <span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="nx">react</span><span class="o">-</span><span class="nx">native</span><span class="o">/</span><span class="nx">ReactCommon</span><span class="o">/</span><span class="nx">jsi</span>
<span class="p">)</span>

<span class="c1">// create a library "sequel", which needs to compile all the following files</span>
<span class="nx">add_library</span><span class="p">(</span><span class="nx">sequel</span>
  <span class="nx">SHARED</span>
  <span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="nx">react</span><span class="o">-</span><span class="nx">native</span><span class="o">/</span><span class="nx">ReactCommon</span><span class="o">/</span><span class="nx">jsi</span><span class="o">/</span><span class="nx">jsi</span><span class="o">/</span><span class="nx">jsi</span><span class="p">.</span><span class="nx">cpp</span>
  <span class="p">..</span><span class="o">/</span><span class="nx">cpp</span><span class="o">/</span><span class="nx">sequel</span><span class="p">.</span><span class="nx">cpp</span>
  <span class="p">..</span><span class="o">/</span><span class="nx">cpp</span><span class="o">/</span><span class="nx">sequel</span><span class="p">.</span><span class="nx">h</span>
  <span class="p">..</span><span class="o">/</span><span class="nx">cpp</span><span class="o">/</span><span class="nx">SequelResult</span><span class="p">.</span><span class="nx">h</span>
  <span class="p">..</span><span class="o">/</span><span class="nx">cpp</span><span class="o">/</span><span class="nx">react</span><span class="o">-</span><span class="nx">native</span><span class="o">-</span><span class="nx">quick</span><span class="o">-</span><span class="nx">sqlite</span><span class="p">.</span><span class="nx">cpp</span>
  <span class="p">..</span><span class="o">/</span><span class="nx">cpp</span><span class="o">/</span><span class="nx">react</span><span class="o">-</span><span class="nx">native</span><span class="o">-</span><span class="nx">quick</span><span class="o">-</span><span class="nx">sqlite</span><span class="p">.</span><span class="nx">h</span>
  <span class="p">..</span><span class="o">/</span><span class="nx">cpp</span><span class="o">/</span><span class="nx">sqlite3</span><span class="p">.</span><span class="nx">h</span>
  <span class="p">..</span><span class="o">/</span><span class="nx">cpp</span><span class="o">/</span><span class="nx">sqlite3</span><span class="p">.</span><span class="nx">c</span>
  <span class="nx">cpp</span><span class="o">-</span><span class="nx">adapter</span><span class="p">.</span><span class="nx">cpp</span>
<span class="p">)</span>

<span class="c1">// link the following libraries together</span>
<span class="c1">// in this case I link android specific libraries and logging library</span>
<span class="c1">// so I can log to the android console from my CPP code</span>
<span class="c1">// on iOS this is not necessary (iOS doesn't even use CMakeLists)</span>
<span class="nx">target_link_libraries</span><span class="p">(</span><span class="nx">sequel</span> <span class="nx">android</span> <span class="nx">log</span><span class="p">)</span>
</code></pre></div></div>

<p>CMake is a world on it‚Äôs own, <a href="https://en.wikipedia.org/wiki/CMake">the wikipedia article</a> gives a good high level overview, but if you are developing your JSI module this should be more than enough: just include all your header and cpp files in your CMakeLists and link any android libraries as necessary</p>

<h1 id="c-on-">C++ on üì±</h1>

<p>Let‚Äôs go back to some of the basic stuff, you now know: how to write C++, how to compile C++, the question is now, how do you run C++ on iOS or Android? Is this some new RN-only feature?</p>

<p>No, the truth of the matter is that, every single computer out there can run C/C++ (as long as there is a compiler for it) but you as a JavaScript developer probably never heard of this, the mechanisms which allow you to run C++ code on each platforms are a bit different though</p>

<h2 id="ios-and-obj-c">iOS and Obj-C</h2>

<p>Obj-C is actually a subset/compatible with C++ code‚Ä¶ it‚Äôs just kinda weird. You have obj-c files (<code class="language-plaintext highlighter-rouge">.m</code>) and if you change their extension (<code class="language-plaintext highlighter-rouge">.mm</code>) you can use C++ code inside of the obj-c code, this also means you don‚Äôt need to set up any tooling to compile C++ code.</p>

<p>Just put your <code class="language-plaintext highlighter-rouge">cpp</code> files in your project and you can include them just fine.</p>

<h2 id="android-jni">Android JNI</h2>

<p>Android is a bit different, since Android works with Java/Kotlin, it does not produce binary code and cannot interact with native code written in C++. Therefore you need a translation/interaction layer called <a href="https://developer.android.com/training/articles/perf-jni">JNI</a>.</p>

<p>It‚Äôs super cumbersome and has it‚Äôs own syntax, but it‚Äôs all we have to expose our functionality to the Java/Kotlin/Javascript side of things.</p>

<p>Here is an example of JNI code that exposes a couple of functions to the Java (which is necessary for you to register your JSI callbacks)</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;jni.h&gt;</span><span class="cp">
#include</span> <span class="cpf">"react-native-quick-sqlite.h"</span><span class="cp">
</span>
<span class="k">extern</span> <span class="s">"C"</span> <span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span>
<span class="nf">Java_com_reactnativequicksqlite_SequelModule_initialize</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">clazz</span><span class="p">,</span> <span class="n">jlong</span> <span class="n">jsiPtr</span><span class="p">,</span> <span class="n">jstring</span> <span class="n">docPath</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">jboolean</span> <span class="n">isCopy</span><span class="p">;</span>
  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">docPathString</span> <span class="o">=</span> <span class="p">(</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">docPath</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">isCopy</span><span class="p">);</span>

  <span class="n">installSequel</span><span class="p">(</span><span class="o">*</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">facebook</span><span class="o">::</span><span class="n">jsi</span><span class="o">::</span><span class="n">Runtime</span> <span class="o">*&gt;</span><span class="p">(</span><span class="n">jsiPtr</span><span class="p">),</span> <span class="n">docPathString</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">extern</span> <span class="s">"C"</span> <span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span>
<span class="n">Java_com_reactnativequicksqlite_SequelModule_destruct</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">clazz</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">cleanUpSequel</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You can see your function names need to have a defined structure:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">java_</code> = expose this to the java side</li>
  <li><code class="language-plaintext highlighter-rouge">com_reactnativequicksqlite</code> = name of the package that will be created for you</li>
  <li><code class="language-plaintext highlighter-rouge">SequelModule</code> = Module name</li>
  <li><code class="language-plaintext highlighter-rouge">initialize</code> = final function name</li>
</ul>

<p>Like all things Android/Google the documentation is piss poor and written by robots, but if you are only interested in writing JSI module, the two functions above are all you will need</p>

<p>Another interesting pain point, is that you cannot just use any C++ dynamic library on android, android has it‚Äôs own flavor of dynamic libraries (.AAR) if you know how to generate them‚Ä¶ you are a god, if not you have to rely on the ones published by google‚Ä¶ there is 2 of them, I opted for the easy path and completely included the sqlite.c code in my library</p>

<p>To be honest compilation and native toolchains are so f<em>**</em> complicated I cannot dive deeper without confusing you even more (even I‚Äôm confused until this day), however feel free to reach out if you need some other point explained.</p>

<h1 id="ide-support">IDE support</h1>

<p>Now, if you are about to embark into writing your own JSI module I can give you some useful pointers here</p>

<h2 id="vscode-is--for-c">VSCode is üí© for C++</h2>

<p>I tried to set up code for developing my own JSI module, there is a plugin works well enough, but does not correctly resolve the native dependencies and the compilation chain, so all you will get is errors saying it cannot find the header files.</p>

<p>You could try to manually pass the include paths to vscode somehow to try to guide it into correctly resolving the dependencies‚Ä¶ but this was too much work for me because:</p>

<h2 id="xcode-is--but-works">XCode is üí© but works</h2>

<p>XCode is a terrible code editor, period. But it already knows how iOS/C++ works, if you open your project in it, it will immediately pick up your C++ files, autocompletion works, error detection (before compilation) works‚Ä¶ so I just went with this. You can even manually format your code‚Ä¶ if that is some consolation.</p>

<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/796e9467-4ab9-4cf5-bddb-2338e3f9612c/Screen_Shot_2021-08-15_at_10.40.41.jpg" alt="Open your cpp files with the quick-open tool (Cmd + Shift + O)" /></p>

<p>Open your cpp files with the quick-open tool (Cmd + Shift + O)</p>

<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2fc26234-64b9-4b47-a13a-52d09e5acd90/Screen_Shot_2021-08-15_at_10.41.10.jpg" alt="Autocompletion, error detection, etc. works" /></p>

<p>Autocompletion, error detection, etc. works</p>

<h2 id="android-studio-Ô∏è">Android Studio ü§∑üèΩ‚Äç‚ôÇÔ∏è</h2>

<p>If you are a big android fan you can probably make it work, but once I had the iOS version of my JSI package working, the only code I needed was the glue to compile and link the library to the android side of things, so here you can use whatever you want to write java/kotlin.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Now that you know C++ (JSI Cheatsheet Part I: C++) you are ready to tackle some of the other delicacies of coding in C++, namely how compilation and linking works.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>