<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://ospfranco.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ospfranco.com/" rel="alternate" type="text/html" /><updated>2023-08-15T08:39:24+02:00</updated><id>https://ospfranco.com/feed.xml</id><title type="html">Oscar Franco</title><author><name>Oscar Franco</name></author><entry><title type="html">ZSH configuration files load order</title><link href="https://ospfranco.com/post/2023/08/15/zsh-configuration-files-load-order/" rel="alternate" type="text/html" title="ZSH configuration files load order" /><published>2023-08-15T15:00:00+02:00</published><updated>2023-08-15T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/15/zsh%20configuration%20files%20load%20order</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/15/zsh-configuration-files-load-order/"><![CDATA[<p>The order of files being loaded by ZSH is the following:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">.zshenv</code></li>
  <li><code class="language-plaintext highlighter-rouge">.zprofile</code> if login</li>
  <li><code class="language-plaintext highlighter-rouge">.zshrc</code> if interactive</li>
  <li><code class="language-plaintext highlighter-rouge">.zlogin</code> if login</li>
  <li><code class="language-plaintext highlighter-rouge">.zlogout</code>sometimes</li>
</ol>

<p>Why? sometimes variables might be replaced by subsequent files or some other configuration that you don’t desire might be applied.</p>

<p>Be careful when setting things on <code class="language-plaintext highlighter-rouge">.zshenv</code> since it can be overriden by subsequent scripts. Also, only <code class="language-plaintext highlighter-rouge">.zshrc</code> should be used for things like prompt colors and user scripts.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[The order of files being loaded by ZSH is the following:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">React Native, change metro default terminal</title><link href="https://ospfranco.com/post/2023/08/15/react-native,-change-metro-default-terminal/" rel="alternate" type="text/html" title="React Native, change metro default terminal" /><published>2023-08-15T15:00:00+02:00</published><updated>2023-08-15T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/15/react%20native,%20change%20metro%20default%20terminal</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/15/react-native,-change-metro-default-terminal/"><![CDATA[<p>Metro will open a new Terminal window everytime you start your RN app. If you are using other terminal app this is however very annoying. You can change the terminal used to run the initial script:</p>

<ol>
  <li>Open finder window and navigate to <code class="language-plaintext highlighter-rouge">&lt;your_project/node_modules/react-native/scripts</code></li>
  <li>Locate <code class="language-plaintext highlighter-rouge">launchPackager.command</code>, right click the file, select <code class="language-plaintext highlighter-rouge">Get info</code> and then change the <code class="language-plaintext highlighter-rouge">Open with:</code> value to your terminal, then click on <code class="language-plaintext highlighter-rouge">Change All</code></li>
</ol>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Metro will open a new Terminal window everytime you start your RN app. If you are using other terminal app this is however very annoying. You can change the terminal used to run the initial script:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Javas JNI quirks and notes</title><link href="https://ospfranco.com/post/2023/08/15/javas-jni-quirks-and-notes/" rel="alternate" type="text/html" title="Javas JNI quirks and notes" /><published>2023-08-15T15:00:00+02:00</published><updated>2023-08-15T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/15/javas%20jni%20quirks%20and%20notes</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/15/javas-jni-quirks-and-notes/"><![CDATA[<p>The JNI is Javas compatibility layer with C. It follows a strict syntax to blindly call the (ABI-compatible) functions. It has however arcane syntax and conventions. Here are some useful notes every time I work with it I need to check.</p>

<h1 id="type-conversions">Type conversions</h1>

<p>When declaring a Java JNI function you need to declare the types with single characters that will be mapped to C types. The conversion is as follows:</p>

<p>Z = boolean
B = byte
C = char
I = short
J = long
F = float
D = double</p>

<p>Non scalar types need to be declared by their corresponding package:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Will be passed to the C side as a JString</span>
<span class="nc">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="nc">String</span><span class="o">;</span>
</code></pre></div></div>

<h1 id="extern-c">Extern C</h1>

<p>C++ code needs to be within a <code class="language-plaintext highlighter-rouge">extern "C"</code> to prevent name mangling by the compiler and allow the JNI to call the function blindly.</p>

<h1 id="jniexport--jnicall">JNIEXPORT &amp; JNICALL</h1>

<p><code class="language-plaintext highlighter-rouge">JNIEXPORT</code> ensures function is visible on the symbols table
<code class="language-plaintext highlighter-rouge">JNICALL</code> ensures function uses the correct calling convention. On Android JNICALL has a different value based on the architecture where it is running.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[The JNI is Javas compatibility layer with C. It follows a strict syntax to blindly call the (ABI-compatible) functions. It has however arcane syntax and conventions. Here are some useful notes every time I work with it I need to check.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">CMake notes</title><link href="https://ospfranco.com/post/2023/08/15/cmake-notes/" rel="alternate" type="text/html" title="CMake notes" /><published>2023-08-15T15:00:00+02:00</published><updated>2023-08-15T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/15/cmake%20notes</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/15/cmake-notes/"><![CDATA[<p>CMake is a meta build system, can automate everything including running tests and taking screenshots.</p>

<p>It has 3 stages:</p>

<ul>
  <li>Configuration</li>
  <li>Generation</li>
  <li>Building</li>
</ul>

<h1 id="configuration">Configuration</h1>

<p>CMake will read project details in the <em>source tree</em> directory and preparing the output directory, called <em>build tree,</em> for the generation stage. It collects info about the env (compilers, linkers, variables, etc) into a CMakeCache.txt.</p>

<h1 id="generation">Generation</h1>

<p>After reading the configuration a <em>build system</em> is generated. Since CMake is a meta build system, the output is a cut-to-size configuration for other build tools (make, ninja, IDE files for Visual Studio or Xcode).</p>

<h1 id="building">Building</h1>

<p>To produce the final artifacts, the build tool needs to run. The beauty lies in the ability to produce buildsystem on demand for every platform with a single configuration.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cmake</span> <span class="o">--</span><span class="n">build</span> <span class="c1">// CMake does not build anything, but the platform build tool does</span>
</code></pre></div></div>

<h1 id="useful-flags">Useful flags</h1>

<p><code class="language-plaintext highlighter-rouge">-S</code> Source tree target directory</p>

<p><code class="language-plaintext highlighter-rouge">-B</code> Build tree target directory</p>

<p><code class="language-plaintext highlighter-rouge">-G</code> Generator to use (cmake –help outputs the list of available generators)</p>

<p><code class="language-plaintext highlighter-rouge">-D CMAKE_BUILD_TYPE=Release</code> Important flag to compile for the right level</p>

<blockquote>
  <p>💡 Some generators are able to generate debug AND release builds at the same time (Xcode and Visual Studio)</p>
</blockquote>

<blockquote>
  <p>💻 Cmake can run certain commands in a platform independent way:
<em>capablities, cat, chdir, compare_files, copy, copy_directory, copy_if_different, echo, echo_append, env, environment, make_directory, md5sum, sha1sum, sha224sum, sha256sum, create_symlink, etc</em></p>
</blockquote>

<blockquote>
  <p>📂 Cmake supports sub directories which can have their own compilation process:</p>

  <p><code class="language-plaintext highlighter-rouge">add_subdirectory(api)</code></p>
</blockquote>

<h1 id="variables">Variables</h1>

<p>CMake performs recursive variable expansion. Setting is done via function.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">set</span><span class="p">(</span><span class="kt">MyString1</span> <span class="s">"Text1"</span><span class="p">)</span>
<span class="nf">set</span><span class="p">([[</span><span class="kt">My</span> <span class="kt">String2</span><span class="p">]]</span> <span class="s">"Text2"</span><span class="p">)</span>
<span class="nf">set</span><span class="p">(</span><span class="s">"My String 3"</span> <span class="s">"Text3"</span><span class="p">)</span>
<span class="nf">message</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="kt">MyString1</span><span class="p">})</span>
<span class="nf">message</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="kt">My</span><span class="p">\</span> <span class="kt">String2</span><span class="p">})</span>
<span class="nf">message</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="kt">My</span><span class="p">\</span> <span class="kt">String</span><span class="p">\</span> <span class="mi">3</span><span class="p">})</span>
</code></pre></div></div>

<p>Depending on the type of variable, they get accessed differently</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">${}</code> syntax is used to reference normal or cache variables</li>
  <li><code class="language-plaintext highlighter-rouge">$ENV{}</code> syntax is used to reference environment variables</li>
  <li><code class="language-plaintext highlighter-rouge">$CACHE{}</code> syntax is used to reference cache variables</li>
</ul>

<h1 id="commands">Commands</h1>

<h2 id="include">include</h2>

<p>Will try to read a cmake file and execute it</p>

<h2 id="file">file</h2>

<p>Set of file manipulations</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">file</span><span class="p">(</span><span class="kt">READ</span> <span class="o">&lt;</span><span class="n">filename</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">out</span><span class="o">-</span><span class="kd">var</span><span class="o">&gt;</span> <span class="p">[</span><span class="o">...</span><span class="p">])</span>
<span class="nf">file</span><span class="p">({</span><span class="kt">WRITE</span> <span class="o">|</span> <span class="kt">APPEND</span><span class="p">}</span> <span class="o">&lt;</span><span class="n">filename</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">content</span><span class="o">&gt;...</span><span class="p">)</span>
<span class="nf">file</span><span class="p">(</span><span class="kt">DOWNLOAD</span> <span class="o">&lt;</span><span class="n">url</span><span class="o">&gt;</span> <span class="p">[</span><span class="o">&lt;</span><span class="n">file</span><span class="o">&gt;</span><span class="p">]</span> <span class="p">[</span><span class="o">...</span><span class="p">])</span>
</code></pre></div></div>

<h2 id="execute_process">execute_process</h2>

<p>Allows to execute an external process. TIMEOUT can be used. RESULT_VARIABLE allows to collect the exit status code.</p>

<h2 id="option">option</h2>

<p>Provide a variable that the user can overwrite:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">option</span><span class="p">(</span><span class="kt">BUILD_SHARED_LIBS</span> <span class="s">"Build libraries as shared libraries"</span> <span class="kt">ON</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="sub-directories">Sub directories</h1>

<p>Allow for the natural inclusion of a file structure.</p>

<h2 id="add_subdirectory">add_subdirectory</h2>

<p>Will simply execute any nested cmakelists.txt found in the passed directory. This does not imply automatic linking.</p>

<h2 id="target_link_libraries">target_link_libraries</h2>

<p>It’s used to link the artifacts generated to the target. Root <code class="language-plaintext highlighter-rouge">cmakelists.txt</code>:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">cmake_minimum_required</span><span class="p">(</span><span class="kt">VERSION</span> <span class="mf">3.20</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
<span class="nf">project</span><span class="p">(</span><span class="kt">Rental</span> <span class="kt">CXX</span><span class="p">)</span>

<span class="nf">add_executable</span><span class="p">(</span><span class="kt">Rental</span> <span class="n">main</span><span class="o">.</span><span class="n">cpp</span><span class="p">)</span>

<span class="nf">add_subdirectory</span><span class="p">(</span><span class="n">cars</span><span class="p">)</span>
<span class="nf">target_link_libraries</span><span class="p">(</span><span class="kt">Rental</span> <span class="kt">PRIVATE</span> <span class="n">cars</span><span class="p">)</span>
</code></pre></div></div>

<p>Child <code class="language-plaintext highlighter-rouge">cmakelists.txt</code>:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">add_library</span><span class="p">(</span><span class="n">cards</span> <span class="kt">OBJECT</span>
	<span class="n">car</span><span class="o">.</span><span class="n">cpp</span>
<span class="cp"># car_maintenance.cpp</span>
<span class="p">)</span>

<span class="nf">target_include_directories</span><span class="p">(</span><span class="n">cars</span> <span class="kt">PUBLIC</span> <span class="o">.</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="add_library">add_library</h2>

<p>Produces a globally visible target <code class="language-plaintext highlighter-rouge">cars</code> (basically: will link the symbols). By using the <strong>OBJECT</strong> keyword, only the object files will generated (not a library).</p>

<h2 id="target_include_directories">target_include_directories</h2>

<p>Will allow cpp code to include the headers (without providing a relative path. e.g. <code class="language-plaintext highlighter-rouge">#include “myheader.h”</code>)</p>

<h1 id="cross-compilation">Cross-compilation</h1>

<p>Compiling code on one machine-art to be run in another is called <strong>cross-compilation</strong>. The <strong>host</strong> system information variables always have <em>HOST</em> in their name.</p>

<h2 id="64-bits">64 bits</h2>

<p>CMake uses the pointer size to gather information about the target machine.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="kt">CMAKE_SIZEOF_VOID_P</span> <span class="kt">EQUAL</span> <span class="mi">8</span><span class="p">)</span>
	<span class="nf">message</span><span class="p">(</span><span class="kt">STATUS</span> <span class="s">"Target is 64 bits"</span><span class="p">)</span>
<span class="nf">endif</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="cxx-standard">Cxx standard</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Pick C++ (11, 14, 17, 20, 23) version</span>
<span class="nf">set_property</span><span class="p">(</span><span class="kt">TARGET</span> <span class="o">&lt;</span><span class="n">target</span><span class="o">&gt;</span> <span class="kt">PROPERTY</span> <span class="kt">CXX</span> <span class="o">&lt;</span><span class="n">standard</span><span class="o">&gt;</span><span class="p">)</span>
<span class="nf">set</span><span class="p">(</span><span class="kt">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="kt">ON</span><span class="p">)</span> <span class="c1">// Forces CMake to check the compiler supports the standard</span>
</code></pre></div></div>

<h2 id="try_run">try_run</h2>

<p>Command that allows to quickly run an artifact to check after compilation it runs without runtime errors.</p>

<h1 id="targets">Targets</h1>

<p>It’s a recipe that a buildsystem uses to compile a list of files into another file. CMake can create three targets:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">add_executable()</code></li>
  <li><code class="language-plaintext highlighter-rouge">add_library()</code></li>
  <li><code class="language-plaintext highlighter-rouge">add_custom_target()</code> → doesn’t necessarily produce an output file</li>
</ul>

<p>Targets have properties that work similar way to fields of c++ objects.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">get_target_property</span><span class="p">(</span><span class="o">&lt;</span><span class="kd">var</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">target</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">property</span><span class="o">-</span><span class="n">name</span><span class="o">&gt;</span><span class="p">)</span>
<span class="nf">set_target_properties</span><span class="p">(</span><span class="o">&lt;</span><span class="n">target1</span><span class="o">&gt;</span> <span class="o">...</span> <span class="kt">PROPERTIES</span> <span class="o">&lt;</span><span class="n">prop1</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">value1</span><span class="o">&gt;</span> <span class="o">...</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="aliases">Aliases</h2>

<p>Useful if some specific target requires a specific name.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">add_executable</span><span class="p">(</span><span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="kt">ALIAS</span> <span class="o">&lt;</span><span class="n">target</span><span class="o">&gt;</span><span class="p">)</span>
<span class="nf">add_library</span><span class="p">(</span><span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="kt">ALIAS</span> <span class="o">&lt;</span><span class="n">target</span><span class="o">&gt;</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="building-1">Building</h1>

<p>Including header files</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;path-spec&gt; // Will check standard include directories, including system directories</span>
<span class="cp">#include "path-spec" // Will start searching for the included file in the directory of the current file and then check directories for the angle-bracket form</span>
</code></pre></div></div>

<p>Cmake provides a command to manipulate paths being searched for included files</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">target_include_directories</span><span class="p">(</span><span class="o">&lt;</span><span class="n">target</span><span class="o">&gt;</span> <span class="p">[</span><span class="kt">SYSTEM</span><span class="p">]</span> <span class="p">[</span><span class="kt">AFTER</span><span class="o">|</span><span class="kt">BEFORE</span><span class="p">]</span> <span class="o">&lt;</span><span class="kt">INTERFACE</span><span class="o">|</span><span class="kt">PUBLIC</span><span class="o">|</span><span class="kt">PRIVATE</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">items</span><span class="o">...</span><span class="p">])</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">SYSTEM</code> keyword informs the compilers that the provided dirs are meant as standard system directories (to be used with angle-brackets)</p>

<h1 id="linking">Linking</h1>

<p>Linking relocates individual object files into a single executable (needs to literally relocate pieces of the files together, contains sections headers, sections, and a section header table). Secondly, it needs to resolve references from differenten translation units (each cpp file is a translation unit).</p>

<p>All libraries have a common prefix <code class="language-plaintext highlighter-rouge">lib</code>.</p>

<h2 id="libraries">Libraries</h2>

<h2 id="static-libraries">Static libraries</h2>

<p>Will simply create a static library. Static libraries are a collection of <em>raw object files</em> in an archive. Use them if you want to avoid separating your dependencies from the executable, at the price of increasing size and memory consumed.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">add_library</span><span class="p">(</span><span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="p">[</span><span class="kt">STATIC</span><span class="p">]</span> <span class="p">[</span><span class="n">sources</span><span class="o">...</span><span class="p">])</span>
</code></pre></div></div>

<h2 id="dynamic-libraries">Dynamic libraries</h2>

<p>Shared libraries are built using a linker. This libraries will contains proper section headers, sections, etc. The OS will load a single instance into memory and all subsequently started programs will be provided with the same address.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">add_library</span><span class="p">(</span><span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="kt">SHARED</span> <span class="p">[</span><span class="n">sources</span><span class="o">...</span><span class="p">])</span>
</code></pre></div></div>

<h2 id="shared-modules">Shared modules</h2>

<p>This is a version of a shared library that is intended to be loaded during runtime, rather than linked during compilation. A shared module is not loaded automatically at the start of a program (like dy libs). This only happens when a program explicitly requests it via system call.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">add_library</span><span class="p">(</span><span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="kt">MODULE</span> <span class="p">[</span><span class="n">sources</span><span class="o">...</span><span class="p">])</span>
</code></pre></div></div>

<h2 id="namespaces">Namespaces</h2>

<p>I’ll spare you the details, depending on the linker implementation sometimes symbols/definitions/variables might be resolved or merged or just fail when compiling your program. Namespaces were created for the purpose of encapsulating translation units without having to worry about this collisions. Just use them.</p>

<h1 id="fetch-content">Fetch content</h1>

<p>CMake can also help taking care of fetching dependencies not in your machine:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Includes Fetch content plugin</span>
<span class="nf">include</span><span class="p">(</span><span class="kt">FetchContent</span><span class="p">)</span>
<span class="c1">// Declare dependency from a git repo and a specific tag</span>
<span class="kt">FetchContent_Declare</span><span class="p">(</span><span class="n">cpr</span> <span class="kt">GIT_REPOSITORY</span> <span class="nv">https</span><span class="p">:</span><span class="c1">//github.com/libcpr/cpr.git</span>
                         <span class="kt">GIT_TAG</span> <span class="mi">871</span><span class="n">ed52d350214a034f6ef8a3b8f51c5ce1bd400</span><span class="p">)</span>
<span class="c1">// Make dependency available as a target</span>
<span class="kt">FetchContent_MakeAvailable</span><span class="p">(</span><span class="n">cpr</span><span class="p">)</span>
<span class="c1">// Link target with cpr</span>
<span class="nf">target_link_libraries</span><span class="p">(</span><span class="o">&lt;</span><span class="n">target</span><span class="o">&gt;</span> <span class="kt">PRIVATE</span> <span class="nv">cpr</span><span class="p">::</span><span class="n">cpr</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[CMake is a meta build system, can automate everything including running tests and taking screenshots.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">React Native, native logs quirks</title><link href="https://ospfranco.com/post/2023/08/15/react-native,-native-logs-quirks/" rel="alternate" type="text/html" title="React Native, native logs quirks" /><published>2023-08-15T15:00:00+02:00</published><updated>2023-08-15T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/15/react%20native,%20native%20logs%20quirks</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/15/react-native,-native-logs-quirks/"><![CDATA[<h1 id="ios">iOS</h1>

<p>On iOS the default output (NSLog) is by default disabled on the project. You can re-enable it by editing the scheme you are using, going to the <code class="language-plaintext highlighter-rouge">Arguments</code> tab, there you will see a <code class="language-plaintext highlighter-rouge">OS_ACTIVITY_MODE</code> flag, you can clear the value and you will start seeing all the logs.</p>

<p>If you don’t want to use NSLog (or print on Swift I suppose) you can use the RCTLog functions:</p>

<div class="language-obj-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#import &lt;React/RCTLog.h&gt;
</span>
<span class="c1">// Your code</span>
<span class="n">RCTLogWarn</span><span class="p">(</span><span class="s">@"Your message"</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="android">Android</h1>

<p>On Android you can resort to the RNLog functions:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.facebook.react.util.RNLog</span><span class="o">;</span>

<span class="c1">// Your code</span>
<span class="nc">RNLog</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="s">"Your message"</span><span class="o">);</span>
</code></pre></div></div>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[iOS]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">React Native, Rust step-by-step integration guide</title><link href="https://ospfranco.com/post/2023/08/11/react-native,-rust-step-by-step-integration-guide/" rel="alternate" type="text/html" title="React Native, Rust step-by-step integration guide" /><published>2023-08-11T15:00:00+02:00</published><updated>2023-08-11T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/11/react%20native,%20rust%20step-by-step%20integration%20guide</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/11/react-native,-rust-step-by-step-integration-guide/"><![CDATA[<p>There are many talks and tutorials that go over the more advanced topics once people have integrated Rust into their projects, however, if you are like me and have no idea about how to build, link and include your Rust code, they really convey little information.</p>

<p>Here is a more step by step tutorial, but in the video form I go over the concepts that actually make this work, so you can adjust and understand the tooling behind and you can maintain your integration.</p>

<iframe class="w-full h-96" src="https://www.youtube.com/embed/PPU4Hrz4J_s" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<blockquote>
  <p>I’m currently looking for freelance projects, if your team needs a RN developer or some consulting, <a href="mailto://ospfranco@gmail.com">send me an email</a>.</p>
</blockquote>

<h1 id="basic-setup-and-ios">Basic Setup and iOS</h1>

<ul>
  <li>Set up Rust compiler on your computer, just follow the instructions on the Rust website.</li>
  <li>Set up cross compilation targets, 32 bits targets are no longer supported, so we will only add those usable in 2023.
    <ul>
      <li>32bit targets have been deprecated by the rust team, no longer available on the stable channel</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  rustup target add x86_64-apple-ios
  rustup target add aarch64-apple-ios
  rustup target add aarch64-apple-ios-sim
    
  rustup target add x86_64-linux-android
  rustup target add aarch64-linux-android
  rustup target add armv7-linux-androideabi
  rustup target add i686-linux-android
</code></pre></div>    </div>
  </li>
  <li>
    <p>Next we will create the folder where we will put all of our Rust code and infra scripts. In my case I will call it <code class="language-plaintext highlighter-rouge">my_sdk</code></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cargo new <span class="o">[</span>YOUR_LIBRARY_NAME]
</code></pre></div>    </div>
  </li>
  <li>Change name of <code class="language-plaintext highlighter-rouge">main.rs</code> to <code class="language-plaintext highlighter-rouge">lib.rs</code></li>
  <li>Add your API code on lib.rs</li>
  <li>Add cbindgen crate (alternative is cxx.rs) <code class="language-plaintext highlighter-rouge">cargo install cbindgen</code></li>
  <li>Create a <code class="language-plaintext highlighter-rouge">cbindgen.toml</code> file, it is fine if it is empty.</li>
  <li><code class="language-plaintext highlighter-rouge">cbindgen --config cbindgen.toml --crate my_sdk --output include/my_sdk.h</code></li>
  <li>
    <p>Modify toml to compile as static library for iOS and a dynamic library with JNI linked for Android</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">[</span>package]
  name <span class="o">=</span> <span class="s2">"SDK"</span>
  version <span class="o">=</span> <span class="s2">"0.1.0"</span>
  edition <span class="o">=</span> <span class="s2">"2021"</span>
    
  <span class="o">[</span>lib]
  name <span class="o">=</span> <span class="s2">"SDK"</span>
  crate-type <span class="o">=</span> <span class="o">[</span><span class="s2">"staticlib"</span>, <span class="s2">"cdylib"</span><span class="o">]</span>
    
  <span class="o">[</span>dependencies]
  libc <span class="o">=</span> <span class="s2">"0.2.80"</span>
  jni <span class="o">=</span> <span class="s2">"0.17.0"</span>
    
  <span class="o">[</span>features]
  default <span class="o">=</span> <span class="o">[</span><span class="s2">"jni"</span><span class="o">]</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Setup Makefile</p>

    <div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">ARCHS_IOS</span> <span class="o">=</span> x86_64-apple-ios aarch64-apple-ios aarch64-apple-ios-sim
  <span class="nv">ARCHS_ANDROID</span> <span class="o">=</span> aarch64-linux-android armv7-linux-androideabi i686-linux-android
  <span class="nv">LIB</span> <span class="o">=</span> libmy_sdk.a
  <span class="nv">XCFRAMEWORK</span> <span class="o">=</span> MySdk.xcframework
    
  <span class="nl">all</span><span class="o">:</span> <span class="nf">ios android</span>
    
  <span class="nl">ios</span><span class="o">:</span> <span class="nf">$(XCFRAMEWORK)</span>
    
  <span class="nl">android</span><span class="o">:</span> <span class="nf">$(ARCHS_ANDROID)</span>
  	<span class="err">sh</span> <span class="err">copy_android.sh</span>
    
  <span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">$(ARCHS_IOS)</span>
  <span class="nl">$(ARCHS_IOS)</span><span class="o">:</span> <span class="nf">%:</span>
  	<span class="err">cargo</span> <span class="err">build</span> <span class="err">--target</span> <span class="err">$@</span> <span class="err">--release</span>
    
  <span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">$(ARCHS_ANDROID)</span>
  <span class="nl">$(ARCHS_ANDROID)</span><span class="o">:</span> <span class="nf">%:</span>
  	<span class="err">cargo</span> <span class="err">build</span> <span class="err">--target</span> <span class="err">$@</span> <span class="err">--release</span>
    
  <span class="nl">$(XCFRAMEWORK)</span><span class="o">:</span> <span class="nf">$(ARCHS_IOS)</span>
  	<span class="err">lipo</span> <span class="err">-create</span> <span class="err">$(wildcard</span> <span class="err">target/x86_64-apple-ios/release/$(LIB))</span> <span class="err">$(wildcard</span> <span class="err">target/aarch64-apple-ios-sim/release/$(LIB))</span> <span class="err">-output</span> <span class="err">simulator_fat/libmy_sdk.a</span>
  	<span class="err">xcodebuild</span> <span class="err">-create-xcframework</span> <span class="err">-library</span> <span class="err">$(wildcard</span> <span class="err">target/aarch64-apple-ios/release/$(LIB))</span> <span class="err">-headers</span> <span class="k">include</span><span class="sx"> -library simulator_fat/libmy_sdk.a -headers include -output $@</span>
</code></pre></div>    </div>
  </li>
  <li>Add generated <code class="language-plaintext highlighter-rouge">.xcframework</code> to Xcode (dragging and dropping is the easiest)
    <ul>
      <li>On the project properties mark the xcframework as embed and sign</li>
    </ul>
  </li>
  <li>You should now be able to simply import the header file and call the rust function from any obj-c++ file</li>
</ul>

<h1 id="android">Android</h1>

<ul>
  <li>
    <p>On cargo.toml add the <code class="language-plaintext highlighter-rouge">cdylib</code> crate-type, plus the features and make it optional so that it doesn’t intefere with iOS</p>

    <div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">[package]</span>
<span class="nv">name</span> <span class="o">=</span> <span class="s2">"my_sdk"</span>
<span class="nv">version</span> <span class="o">=</span> <span class="s2">"0.1.0"</span>
<span class="nv">edition</span> <span class="o">=</span> <span class="s2">"2021"</span>

<span class="err">[lib]</span>
<span class="nv">name</span> <span class="o">=</span> <span class="s2">"my_sdk"</span>
<span class="nv">crate-type</span> <span class="o">=</span> <span class="o">[</span><span class="s2">"staticlib"</span>, <span class="s2">"cdylib"</span><span class="o">]</span>

<span class="err">[dependencies]</span>
<span class="nv">libc</span> <span class="o">=</span> <span class="s2">"0.2.80"</span>
<span class="nv">jni</span> <span class="o">=</span> <span class="o">{</span> version <span class="o">=</span> <span class="s2">"0.18.0"</span>, optional <span class="o">=</span> <span class="nb">true</span>, default-features <span class="o">=</span> <span class="nb">false</span> <span class="o">}</span>

<span class="err">[features]</span>
<span class="nv">default</span> <span class="o">=</span> <span class="o">[</span><span class="s2">"jni"</span><span class="o">]</span>
</code></pre></div>    </div>
  </li>
  <li>Android unfortunately requires its own linker, some of the old tutorials mention using a script inside the sdk to generate a standalone toolchain, on the latest versions of the Android SDK there are pre-compiled versions for windows, linux and mac, on my machine I can find them on <code class="language-plaintext highlighter-rouge">~/Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin</code>. Take note of the version since version 24 of the Android SDK is the one that supports m1 machines.</li>
  <li>
    <p>What we need to do then is tell the Rust compiler to use some of this binaries to compile our rust code, to do this we will create a cargo-config.toml file on our folder, but then we need to copy this into our home folder in the machine since this is a global configuration file:</p>

    <div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># template file on &lt;project&gt;/my_sdk/cargo-config.toml</span>
<span class="c"># All paths are relative to the user home folder</span>
<span class="nn">[target.aarch64-linux-android]</span>
<span class="py">ar</span> <span class="p">=</span> <span class="s">"Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin/aarch64-linux-android-ar"</span>
<span class="py">linker</span> <span class="p">=</span> <span class="s">"Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin/aarch64-linux-android31-clang"</span>

<span class="c"># Take note, the target the binary names do not match on this case</span>
<span class="nn">[target.arm-linux-androideabi]</span>
<span class="py">ar</span> <span class="p">=</span> <span class="s">"Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin/armv7a-linux-androideabi-ar"</span>
<span class="py">linker</span> <span class="p">=</span> <span class="s">"Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin/armv7a-linux-androideabi31-clang"</span>

<span class="nn">[target.i686-linux-android]</span>
<span class="py">ar</span> <span class="p">=</span> <span class="s">"Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin/i686-linux-android-ar"</span>
<span class="py">linker</span> <span class="p">=</span> <span class="s">"Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin/i686-linux-android31-clang"</span>

<span class="nn">[target.x86_64-linux-android]</span>
<span class="py">ar</span> <span class="p">=</span> <span class="s">"Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin/x86_64-linux-android-ar"</span>
<span class="py">linker</span> <span class="p">=</span> <span class="s">"Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin/x86_64-linux-android31-clang"</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Once you have this file, copy it to the home folder via</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp </span>cargo-config.toml ~/.cargo/config
</code></pre></div>    </div>
  </li>
  <li>
    <p>Now we actually have to to compile Rust for android, unlike for iOS, Android requires more flags, instead of doing this via make file a bash script is a little simpler. First modify the Makefile and then create a new <code class="language-plaintext highlighter-rouge">build-android.sh</code> script (don’t forget to give it permissions).</p>

    <div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">ARCHS_IOS</span> <span class="o">=</span> x86_64-apple-ios aarch64-apple-ios aarch64-apple-ios-sim
<span class="nv">ARCHS_ANDROID</span> <span class="o">=</span> i686-linux-android x86_64-linux-android aarch64-linux-android arm-linux-androideabi
<span class="nv">LIB</span> <span class="o">=</span> libmy_sdk.a
<span class="nv">XCFRAMEWORK</span> <span class="o">=</span> MySdk.xcframework
  
<span class="nl">all</span><span class="o">:</span> <span class="nf">ios android</span>
  
<span class="nl">ios</span><span class="o">:</span> <span class="nf">$(XCFRAMEWORK)</span>
  
<span class="nl">android</span><span class="o">:</span> <span class="nf">$(ARCHS_ANDROID)</span>
  
<span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">$(ARCHS_IOS)</span>
<span class="nl">$(ARCHS_IOS)</span><span class="o">:</span> <span class="nf">%:</span>
  <span class="err">cargo</span> <span class="err">build</span> <span class="err">--target</span> <span class="err">$@</span> <span class="err">--release</span>
  
<span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">$(ARCHS_ANDROID) </span>
<span class="nl">$(ARCHS_ANDROID)</span><span class="o">:</span> <span class="nf">%:</span>
  <span class="err">./build-android.sh</span> <span class="err">$@</span> <span class="c"># Change this!!!!!!!!!
</span>  
<span class="nl">$(XCFRAMEWORK)</span><span class="o">:</span> <span class="nf">$(ARCHS_IOS)</span>
  <span class="err">lipo</span> <span class="err">-create</span> <span class="err">$(wildcard</span> <span class="err">target/x86_64-apple-ios/release/$(LIB))</span> <span class="err">$(wildcard</span> <span class="err">target/aarch64-apple-ios-sim/release/$(LIB))</span> <span class="err">-output</span> <span class="err">simulator_fat/libmy_sdk.a</span>
  <span class="err">xcodebuild</span> <span class="err">-create-xcframework</span> <span class="err">-library</span> <span class="err">$(wildcard</span> <span class="err">target/aarch64-apple-ios/release/$(LIB))</span> <span class="err">-headers</span> <span class="k">include</span><span class="sx"> -library simulator_fat/libmy_sdk.a -headers include -output $@</span>
</code></pre></div>    </div>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nv">TARGET</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>

<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$TARGET</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">""</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"missing argument TARGET"</span>
    <span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> TARGET"</span>
    <span class="nb">exit </span>1
<span class="k">fi

</span><span class="nv">NDK_TARGET</span><span class="o">=</span><span class="nv">$TARGET</span>

<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$TARGET</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"arm-linux-androideabi"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nv">NDK_TARGET</span><span class="o">=</span><span class="s2">"armv7a-linux-androideabi"</span>
<span class="k">fi

</span><span class="nv">API_VERSION</span><span class="o">=</span><span class="s2">"21"</span>
<span class="nv">NDK_VERSION</span><span class="o">=</span><span class="s2">"24.0.8215888"</span>
<span class="nv">NDK_HOST</span><span class="o">=</span><span class="s2">"darwin-x86_64"</span>

<span class="c"># needed so we can overwrite it in the CI</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$NDK</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
  </span><span class="nv">NDK</span><span class="o">=</span><span class="s2">"</span><span class="nv">$ANDROID_HOME</span><span class="s2">/ndk/</span><span class="nv">$NDK_VERSION</span><span class="s2">"</span>
<span class="k">fi

</span><span class="nv">TOOLS</span><span class="o">=</span><span class="s2">"</span><span class="nv">$NDK</span><span class="s2">/toolchains/llvm/prebuilt/</span><span class="nv">$NDK_HOST</span><span class="s2">"</span>

<span class="nv">AR</span><span class="o">=</span><span class="nv">$TOOLS</span>/bin/llvm-ar <span class="se">\</span>
<span class="nv">CXX</span><span class="o">=</span><span class="nv">$TOOLS</span>/bin/<span class="k">${</span><span class="nv">NDK_TARGET</span><span class="k">}${</span><span class="nv">API_VERSION</span><span class="k">}</span><span class="nt">-clang</span>++ <span class="se">\</span>
<span class="nv">RANLIB</span><span class="o">=</span><span class="nv">$TOOLS</span>/bin/llvm-ranlib <span class="se">\</span>
<span class="nv">CXXFLAGS</span><span class="o">=</span><span class="s2">"--target=</span><span class="nv">$NDK_TARGET</span><span class="s2">"</span> <span class="se">\</span>
cargo build <span class="nt">--target</span> <span class="nv">$TARGET</span> <span class="nt">--release</span> <span class="nv">$EXTRA_ARGS</span>
</code></pre></div>    </div>
  </li>
</ul>

<blockquote>
  <p>This method of compilation was developed by <strong>Nik Graf</strong> and his team at <strong>Serenity Notes</strong>, shot out to them.
<a href="https://www.serenity.re/en/notes">https://serenity.re</a></p>
</blockquote>

<ul>
  <li>
    <p>Ask you can see you need to have set the <code class="language-plaintext highlighter-rouge">$ANDROID_HOME</code> environment variable (I have it on my <code class="language-plaintext highlighter-rouge">.zshrc</code>) you can modify the <code class="language-plaintext highlighter-rouge">API_VERSION</code> and the <code class="language-plaintext highlighter-rouge">NDK_VERSION</code> to the ones you are using and have installed on your machine.</p>
  </li>
  <li>
    <p>We will still not be able to call our Rust code from Java, because we need to go through the JNI and the JNI is very picky regarding names, we need to create specific binding for Android, on the <code class="language-plaintext highlighter-rouge">[lib.rs](http://lib.rs)</code> and the following block</p>
  </li>
  <li>
    <p>We can finally call <code class="language-plaintext highlighter-rouge">make android</code> and the library will be created for us</p>

    <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// On Android function names need to follow the JNI convention</span>
  <span class="k">pub</span> <span class="k">mod</span> <span class="n">android</span> <span class="p">{</span>
    <span class="k">extern</span> <span class="k">crate</span> <span class="n">jni</span><span class="p">;</span>
    
    <span class="k">use</span> <span class="k">self</span><span class="p">::</span><span class="nn">jni</span><span class="p">::</span><span class="n">JNIEnv</span><span class="p">;</span>
    <span class="k">use</span> <span class="k">self</span><span class="p">::</span><span class="nn">jni</span><span class="p">::</span><span class="nn">objects</span><span class="p">::</span><span class="n">JClass</span><span class="p">;</span>
    <span class="k">use</span> <span class="k">self</span><span class="p">::</span><span class="nn">jni</span><span class="p">::</span><span class="nn">sys</span><span class="p">::</span><span class="n">jstring</span><span class="p">;</span>
    
    <span class="nd">#[no_mangle]</span>
    <span class="k">pub</span> <span class="k">unsafe</span> <span class="k">extern</span> <span class="k">fn</span> <span class="nf">Java_com_samplesdk_BindingsModule_helloWorld</span><span class="p">(</span><span class="n">env</span><span class="p">:</span> <span class="n">JNIEnv</span><span class="p">,</span> <span class="n">_</span><span class="p">:</span> <span class="n">JClass</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">jstring</span> <span class="p">{</span>
      <span class="k">let</span> <span class="n">output</span> <span class="o">=</span> <span class="n">env</span><span class="nf">.new_string</span><span class="p">(</span><span class="s">"Hello from Rust!"</span><span class="p">)</span><span class="nf">.expect</span><span class="p">(</span><span class="s">"Couldn't create java string!"</span><span class="p">);</span>
      <span class="n">output</span><span class="nf">.into_inner</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>We now need to somehow include this .so files into the Android compilation, the easiest way is to copy them inside of the <code class="language-plaintext highlighter-rouge">Android/app/src</code> folder and then Gradle should automatically pick them up and include them in the compilation process. Let’s update our make file to include a new script that will copy everything once it is compiled:</p>

    <div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">ARCHS_IOS</span> <span class="o">=</span> x86_64-apple-ios aarch64-apple-ios aarch64-apple-ios-sim
<span class="nv">ARCHS_ANDROID</span> <span class="o">=</span> i686-linux-android x86_64-linux-android aarch64-linux-android arm-linux-androideabi
<span class="nv">LIB</span> <span class="o">=</span> libmy_sdk.a
<span class="nv">XCFRAMEWORK</span> <span class="o">=</span> MySdk.xcframework

<span class="nl">all</span><span class="o">:</span> <span class="nf">ios android</span>

<span class="nl">ios</span><span class="o">:</span> <span class="nf">$(XCFRAMEWORK)</span>

<span class="nl">android</span><span class="o">:</span> <span class="nf">GENERATE_ANDROID</span>

<span class="c"># PHONY keyword on make means this is not a file, just an identifier for a target
</span><span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">$(ARCHS_IOS)</span>
<span class="nl">$(ARCHS_IOS)</span><span class="o">:</span> <span class="nf">%:</span>
  <span class="err">cargo</span> <span class="err">build</span> <span class="err">--target</span> <span class="err">$@</span> <span class="err">--release</span>

<span class="nl">$(XCFRAMEWORK)</span><span class="o">:</span> <span class="nf">$(ARCHS_IOS)</span>
  <span class="err">lipo</span> <span class="err">-create</span> <span class="err">$(wildcard</span> <span class="err">target/x86_64-apple-ios/release/$(LIB))</span> <span class="err">$(wildcard</span> <span class="err">target/aarch64-apple-ios-sim/release/$(LIB))</span> <span class="err">-output</span> <span class="err">simulator_fat/libmy_sdk.a</span>
  <span class="err">xcodebuild</span> <span class="err">-create-xcframework</span> <span class="err">-library</span> <span class="err">$(wildcard</span> <span class="err">target/aarch64-apple-ios/release/$(LIB))</span> <span class="err">-headers</span> <span class="k">include</span><span class="sx"> -library simulator_fat/libmy_sdk.a -headers include -output $@</span>

<span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">$(ARCHS_ANDROID)</span>
<span class="nl">$(ARCHS_ANDROID)</span><span class="o">:</span> <span class="nf">%:</span>
  <span class="err">./build-android.sh</span> <span class="err">$@</span>

<span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">GENERATE_ANDROID</span>
<span class="nl">GENERATE_ANDROID</span><span class="o">:</span> <span class="nf">$(ARCHS_ANDROID)</span>
  <span class="err">./copy-android.sh</span>

<span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">clean</span>
<span class="nl">clean</span><span class="o">:</span>
  <span class="err">rm</span> <span class="err">-rf</span> <span class="err">target</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>We of course need to create the <code class="language-plaintext highlighter-rouge">[copy-android.sh](http://copy-android.sh)</code> script (don’t forget to give permissions)</p>

    <div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#! /bin/bash
</span><span class="err">mkdir</span> <span class="err">-p</span> <span class="err">../android/app/src/main/jniLibs</span>
<span class="err">mkdir</span> <span class="err">-p</span> <span class="err">../android/app/src/main/jniLibs/x86</span>
<span class="err">mkdir</span> <span class="err">-p</span> <span class="err">../android/app/src/main/jniLibs/arm64-v8a</span>
<span class="err">mkdir</span> <span class="err">-p</span> <span class="err">../android/app/src/main/jniLibs/armeabi-v7a</span>
<span class="c"># missing arm-linux-androideabi here, don't know the name of the arch?
</span>
<span class="err">cp</span> <span class="err">./target/i686-linux-android/release/libmy_sdk.so</span> <span class="err">../android/app/src/main/jniLibs/x86/libmy_sdk.so</span>
<span class="err">cp</span> <span class="err">./target/aarch64-linux-android/release/libmy_sdk.so</span> <span class="err">../android/app/src/main/jniLibs/arm64-v8a/libmy_sdk.so</span>
<span class="err">cp</span> <span class="err">./target/arm-linux-androideabi/release/libmy_sdk.so</span> <span class="err">../android/app/src/main/jniLibs/armeabi-v7a/libmy_sdk.so</span>
<span class="c"># missing x86_64-linux-androideabi here, don't know the name of the arch?
</span>
<span class="err">echo</span> <span class="s2">"Dynamic libraries copied!"</span>
</code></pre></div>    </div>
  </li>
</ul>

<blockquote>
  <p>Another alternative and also if you are using JSI is using CMakeLists to declare your files as dependencies and or library, then it will automatically be included in the compilation process. You can see one example of this here:
<a href="https://github.com/serenity-kit/react-native-opaque/blob/main/android/CMakeLists.txt">https://github.com/serenity-kit/react-native-opaque/blob/main/android/CMakeLists.txt</a>
However loading .so libraries is a common practice in the Android world, so I think both are fine.</p>
</blockquote>

<ul>
  <li>
    <p>We can now create a RN Module (or JSI module) and simply load the library and call it (via JNI of course)</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.samplesdk</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.facebook.react.bridge.NativeModule</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.facebook.react.bridge.ReactApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.facebook.react.bridge.ReactContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.facebook.react.bridge.ReactContextBaseJavaModule</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.facebook.react.bridge.ReactMethod</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.facebook.react.util.RNLog</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BindingsModule</span> <span class="kd">extends</span> <span class="nc">ReactContextBaseJavaModule</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">"my_sdk"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nc">BindingsModule</span><span class="o">(</span><span class="nc">ReactApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Bindings"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@ReactMethod</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="nc">String</span> <span class="n">apiKey</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">RNLog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getReactApplicationContext</span><span class="o">(),</span> <span class="s">"BindingsModule.init() called with apiKey: "</span> <span class="o">+</span> <span class="n">apiKey</span> <span class="o">+</span> <span class="s">"calling rust"</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">helloWorld</span><span class="o">();</span>
        <span class="nc">RNLog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getReactApplicationContext</span><span class="o">(),</span> <span class="s">"Rust says: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">native</span> <span class="nc">String</span> <span class="nf">helloWorld</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[There are many talks and tutorials that go over the more advanced topics once people have integrated Rust into their projects, however, if you are like me and have no idea about how to build, link and include your Rust code, they really convey little information.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">React Native, how to set up fonts with a single canonical name</title><link href="https://ospfranco.com/post/2023/08/11/react-native,-how-to-set-up-fonts-with-a-single-canonical-name/" rel="alternate" type="text/html" title="React Native, how to set up fonts with a single canonical name" /><published>2023-08-11T15:00:00+02:00</published><updated>2023-08-11T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/11/react%20native,%20how%20to%20set%20up%20fonts%20with%20a%20single%20canonical%20name</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/11/react-native,-how-to-set-up-fonts-with-a-single-canonical-name/"><![CDATA[<p>Dealing with fonts in React Nativeis painful, iOS uses the canonical name, while android uses file names. This leads to most developers wrapping the <code class="language-plaintext highlighter-rouge">&lt;Text&gt;</code> component in some custom component that sets the <code class="language-plaintext highlighter-rouge">fontFamily</code> style in some logic to detect the correct name in iOS and Android. We can however fix this and use a single canonical name. Like this:</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">Text</span>
	<span class="na">style</span><span class="p">=</span><span class="si">{</span> <span class="p">{</span>
		<span class="na">fontFamily</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Raleway</span><span class="dl">'</span><span class="p">,</span>
		<span class="na">fontWeight</span><span class="p">:</span> <span class="dl">'</span><span class="s1">600</span><span class="dl">'</span>
	<span class="p">}</span><span class="si">}</span>
<span class="p">&gt;</span>
	Hello
<span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>iOS already takes the canonical name, but we need to help Android.</p>

<h1 id="download-the-fonts">Download the fonts</h1>

<p>Download your font family, you should get all the files in a folder (we will call ours <code class="language-plaintext highlighter-rouge">./raleway</code>):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>`Raleway-Thin.ttf` (100)
`Raleway-ThinItalic.ttf`
`Raleway-ExtraLight.ttf` (200)
`Raleway-ExtraLightItalic.ttf`
`Raleway-Light.ttf` (300)
`Raleway-LightItalic.ttf`
`Raleway-Regular.ttf` (400)
`Raleway-Italic.ttf`
`Raleway-Medium.ttf` (500)
`Raleway-MediumItalic.ttf`
`Raleway-SemiBold.ttf` (600)
`Raleway-SemiBoldItalic.ttf`
`Raleway-Bold.ttf` (700)
`Raleway-BoldItalic.ttf`
`Raleway-ExtraBold.ttf` (800)
`Raleway-ExtraBoldItalic.ttf`
`Raleway-Black.ttf` (900)
`Raleway-BlackItalic.ttf`
</code></pre></div></div>

<h3 id="find-the-font-family-name">Find the font family name</h3>

<blockquote>
  <p>You will need otfinfo installed in your system to perform this step. It is shipped with many Linux distributions. On MacOS, install it via <code class="language-plaintext highlighter-rouge">lcdf-typetools</code> brew package.</p>

</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>otfinfo <span class="nt">--family</span> Raleway-Regular.ttf
</code></pre></div></div>

<p>Should print “Raleway”. This value must be retained for the Android setup. This name will be used in React <code class="language-plaintext highlighter-rouge">fontFamily</code> style.</p>

<h1 id="android">Android</h1>

<p>For Android, we are going to use <a href="https://developer.android.com/guide/topics/ui/look-and-feel/fonts-in-xml">XML Fonts</a> to define variants of a base font family.</p>

<blockquote>
  <p>Remark: This procedure is available in React Native since commit fd6386a07eb75a8ec16b1384a3e5827dea520b64 (7 May 2019 ), with the addition of ReactFontManager::addCustomFont method.</p>

</blockquote>

<h3 id="1-copy-and-rename-assets-to-the-resource-font-folder">1. Copy and rename assets to the resource font folder</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>android/app/src/main/res/font
<span class="nb">cp</span> ./raleway/<span class="k">*</span>.ttf android/app/src/main/res/font
</code></pre></div></div>

<p>We must rename the font files following these rules to comply with Android asset names restrictions:</p>

<ul>
  <li>Replace <code class="language-plaintext highlighter-rouge">-</code> with <code class="language-plaintext highlighter-rouge">_</code>;</li>
  <li>Replace any uppercase letter with its lowercase counterpart.</li>
</ul>

<p>You can use the below bash script (make sure you give the font folder as first argument):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># fixfonts.sh</span>

<span class="nb">typeset </span><span class="nv">folder</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span><span class="k">if</span> <span class="o">[[</span> <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$folder</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$folder</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">pushd</span> <span class="s2">"</span><span class="nv">$folder</span><span class="s2">"</span><span class="p">;</span>
  <span class="k">for </span>file <span class="k">in</span> <span class="k">*</span>.ttf<span class="p">;</span> <span class="k">do
    </span><span class="nb">typeset </span><span class="nv">normalized</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">file</span><span class="p">//-/_</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span>
    <span class="nv">normalized</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">normalized</span><span class="p">,,</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span>
    <span class="nb">mv</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$normalized</span><span class="s2">"</span>  <span class="k">done
  </span><span class="nb">popd
</span><span class="k">fi</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./fixfonts.sh /path/to/root/FontDemo/android/app/src/main/res/font
</code></pre></div></div>

<h3 id="2-create-the-definition-file">2. Create the definition file</h3>

<p>Create the <code class="language-plaintext highlighter-rouge">android/app/src/main/res/font/raleway.xml</code> file with the below content. Basically, we must create one entry per <code class="language-plaintext highlighter-rouge">fontStyle</code> / <code class="language-plaintext highlighter-rouge">fontWeight</code> combination we wish to support, and register the corresponding asset name.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;font-family xmlns:app="http://schemas.android.com/apk/res-auto"&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="100" app:font="@font/raleway_thin" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="100" app:font="@font/raleway_thinitalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="200" app:font="@font/raleway_extralight" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="200" app:font="@font/raleway_extralightitalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="300" app:font="@font/raleway_light" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="300" app:font="@font/raleway_lightitalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="400" app:font="@font/raleway_regular" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="400" app:font="@font/raleway_italic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="500" app:font="@font/raleway_medium" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="500" app:font="@font/raleway_mediumitalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="600" app:font="@font/raleway_semibold" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="600" app:font="@font/raleway_semibolditalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="700" app:font="@font/raleway_bold" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="700" app:font="@font/raleway_bolditalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="800" app:font="@font/raleway_extrabold" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="800" app:font="@font/raleway_extrabolditalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="900" app:font="@font/raleway_black" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="900" app:font="@font/raleway_blackitalic"/&gt;
&lt;/font-family&gt;
</code></pre></div></div>

<h3 id="3-register-the-new-font">3. Register the new font</h3>

<p>In <code class="language-plaintext highlighter-rouge">android/app/src/main/java/com/fontdemo/MainApplication.java</code>, bind the font family name with the asset we just created inside <code class="language-plaintext highlighter-rouge">onCreate</code> method.</p>

<blockquote>
  <p>⚠️ If you are registering a different font, make sure you replace “Raleway” with the name found in the former step (find font family name).</p>

</blockquote>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">import com.facebook.react.ReactApplication;
</span> import com.facebook.react.ReactInstanceManager;
 import com.facebook.react.ReactNativeHost;
 import com.facebook.react.ReactPackage;
<span class="gi">+import com.facebook.react.views.text.ReactFontManager;
</span> import com.facebook.soloader.SoLoader;
 import java.lang.reflect.InvocationTargetException;
 import java.util.List;

public class MainApplication extends Application implements ReactApplication {
   @Override
   public void onCreate() {
     super.onCreate();
<span class="gi">+    [ReactFontManager.getInstance().addCustomFont(this, "Raleway", R.font.raleway);](https://www.notion.so/Locio-6a09ff579fbc4cb6aaf5cff020ef8df0?pvs=21)
</span>     SoLoader.init(this, /* native exopackage */ false);
     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
   }

</code></pre></div></div>

<h1 id="ios">iOS</h1>

<p>On iOS, things will get much easier. We will basically just need to use React Native asset link functionality. This method requires that we use the font family name retrieved in the first step as <code class="language-plaintext highlighter-rouge">fontFamily</code> style attribute.</p>

<h3 id="copy-font-files-to-assets-folder">Copy font files to assets folder</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir -p assets/fonts
cp /tmp/raleway/*.ttf assets/fonts
</code></pre></div></div>

<h3 id="addreact-nativeconfigjs">Add <code class="language-plaintext highlighter-rouge">react-native.config.js</code></h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>module.exports = {
  project: {
    ios: {},
    android: {},
  },
  assets: ['./assets/fonts'],
};
</code></pre></div></div>

<h3 id="link">Link</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx react-native-asset
</code></pre></div></div>

<p>You can remove assets for android generated with this command, since we are using the XML Font method. Otherwise, they would be included twice in the app bundle!</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-rf</span> android/app/src/main/assets/fonts
</code></pre></div></div>

<h1 id="setting-a-default-global-font">Setting a default global font</h1>

<p>After the fonts are installed one can simply define a global default font by installing <code class="language-plaintext highlighter-rouge">react-native-simple-default-props</code>:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">yarn add react-native-simple-default-props
</span></code></pre></div></div>

<p>Then on app start:</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">setDefaultProps</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-native-simple-default-props</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">setDefaultProps</span><span class="p">(</span><span class="nx">Text</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">style</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">fontFamily</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Raleway</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#0F0F26</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Now you can simply use any <code class="language-plaintext highlighter-rouge">&lt;Text/&gt;</code>component without the need for any semantic wrapper!</p>

<h1 id="credits">Credits</h1>

<p>Credit to <a href="https://github.com/jsamr/react-native-font-demo#goal">https://github.com/jsamr/react-native-font-demo</a> for finding the xml fonts setup.</p>

<p><a href="https://github.com/dioi2000/react-native-simple-default-props#readme">https://github.com/dioi2000/react-native-simple-default-props</a> for the easy setup of default styles.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Dealing with fonts in React Nativeis painful, iOS uses the canonical name, while android uses file names. This leads to most developers wrapping the &lt;Text&gt; component in some custom component that sets the fontFamily style in some logic to detect the correct name in iOS and Android. We can however fix this and use a single canonical name. Like this:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">React Native, Android emulator prevent janky bluetooth output</title><link href="https://ospfranco.com/post/2023/08/11/react-native,-android-audio/" rel="alternate" type="text/html" title="React Native, Android emulator prevent janky bluetooth output" /><published>2023-08-11T15:00:00+02:00</published><updated>2023-08-11T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/11/react%20native,%20android%20audio</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/11/react-native,-android-audio/"><![CDATA[<p>When the Android emulator starts it causes microphones to start recording, if you are using Bluetooth headphones, this causes a significant drop in quality.</p>

<p>You can disable audio input permanently on the emulator by editing:</p>

<p><code class="language-plaintext highlighter-rouge">~/.android/avd/&lt;emulator-device-name&gt;.avd/config.ini</code></p>

<p>Change the following lines:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hw.audioInput = no
hw.audioOutput = no
</code></pre></div></div>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[When the Android emulator starts it causes microphones to start recording, if you are using Bluetooth headphones, this causes a significant drop in quality.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">React Native, hot module hooks</title><link href="https://ospfranco.com/post/2023/08/11/react-native-hot-module-hooks/" rel="alternate" type="text/html" title="React Native, hot module hooks" /><published>2023-08-11T15:00:00+02:00</published><updated>2023-08-11T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/11/react%20native%20hot%20module%20hooks</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/11/react-native-hot-module-hooks/"><![CDATA[<p>In some cases you might want to clear listeners or state when a fast-refresh/hot-reload cycle happens. You can do so by hooking up to the hot module:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span><span class="p">.</span><span class="nx">hot</span><span class="p">?.</span><span class="nx">accept</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="nx">store</span><span class="p">.</span><span class="nx">cleanUp</span><span class="p">()</span>
<span class="p">})</span>
</code></pre></div></div>

<p>This will only be called once the new module is mounted, this means any reference the previous in-memory module had, will not be there. Sometimes you really need a reference to an old object to clean it, you can use the counter part <code class="language-plaintext highlighter-rouge">dispose</code>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span><span class="p">.</span><span class="nx">hot</span><span class="p">?.</span><span class="nx">dispose</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="nx">myVarThatHoldsARef</span><span class="p">.</span><span class="nx">reset</span><span class="p">()</span>	
<span class="p">});</span>
</code></pre></div></div>

<p>Take note of the optional chaining operator, when compiling the app on production the <code class="language-plaintext highlighter-rouge">hot</code> module will not be there, causing a crash if trying to be called.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[In some cases you might want to clear listeners or state when a fast-refresh/hot-reload cycle happens. You can do so by hooking up to the hot module:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">React Native, reduce Sentry’s bundle size on Android</title><link href="https://ospfranco.com/post/2023/08/11/react-native,-reduce-sentry's-bundle-size-on-android/" rel="alternate" type="text/html" title="React Native, reduce Sentry’s bundle size on Android" /><published>2023-08-11T15:00:00+02:00</published><updated>2023-08-11T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/11/react%20native,%20reduce%20sentry&apos;s%20bundle%20size%20on%20android</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/11/react-native,-reduce-sentry&apos;s-bundle-size-on-android/"><![CDATA[<p>I convinced my team to switch from Crashlytics to <code class="language-plaintext highlighter-rouge">Sentry</code>. Sentry is just a more complete tool, however, due to our target audience and just the android ecosystem in general, we are very careful regarding our app’s apk size. Every added mb has a negative impact on how many people download/sign-up in our app. After adding Sentry our app grew by almost 2 megabytes, that’s just too much.</p>

<p>I spent a bit of time trying to see if there was anything that could be done about it. Eventually reading the issues on the <code class="language-plaintext highlighter-rouge">sentry-android</code> repo (which is a direct dependency of the react-native version of the Sentry library), some people mentioned that NDK support (the framework to write C/C++ in android) seems to add a lot of unnecessary files.</p>

<p>The documentation directly mentions that if you don’t need NDK support, you can switch your dependency from <code class="language-plaintext highlighter-rouge">sentry-android</code> to <code class="language-plaintext highlighter-rouge">sentry-android-core</code>.</p>

<p>So I opened to <code class="language-plaintext highlighter-rouge">node_modules/@sentry/react-native/android/build.gradle</code> and changed the dependency there from <code class="language-plaintext highlighter-rouge">sentry-android</code> to <code class="language-plaintext highlighter-rouge">sentry-android-core</code>.</p>

<p>Then save a patch with <a href="https://github.com/ds300/patch-package">patch-package</a>.</p>

<p>Building the app again (if you are doing local builds, you might want to run <code class="language-plaintext highlighter-rouge">./gradlew clean</code> on your android folder to get rid of any caches), <strong>yields a ~1.2 megabytes of the size of the app</strong>.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[I convinced my team to switch from Crashlytics to Sentry. Sentry is just a more complete tool, however, due to our target audience and just the android ecosystem in general, we are very careful regarding our app’s apk size. Every added mb has a negative impact on how many people download/sign-up in our app. After adding Sentry our app grew by almost 2 megabytes, that’s just too much.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>