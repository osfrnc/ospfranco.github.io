<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://ospfranco.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ospfranco.com/" rel="alternate" type="text/html" /><updated>2023-08-11T10:03:48+02:00</updated><id>https://ospfranco.com/feed.xml</id><title type="html">Oscar Franco</title><author><name>Oscar Franco</name></author><entry><title type="html">React Native, Rust step-by-step integration guide</title><link href="https://ospfranco.com/post/2023/08/11/react-native,-rust-step-by-step-integration-guide/" rel="alternate" type="text/html" title="React Native, Rust step-by-step integration guide" /><published>2023-08-11T15:00:00+02:00</published><updated>2023-08-11T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/11/react%20native,%20rust%20step-by-step%20integration%20guide</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/11/react-native,-rust-step-by-step-integration-guide/"><![CDATA[<p>There are many talks and tutorials that go over the more advanced topics once people have integrated Rust into their projects, however, if you are like me and have no idea about how to build, link and include your Rust code, they really convey little information.</p>

<p>Here is a more step by step tutorial, but in the video form I go over the concepts that actually make this work, so you can adjust and understand the tooling behind and you can maintain your integration.</p>

<iframe class="w-full my-10 h-96" src="https://www.youtube.com/watch?v=PPU4Hrz4J_s" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<blockquote>
  <p>I’m currently looking for freelance projects, if your team needs a RN developer or some consulting, send me an email at ospfranco@gmail.com</p>
</blockquote>

<h1 id="basic-setup-and-ios">Basic Setup and iOS</h1>

<ul>
  <li>Set up Rust compiler</li>
  <li>Set up cross compilation targets, 32 bits targets are no longer supported, so we will only add those usable in 2023.
    <ul>
      <li>32bit targets have been deprecated by the rust team, no longer available on the stable channel</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  rustup target add x86_64-apple-ios
  rustup target add aarch64-apple-ios
  rustup target add aarch64-apple-ios-sim
    
  rustup target add x86_64-linux-android
  rustup target add aarch64-linux-android
  rustup target add armv7-linux-androideabi
  rustup target add i686-linux-android
</code></pre></div>    </div>
  </li>
  <li>
    <p>Next we will create the folder where we will put all of our Rust code and infra scripts. In my case I will call it <code class="language-plaintext highlighter-rouge">my_sdk</code></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cargo new <span class="o">[</span>YOUR_LIBRARY_NAME]
</code></pre></div>    </div>
  </li>
  <li>Change name of <code class="language-plaintext highlighter-rouge">main.rs</code> to <code class="language-plaintext highlighter-rouge">lib.rs</code></li>
  <li>Add your API code on lib.rs</li>
  <li>Add cbindgen crate (alternative is cxx.rs) <code class="language-plaintext highlighter-rouge">cargo install cbindgen</code></li>
  <li>Create a <code class="language-plaintext highlighter-rouge">cbindgen.toml</code> file, it is fine if it is empty.</li>
  <li><code class="language-plaintext highlighter-rouge">cbindgen --config cbindgen.toml --crate my_sdk --output include/my_sdk.h</code></li>
  <li>
    <p>Modify toml to compile as static library for iOS and a dynamic library with JNI linked for Android</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">[</span>package]
  name <span class="o">=</span> <span class="s2">"SDK"</span>
  version <span class="o">=</span> <span class="s2">"0.1.0"</span>
  edition <span class="o">=</span> <span class="s2">"2021"</span>
    
  <span class="o">[</span>lib]
  name <span class="o">=</span> <span class="s2">"SDK"</span>
  crate-type <span class="o">=</span> <span class="o">[</span><span class="s2">"staticlib"</span>, <span class="s2">"cdylib"</span><span class="o">]</span>
    
  <span class="o">[</span>dependencies]
  libc <span class="o">=</span> <span class="s2">"0.2.80"</span>
  jni <span class="o">=</span> <span class="s2">"0.17.0"</span>
    
  <span class="o">[</span>features]
  default <span class="o">=</span> <span class="o">[</span><span class="s2">"jni"</span><span class="o">]</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Setup Makefile</p>

    <div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">ARCHS_IOS</span> <span class="o">=</span> x86_64-apple-ios aarch64-apple-ios aarch64-apple-ios-sim
  <span class="nv">ARCHS_ANDROID</span> <span class="o">=</span> aarch64-linux-android armv7-linux-androideabi i686-linux-android
  <span class="nv">LIB</span> <span class="o">=</span> libmy_sdk.a
  <span class="nv">XCFRAMEWORK</span> <span class="o">=</span> MySdk.xcframework
    
  <span class="nl">all</span><span class="o">:</span> <span class="nf">ios android</span>
    
  <span class="nl">ios</span><span class="o">:</span> <span class="nf">$(XCFRAMEWORK)</span>
    
  <span class="nl">android</span><span class="o">:</span> <span class="nf">$(ARCHS_ANDROID)</span>
  	<span class="err">sh</span> <span class="err">copy_android.sh</span>
    
  <span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">$(ARCHS_IOS)</span>
  <span class="nl">$(ARCHS_IOS)</span><span class="o">:</span> <span class="nf">%:</span>
  	<span class="err">cargo</span> <span class="err">build</span> <span class="err">--target</span> <span class="err">$@</span> <span class="err">--release</span>
    
  <span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">$(ARCHS_ANDROID)</span>
  <span class="nl">$(ARCHS_ANDROID)</span><span class="o">:</span> <span class="nf">%:</span>
  	<span class="err">cargo</span> <span class="err">build</span> <span class="err">--target</span> <span class="err">$@</span> <span class="err">--release</span>
    
  <span class="nl">$(XCFRAMEWORK)</span><span class="o">:</span> <span class="nf">$(ARCHS_IOS)</span>
  	<span class="err">lipo</span> <span class="err">-create</span> <span class="err">$(wildcard</span> <span class="err">target/x86_64-apple-ios/release/$(LIB))</span> <span class="err">$(wildcard</span> <span class="err">target/aarch64-apple-ios-sim/release/$(LIB))</span> <span class="err">-output</span> <span class="err">simulator_fat/libmy_sdk.a</span>
  	<span class="err">xcodebuild</span> <span class="err">-create-xcframework</span> <span class="err">-library</span> <span class="err">$(wildcard</span> <span class="err">target/aarch64-apple-ios/release/$(LIB))</span> <span class="err">-headers</span> <span class="k">include</span><span class="sx"> -library simulator_fat/libmy_sdk.a -headers include -output $@</span>
</code></pre></div>    </div>
  </li>
  <li>Add generated <code class="language-plaintext highlighter-rouge">.xcframework</code> to Xcode (dragging and dropping is the easiest)
    <ul>
      <li>On the project properties mark the xcframework as embed and sign</li>
    </ul>
  </li>
  <li>You should now be able to simply import the header file and call the rust function from any obj-c++ file</li>
</ul>

<h1 id="android">Android</h1>

<ul>
  <li>
    <p>On cargo.toml add the <code class="language-plaintext highlighter-rouge">cdylib</code> crate-type, plus the features and make it optional so that it doesn’t intefere with iOS</p>

    <div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">[package]</span>
<span class="nv">name</span> <span class="o">=</span> <span class="s2">"my_sdk"</span>
<span class="nv">version</span> <span class="o">=</span> <span class="s2">"0.1.0"</span>
<span class="nv">edition</span> <span class="o">=</span> <span class="s2">"2021"</span>

<span class="err">[lib]</span>
<span class="nv">name</span> <span class="o">=</span> <span class="s2">"my_sdk"</span>
<span class="nv">crate-type</span> <span class="o">=</span> <span class="o">[</span><span class="s2">"staticlib"</span>, <span class="s2">"cdylib"</span><span class="o">]</span>

<span class="err">[dependencies]</span>
<span class="nv">libc</span> <span class="o">=</span> <span class="s2">"0.2.80"</span>
<span class="nv">jni</span> <span class="o">=</span> <span class="o">{</span> version <span class="o">=</span> <span class="s2">"0.18.0"</span>, optional <span class="o">=</span> <span class="nb">true</span>, default-features <span class="o">=</span> <span class="nb">false</span> <span class="o">}</span>

<span class="err">[features]</span>
<span class="nv">default</span> <span class="o">=</span> <span class="o">[</span><span class="s2">"jni"</span><span class="o">]</span>
</code></pre></div>    </div>
  </li>
  <li>Android unfortunately requires its own linker, some of the old tutorials mention using a script inside the sdk to generate a standalone toolchain, on the latest versions of the Android SDK there are pre-compiled versions for windows, linux and mac, on my machine I can find them on <code class="language-plaintext highlighter-rouge">~/Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin</code>. Take note of the version since version 24 of the Android SDK is the one that supports m1 machines.</li>
  <li>
    <p>What we need to do then is tell the Rust compiler to use some of this binaries to compile our rust code, to do this we will create a cargo-config.toml file on our folder, but then we need to copy this into our home folder in the machine since this is a global configuration file:</p>

    <div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># template file on &lt;project&gt;/my_sdk/cargo-config.toml</span>
<span class="c"># All paths are relative to the user home folder</span>
<span class="nn">[target.aarch64-linux-android]</span>
<span class="py">ar</span> <span class="p">=</span> <span class="s">"Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin/aarch64-linux-android-ar"</span>
<span class="py">linker</span> <span class="p">=</span> <span class="s">"Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin/aarch64-linux-android31-clang"</span>

<span class="c"># Take note, the target the binary names do not match on this case</span>
<span class="nn">[target.arm-linux-androideabi]</span>
<span class="py">ar</span> <span class="p">=</span> <span class="s">"Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin/armv7a-linux-androideabi-ar"</span>
<span class="py">linker</span> <span class="p">=</span> <span class="s">"Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin/armv7a-linux-androideabi31-clang"</span>

<span class="nn">[target.i686-linux-android]</span>
<span class="py">ar</span> <span class="p">=</span> <span class="s">"Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin/i686-linux-android-ar"</span>
<span class="py">linker</span> <span class="p">=</span> <span class="s">"Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin/i686-linux-android31-clang"</span>

<span class="nn">[target.x86_64-linux-android]</span>
<span class="py">ar</span> <span class="p">=</span> <span class="s">"Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin/x86_64-linux-android-ar"</span>
<span class="py">linker</span> <span class="p">=</span> <span class="s">"Library/Android/sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/darwin-x86_64/bin/x86_64-linux-android31-clang"</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Once you have this file, copy it to the home folder via</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp </span>cargo-config.toml ~/.cargo/config
</code></pre></div>    </div>
  </li>
  <li>
    <p>Now we actually have to to compile Rust for android, unlike for iOS, Android requires more flags, instead of doing this via make file a bash script is a little simpler. First modify the Makefile and then create a new <code class="language-plaintext highlighter-rouge">build-android.sh</code> script (don’t forget to give it permissions).</p>

    <div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">ARCHS_IOS</span> <span class="o">=</span> x86_64-apple-ios aarch64-apple-ios aarch64-apple-ios-sim
<span class="nv">ARCHS_ANDROID</span> <span class="o">=</span> i686-linux-android x86_64-linux-android aarch64-linux-android arm-linux-androideabi
<span class="nv">LIB</span> <span class="o">=</span> libmy_sdk.a
<span class="nv">XCFRAMEWORK</span> <span class="o">=</span> MySdk.xcframework
  
<span class="nl">all</span><span class="o">:</span> <span class="nf">ios android</span>
  
<span class="nl">ios</span><span class="o">:</span> <span class="nf">$(XCFRAMEWORK)</span>
  
<span class="nl">android</span><span class="o">:</span> <span class="nf">$(ARCHS_ANDROID)</span>
  
<span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">$(ARCHS_IOS)</span>
<span class="nl">$(ARCHS_IOS)</span><span class="o">:</span> <span class="nf">%:</span>
  <span class="err">cargo</span> <span class="err">build</span> <span class="err">--target</span> <span class="err">$@</span> <span class="err">--release</span>
  
<span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">$(ARCHS_ANDROID) </span>
<span class="nl">$(ARCHS_ANDROID)</span><span class="o">:</span> <span class="nf">%:</span>
  <span class="err">./build-android.sh</span> <span class="err">$@</span> <span class="c"># Change this!!!!!!!!!
</span>  
<span class="nl">$(XCFRAMEWORK)</span><span class="o">:</span> <span class="nf">$(ARCHS_IOS)</span>
  <span class="err">lipo</span> <span class="err">-create</span> <span class="err">$(wildcard</span> <span class="err">target/x86_64-apple-ios/release/$(LIB))</span> <span class="err">$(wildcard</span> <span class="err">target/aarch64-apple-ios-sim/release/$(LIB))</span> <span class="err">-output</span> <span class="err">simulator_fat/libmy_sdk.a</span>
  <span class="err">xcodebuild</span> <span class="err">-create-xcframework</span> <span class="err">-library</span> <span class="err">$(wildcard</span> <span class="err">target/aarch64-apple-ios/release/$(LIB))</span> <span class="err">-headers</span> <span class="k">include</span><span class="sx"> -library simulator_fat/libmy_sdk.a -headers include -output $@</span>
</code></pre></div>    </div>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nv">TARGET</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>

<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$TARGET</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">""</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"missing argument TARGET"</span>
    <span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> TARGET"</span>
    <span class="nb">exit </span>1
<span class="k">fi

</span><span class="nv">NDK_TARGET</span><span class="o">=</span><span class="nv">$TARGET</span>

<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$TARGET</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"arm-linux-androideabi"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nv">NDK_TARGET</span><span class="o">=</span><span class="s2">"armv7a-linux-androideabi"</span>
<span class="k">fi

</span><span class="nv">API_VERSION</span><span class="o">=</span><span class="s2">"21"</span>
<span class="nv">NDK_VERSION</span><span class="o">=</span><span class="s2">"24.0.8215888"</span>
<span class="nv">NDK_HOST</span><span class="o">=</span><span class="s2">"darwin-x86_64"</span>

<span class="c"># needed so we can overwrite it in the CI</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$NDK</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
  </span><span class="nv">NDK</span><span class="o">=</span><span class="s2">"</span><span class="nv">$ANDROID_HOME</span><span class="s2">/ndk/</span><span class="nv">$NDK_VERSION</span><span class="s2">"</span>
<span class="k">fi

</span><span class="nv">TOOLS</span><span class="o">=</span><span class="s2">"</span><span class="nv">$NDK</span><span class="s2">/toolchains/llvm/prebuilt/</span><span class="nv">$NDK_HOST</span><span class="s2">"</span>

<span class="nv">AR</span><span class="o">=</span><span class="nv">$TOOLS</span>/bin/llvm-ar <span class="se">\</span>
<span class="nv">CXX</span><span class="o">=</span><span class="nv">$TOOLS</span>/bin/<span class="k">${</span><span class="nv">NDK_TARGET</span><span class="k">}${</span><span class="nv">API_VERSION</span><span class="k">}</span><span class="nt">-clang</span>++ <span class="se">\</span>
<span class="nv">RANLIB</span><span class="o">=</span><span class="nv">$TOOLS</span>/bin/llvm-ranlib <span class="se">\</span>
<span class="nv">CXXFLAGS</span><span class="o">=</span><span class="s2">"--target=</span><span class="nv">$NDK_TARGET</span><span class="s2">"</span> <span class="se">\</span>
cargo build <span class="nt">--target</span> <span class="nv">$TARGET</span> <span class="nt">--release</span> <span class="nv">$EXTRA_ARGS</span>
</code></pre></div>    </div>
  </li>
</ul>

<blockquote>
  <p>This method of compilation was developed by <strong>Nik Graf</strong> and his team at <strong>Serenity Notes</strong>, shot out to them.
<a href="https://www.serenity.re/en/notes">https://serenity.re</a></p>
</blockquote>

<ul>
  <li>
    <p>Ask you can see you need to have set the <code class="language-plaintext highlighter-rouge">$ANDROID_HOME</code> environment variable (I have it on my <code class="language-plaintext highlighter-rouge">.zshrc</code>) you can modify the <code class="language-plaintext highlighter-rouge">API_VERSION</code> and the <code class="language-plaintext highlighter-rouge">NDK_VERSION</code> to the ones you are using and have installed on your machine.</p>
  </li>
  <li>
    <p>We will still not be able to call our Rust code from Java, because we need to go through the JNI and the JNI is very picky regarding names, we need to create specific binding for Android, on the <code class="language-plaintext highlighter-rouge">[lib.rs](http://lib.rs)</code> and the following block</p>
  </li>
  <li>
    <p>We can finally call <code class="language-plaintext highlighter-rouge">make android</code> and the library will be created for us</p>

    <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// On Android function names need to follow the JNI convention</span>
  <span class="k">pub</span> <span class="k">mod</span> <span class="n">android</span> <span class="p">{</span>
    <span class="k">extern</span> <span class="k">crate</span> <span class="n">jni</span><span class="p">;</span>
    
    <span class="k">use</span> <span class="k">self</span><span class="p">::</span><span class="nn">jni</span><span class="p">::</span><span class="n">JNIEnv</span><span class="p">;</span>
    <span class="k">use</span> <span class="k">self</span><span class="p">::</span><span class="nn">jni</span><span class="p">::</span><span class="nn">objects</span><span class="p">::</span><span class="n">JClass</span><span class="p">;</span>
    <span class="k">use</span> <span class="k">self</span><span class="p">::</span><span class="nn">jni</span><span class="p">::</span><span class="nn">sys</span><span class="p">::</span><span class="n">jstring</span><span class="p">;</span>
    
    <span class="nd">#[no_mangle]</span>
    <span class="k">pub</span> <span class="k">unsafe</span> <span class="k">extern</span> <span class="k">fn</span> <span class="nf">Java_com_samplesdk_BindingsModule_helloWorld</span><span class="p">(</span><span class="n">env</span><span class="p">:</span> <span class="n">JNIEnv</span><span class="p">,</span> <span class="n">_</span><span class="p">:</span> <span class="n">JClass</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">jstring</span> <span class="p">{</span>
      <span class="k">let</span> <span class="n">output</span> <span class="o">=</span> <span class="n">env</span><span class="nf">.new_string</span><span class="p">(</span><span class="s">"Hello from Rust!"</span><span class="p">)</span><span class="nf">.expect</span><span class="p">(</span><span class="s">"Couldn't create java string!"</span><span class="p">);</span>
      <span class="n">output</span><span class="nf">.into_inner</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>We now need to somehow include this .so files into the Android compilation, the easiest way is to copy them inside of the <code class="language-plaintext highlighter-rouge">Android/app/src</code> folder and then Gradle should automatically pick them up and include them in the compilation process. Let’s update our make file to include a new script that will copy everything once it is compiled:</p>

    <div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">ARCHS_IOS</span> <span class="o">=</span> x86_64-apple-ios aarch64-apple-ios aarch64-apple-ios-sim
<span class="nv">ARCHS_ANDROID</span> <span class="o">=</span> i686-linux-android x86_64-linux-android aarch64-linux-android arm-linux-androideabi
<span class="nv">LIB</span> <span class="o">=</span> libmy_sdk.a
<span class="nv">XCFRAMEWORK</span> <span class="o">=</span> MySdk.xcframework

<span class="nl">all</span><span class="o">:</span> <span class="nf">ios android</span>

<span class="nl">ios</span><span class="o">:</span> <span class="nf">$(XCFRAMEWORK)</span>

<span class="nl">android</span><span class="o">:</span> <span class="nf">GENERATE_ANDROID</span>

<span class="c"># PHONY keyword on make means this is not a file, just an identifier for a target
</span><span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">$(ARCHS_IOS)</span>
<span class="nl">$(ARCHS_IOS)</span><span class="o">:</span> <span class="nf">%:</span>
  <span class="err">cargo</span> <span class="err">build</span> <span class="err">--target</span> <span class="err">$@</span> <span class="err">--release</span>

<span class="nl">$(XCFRAMEWORK)</span><span class="o">:</span> <span class="nf">$(ARCHS_IOS)</span>
  <span class="err">lipo</span> <span class="err">-create</span> <span class="err">$(wildcard</span> <span class="err">target/x86_64-apple-ios/release/$(LIB))</span> <span class="err">$(wildcard</span> <span class="err">target/aarch64-apple-ios-sim/release/$(LIB))</span> <span class="err">-output</span> <span class="err">simulator_fat/libmy_sdk.a</span>
  <span class="err">xcodebuild</span> <span class="err">-create-xcframework</span> <span class="err">-library</span> <span class="err">$(wildcard</span> <span class="err">target/aarch64-apple-ios/release/$(LIB))</span> <span class="err">-headers</span> <span class="k">include</span><span class="sx"> -library simulator_fat/libmy_sdk.a -headers include -output $@</span>

<span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">$(ARCHS_ANDROID)</span>
<span class="nl">$(ARCHS_ANDROID)</span><span class="o">:</span> <span class="nf">%:</span>
  <span class="err">./build-android.sh</span> <span class="err">$@</span>

<span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">GENERATE_ANDROID</span>
<span class="nl">GENERATE_ANDROID</span><span class="o">:</span> <span class="nf">$(ARCHS_ANDROID)</span>
  <span class="err">./copy-android.sh</span>

<span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">clean</span>
<span class="nl">clean</span><span class="o">:</span>
  <span class="err">rm</span> <span class="err">-rf</span> <span class="err">target</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>We of course need to create the <code class="language-plaintext highlighter-rouge">[copy-android.sh](http://copy-android.sh)</code> script (don’t forget to give permissions)</p>

    <div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#! /bin/bash
</span><span class="err">mkdir</span> <span class="err">-p</span> <span class="err">../android/app/src/main/jniLibs</span>
<span class="err">mkdir</span> <span class="err">-p</span> <span class="err">../android/app/src/main/jniLibs/x86</span>
<span class="err">mkdir</span> <span class="err">-p</span> <span class="err">../android/app/src/main/jniLibs/arm64-v8a</span>
<span class="err">mkdir</span> <span class="err">-p</span> <span class="err">../android/app/src/main/jniLibs/armeabi-v7a</span>
<span class="c"># missing arm-linux-androideabi here, don't know the name of the arch?
</span>
<span class="err">cp</span> <span class="err">./target/i686-linux-android/release/libmy_sdk.so</span> <span class="err">../android/app/src/main/jniLibs/x86/libmy_sdk.so</span>
<span class="err">cp</span> <span class="err">./target/aarch64-linux-android/release/libmy_sdk.so</span> <span class="err">../android/app/src/main/jniLibs/arm64-v8a/libmy_sdk.so</span>
<span class="err">cp</span> <span class="err">./target/arm-linux-androideabi/release/libmy_sdk.so</span> <span class="err">../android/app/src/main/jniLibs/armeabi-v7a/libmy_sdk.so</span>
<span class="c"># missing x86_64-linux-androideabi here, don't know the name of the arch?
</span>
<span class="err">echo</span> <span class="s2">"Dynamic libraries copied!"</span>
</code></pre></div>    </div>
  </li>
</ul>

<aside>
💡 Another alternative and also if you are using JSI is using CMakeLists to declare your files as dependencies and or library, then it will automatically be included in the compilation process. You can see one example of this here:

[https://github.com/serenity-kit/react-native-opaque/blob/main/android/CMakeLists.txt](https://github.com/serenity-kit/react-native-opaque/blob/main/android/CMakeLists.txt)

However loading .so libraries is a common practice in the Android world, so I think both are fine.

</aside>

<ul>
  <li>
    <p>We can now create a RN Module (or JSI module) and simply load the library and call it (via JNI of course)</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.samplesdk</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.facebook.react.bridge.NativeModule</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.facebook.react.bridge.ReactApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.facebook.react.bridge.ReactContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.facebook.react.bridge.ReactContextBaseJavaModule</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.facebook.react.bridge.ReactMethod</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.facebook.react.util.RNLog</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BindingsModule</span> <span class="kd">extends</span> <span class="nc">ReactContextBaseJavaModule</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">"my_sdk"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nc">BindingsModule</span><span class="o">(</span><span class="nc">ReactApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Bindings"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@ReactMethod</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="nc">String</span> <span class="n">apiKey</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">RNLog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getReactApplicationContext</span><span class="o">(),</span> <span class="s">"BindingsModule.init() called with apiKey: "</span> <span class="o">+</span> <span class="n">apiKey</span> <span class="o">+</span> <span class="s">"calling rust"</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">helloWorld</span><span class="o">();</span>
        <span class="nc">RNLog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getReactApplicationContext</span><span class="o">(),</span> <span class="s">"Rust says: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">native</span> <span class="nc">String</span> <span class="nf">helloWorld</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[There are many talks and tutorials that go over the more advanced topics once people have integrated Rust into their projects, however, if you are like me and have no idea about how to build, link and include your Rust code, they really convey little information.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">React Native hot module hooks</title><link href="https://ospfranco.com/post/2023/08/11/react-native-hot-module-hooks/" rel="alternate" type="text/html" title="React Native hot module hooks" /><published>2023-08-11T15:00:00+02:00</published><updated>2023-08-11T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/11/react%20native%20hot%20module%20hooks</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/11/react-native-hot-module-hooks/"><![CDATA[<p>In some cases you might want to clear listeners or state when a fast-refresh/hot-reload cycle happens. You can do so by hooking up to the hot module:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span><span class="p">.</span><span class="nx">hot</span><span class="p">?.</span><span class="nx">accept</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="nx">store</span><span class="p">.</span><span class="nx">cleanUp</span><span class="p">()</span>
<span class="p">})</span>
</code></pre></div></div>

<p>This will only be called once the new module is mounted, this means any reference the previous in-memory module had, will not be there. Sometimes you really need a reference to an old object to clean it, you can use the counter part <code class="language-plaintext highlighter-rouge">dispose</code>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">module</span><span class="p">.</span><span class="nx">hot</span><span class="p">?.</span><span class="nx">dispose</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="nx">myVarThatHoldsARef</span><span class="p">.</span><span class="nx">reset</span><span class="p">()</span>	
<span class="p">});</span>
</code></pre></div></div>

<p>Take note of the optional chaining operator, when compiling the app on production the <code class="language-plaintext highlighter-rouge">hot</code> module will not be there, causing a crash if trying to be called.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[In some cases you might want to clear listeners or state when a fast-refresh/hot-reload cycle happens. You can do so by hooking up to the hot module:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">React Native, how to set up fonts with a single canonical name</title><link href="https://ospfranco.com/post/2023/08/11/react-native,-how-to-set-up-fonts-with-a-single-canonical-name/" rel="alternate" type="text/html" title="React Native, how to set up fonts with a single canonical name" /><published>2023-08-11T15:00:00+02:00</published><updated>2023-08-11T15:00:00+02:00</updated><id>https://ospfranco.com/post/2023/08/11/react%20native,%20how%20to%20set%20up%20fonts%20with%20a%20single%20canonical%20name</id><content type="html" xml:base="https://ospfranco.com/post/2023/08/11/react-native,-how-to-set-up-fonts-with-a-single-canonical-name/"><![CDATA[<p>Dealing with fonts in React Nativeis painful, iOS uses the canonical name, while android uses file names. This leads to most developers wrapping the <code class="language-plaintext highlighter-rouge">&lt;Text&gt;</code> component in some custom component that sets the <code class="language-plaintext highlighter-rouge">fontFamily</code> style in some logic to detect the correct name in iOS and Android. We can however fix this and use a single canonical name. Like this:</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">Text</span>
	<span class="na">style</span><span class="p">=</span><span class="si">{</span> <span class="p">{</span>
		<span class="na">fontFamily</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Raleway</span><span class="dl">'</span><span class="p">,</span>
		<span class="na">fontWeight</span><span class="p">:</span> <span class="dl">'</span><span class="s1">600</span><span class="dl">'</span>
	<span class="p">}</span><span class="si">}</span>
<span class="p">&gt;</span>
	Hello
<span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>iOS already takes the canonical name, but we need to help Android.</p>

<h1 id="download-the-fonts">Download the fonts</h1>

<p>Download your font family, you should get all the files in a folder (we will call ours <code class="language-plaintext highlighter-rouge">./raleway</code>):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>`Raleway-Thin.ttf` (100)
`Raleway-ThinItalic.ttf`
`Raleway-ExtraLight.ttf` (200)
`Raleway-ExtraLightItalic.ttf`
`Raleway-Light.ttf` (300)
`Raleway-LightItalic.ttf`
`Raleway-Regular.ttf` (400)
`Raleway-Italic.ttf`
`Raleway-Medium.ttf` (500)
`Raleway-MediumItalic.ttf`
`Raleway-SemiBold.ttf` (600)
`Raleway-SemiBoldItalic.ttf`
`Raleway-Bold.ttf` (700)
`Raleway-BoldItalic.ttf`
`Raleway-ExtraBold.ttf` (800)
`Raleway-ExtraBoldItalic.ttf`
`Raleway-Black.ttf` (900)
`Raleway-BlackItalic.ttf`
</code></pre></div></div>

<h3 id="find-the-font-family-name">Find the font family name</h3>

<blockquote>
  <p>You will need otfinfo installed in your system to perform this step. It is shipped with many Linux distributions. On MacOS, install it via <code class="language-plaintext highlighter-rouge">lcdf-typetools</code> brew package.</p>

</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>otfinfo <span class="nt">--family</span> Raleway-Regular.ttf
</code></pre></div></div>

<p>Should print “Raleway”. This value must be retained for the Android setup. This name will be used in React <code class="language-plaintext highlighter-rouge">fontFamily</code> style.</p>

<h1 id="android">Android</h1>

<p>For Android, we are going to use <a href="https://developer.android.com/guide/topics/ui/look-and-feel/fonts-in-xml">XML Fonts</a> to define variants of a base font family.</p>

<blockquote>
  <p>Remark: This procedure is available in React Native since commit fd6386a07eb75a8ec16b1384a3e5827dea520b64 (7 May 2019 ), with the addition of ReactFontManager::addCustomFont method.</p>

</blockquote>

<h3 id="1-copy-and-rename-assets-to-the-resource-font-folder">1. Copy and rename assets to the resource font folder</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>android/app/src/main/res/font
<span class="nb">cp</span> ./raleway/<span class="k">*</span>.ttf android/app/src/main/res/font
</code></pre></div></div>

<p>We must rename the font files following these rules to comply with Android asset names restrictions:</p>

<ul>
  <li>Replace <code class="language-plaintext highlighter-rouge">-</code> with <code class="language-plaintext highlighter-rouge">_</code>;</li>
  <li>Replace any uppercase letter with its lowercase counterpart.</li>
</ul>

<p>You can use the below bash script (make sure you give the font folder as first argument):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># fixfonts.sh</span>

<span class="nb">typeset </span><span class="nv">folder</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span><span class="k">if</span> <span class="o">[[</span> <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$folder</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$folder</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">pushd</span> <span class="s2">"</span><span class="nv">$folder</span><span class="s2">"</span><span class="p">;</span>
  <span class="k">for </span>file <span class="k">in</span> <span class="k">*</span>.ttf<span class="p">;</span> <span class="k">do
    </span><span class="nb">typeset </span><span class="nv">normalized</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">file</span><span class="p">//-/_</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span>
    <span class="nv">normalized</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">normalized</span><span class="p">,,</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span>
    <span class="nb">mv</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$normalized</span><span class="s2">"</span>  <span class="k">done
  </span><span class="nb">popd
</span><span class="k">fi</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./fixfonts.sh /path/to/root/FontDemo/android/app/src/main/res/font
</code></pre></div></div>

<h3 id="2-create-the-definition-file">2. Create the definition file</h3>

<p>Create the <code class="language-plaintext highlighter-rouge">android/app/src/main/res/font/raleway.xml</code> file with the below content. Basically, we must create one entry per <code class="language-plaintext highlighter-rouge">fontStyle</code> / <code class="language-plaintext highlighter-rouge">fontWeight</code> combination we wish to support, and register the corresponding asset name.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;font-family xmlns:app="http://schemas.android.com/apk/res-auto"&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="100" app:font="@font/raleway_thin" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="100" app:font="@font/raleway_thinitalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="200" app:font="@font/raleway_extralight" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="200" app:font="@font/raleway_extralightitalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="300" app:font="@font/raleway_light" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="300" app:font="@font/raleway_lightitalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="400" app:font="@font/raleway_regular" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="400" app:font="@font/raleway_italic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="500" app:font="@font/raleway_medium" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="500" app:font="@font/raleway_mediumitalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="600" app:font="@font/raleway_semibold" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="600" app:font="@font/raleway_semibolditalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="700" app:font="@font/raleway_bold" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="700" app:font="@font/raleway_bolditalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="800" app:font="@font/raleway_extrabold" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="800" app:font="@font/raleway_extrabolditalic"/&gt;
    &lt;font app:fontStyle="normal" app:fontWeight="900" app:font="@font/raleway_black" /&gt;
    &lt;font app:fontStyle="italic" app:fontWeight="900" app:font="@font/raleway_blackitalic"/&gt;
&lt;/font-family&gt;
</code></pre></div></div>

<h3 id="3-register-the-new-font">3. Register the new font</h3>

<p>In <code class="language-plaintext highlighter-rouge">android/app/src/main/java/com/fontdemo/MainApplication.java</code>, bind the font family name with the asset we just created inside <code class="language-plaintext highlighter-rouge">onCreate</code> method.</p>

<blockquote>
  <p>⚠️ If you are registering a different font, make sure you replace “Raleway” with the name found in the former step (find font family name).</p>

</blockquote>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">import com.facebook.react.ReactApplication;
</span> import com.facebook.react.ReactInstanceManager;
 import com.facebook.react.ReactNativeHost;
 import com.facebook.react.ReactPackage;
<span class="gi">+import com.facebook.react.views.text.ReactFontManager;
</span> import com.facebook.soloader.SoLoader;
 import java.lang.reflect.InvocationTargetException;
 import java.util.List;

public class MainApplication extends Application implements ReactApplication {
   @Override
   public void onCreate() {
     super.onCreate();
<span class="gi">+    [ReactFontManager.getInstance().addCustomFont(this, "Raleway", R.font.raleway);](https://www.notion.so/Locio-6a09ff579fbc4cb6aaf5cff020ef8df0?pvs=21)
</span>     SoLoader.init(this, /* native exopackage */ false);
     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
   }

</code></pre></div></div>

<h1 id="ios">iOS</h1>

<p>On iOS, things will get much easier. We will basically just need to use React Native asset link functionality. This method requires that we use the font family name retrieved in the first step as <code class="language-plaintext highlighter-rouge">fontFamily</code> style attribute.</p>

<h3 id="copy-font-files-to-assets-folder">Copy font files to assets folder</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir -p assets/fonts
cp /tmp/raleway/*.ttf assets/fonts
</code></pre></div></div>

<h3 id="addreact-nativeconfigjs">Add <code class="language-plaintext highlighter-rouge">react-native.config.js</code></h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>module.exports = {
  project: {
    ios: {},
    android: {},
  },
  assets: ['./assets/fonts'],
};
</code></pre></div></div>

<h3 id="link">Link</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx react-native-asset
</code></pre></div></div>

<p>You can remove assets for android generated with this command, since we are using the XML Font method. Otherwise, they would be included twice in the app bundle!</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-rf</span> android/app/src/main/assets/fonts
</code></pre></div></div>

<h1 id="setting-a-default-global-font">Setting a default global font</h1>

<p>After the fonts are installed one can simply define a global default font by installing <code class="language-plaintext highlighter-rouge">react-native-simple-default-props</code>:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">yarn add react-native-simple-default-props
</span></code></pre></div></div>

<p>Then on app start:</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">setDefaultProps</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-native-simple-default-props</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">setDefaultProps</span><span class="p">(</span><span class="nx">Text</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">style</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">fontFamily</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Raleway</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#0F0F26</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Now you can simply use any <code class="language-plaintext highlighter-rouge">&lt;Text/&gt;</code>component without the need for any semantic wrapper!</p>

<h1 id="credits">Credits</h1>

<p>Credit to <a href="https://github.com/jsamr/react-native-font-demo#goal">https://github.com/jsamr/react-native-font-demo</a> for finding the xml fonts setup.</p>

<p><a href="https://github.com/dioi2000/react-native-simple-default-props#readme">https://github.com/dioi2000/react-native-simple-default-props</a> for the easy setup of default styles.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Dealing with fonts in React Nativeis painful, iOS uses the canonical name, while android uses file names. This leads to most developers wrapping the &lt;Text&gt; component in some custom component that sets the fontFamily style in some logic to detect the correct name in iOS and Android. We can however fix this and use a single canonical name. Like this:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">React Native JSI/TurboModules pitfalls</title><link href="https://ospfranco.com/post/2022/06/05/jsi-pitfalls/" rel="alternate" type="text/html" title="React Native JSI/TurboModules pitfalls" /><published>2022-06-05T15:00:00+02:00</published><updated>2022-06-05T15:00:00+02:00</updated><id>https://ospfranco.com/post/2022/06/05/jsi%20pitfalls</id><content type="html" xml:base="https://ospfranco.com/post/2022/06/05/jsi-pitfalls/"><![CDATA[<p>Here is the latest information dump my findings with React Native’s JSI.</p>

<h1 id="speed-is-relative">Speed is relative</h1>

<p>C++ is the fastest but Swift is fast, Java ByteCode is also fast. Using JSI/TurboModules won’t necessarily make your module faster. <strong>The JSI is a communication layer</strong>, therefore it excels in situations where you <strong>transfer</strong> a lot of data between native and JavaScript.</p>

<p>If you need to pass a few bytes once (or a few times), the old APIs are easier to work with and the performance penalty might be small enough that you might be better off skipping the JSI. Reading a small piece of data from AsyncStorage takes 5ms on release mode, so this extrapolates to any package that does a lot of calculation on the native side and then only returns a small chunk of data to JavaScript.</p>

<p>Here is a comparison, reading a small string (“hello”), one time (release mode -O2 optimized):</p>

<table>
  <thead>
    <tr>
      <th>Framework</th>
      <th>Time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>MMKV</td>
      <td>&gt; 0ms</td>
    </tr>
    <tr>
      <td>Quick SQLite</td>
      <td>&gt; 0ms</td>
    </tr>
    <tr>
      <td>WatermelonDB</td>
      <td>&gt; 8ms</td>
    </tr>
    <tr>
      <td>Async Storage</td>
      <td>&gt; 5ms</td>
    </tr>
  </tbody>
</table>

<p>Artificial benchmarks testing reading the same value or calculating something thousands of times are… disingenuous.</p>

<p>Most frameworks have caches implemented to them, reading anything more than once results in testing if the cache is there. Other important details cannot be ignored: MMKV is a key/value storage, whereas Quick SQLite and WatermelonDB are relational databases on top of SQLite, comparing them is comparing apples to oranges.</p>

<p>Calculating data thousands of times will also mix JSI performance with C++/Swift/Kotlin performance, hard to tell when one ends and the other begins.</p>

<p>IMO it is better to test <strong>transferring a large amount of data</strong>. However, it is hard to find a test that actually makes sense, because details can affect the performance. Returning one large string will only mem-copy (Strings on your native code are not returned directly to JavaScript, but the memory needs to be copied to JSI Strings) once, whereas returning a lot of strings, will have allocate memory multiple times.</p>

<p>I can share some anecdotic experience of some people using Quick SQLite. <a href="https://dev.to/craftzdog/a-performant-way-to-use-pouchdb7-on-react-native-in-2022-24ej">Takuya experienced 2x to 5x speed boost</a> when switching from the old bridge SQLite driver, user <a href="https://twitter.com/sallar">@sallar</a> experienced 2x - 2.5x speed improvement, query time reduced from 600ms to ~250ms, with large SQLite queries. The larger your SQL results the better will Quick SQLite perform for you.</p>

<p>Just to be clear <strong>JSI does cuts the overhead of communication</strong>, transferring a few bytes once is just not the best use-case. It will also excel in cases where you transfer a small chunk of data but you need to do it very often, e.g. reanimated.</p>

<h1 id="i-want-to-use-xyz-programming-language">I want to use XYZ programming language</h1>

<p>Among the questions that get repeated over and over is “how can I use my favorite language?”. I even made a video about it, <a href="https://www.youtube.com/watch?v=_I6bH5_rO2k&amp;t=178s">go watch it</a>.</p>

<p>In the video I made a mistake, I made it sound like there is no possibility to use any other language, which is not technically correct. So here it is explained in a list so hopefully it will be clearer for everyone:</p>

<ul>
  <li>Everything is based on the JSI.</li>
  <li>The JSI is C++.</li>
  <li>TurboModules generates C++ headers (meant to be used with ObjC++ and JNI C++).</li>
  <li>TurboModules currently only allow to use implement the generated headers with ObjC++ and JNI C++.</li>
  <li><strong>You can use any language you want, if you can call it from the native mobile languages</strong>. If you can compile your code (and link it as a static library if necessary), you can just call it. It just misses the point of TurboModules, because a big reason is to give auto-generated type safety. Your compilation process might also become complex (e.g. using Rust)</li>
</ul>

<p>You can use w/e you want, it’s just that you will have to manually modify and sync your function signatures. And to be clear this is partly a limitation of JSI and in some cases compatibility between languages (e.g. Swift and C++ interoperability).</p>

<h1 id="its-so-complex-flutter-is-easy">It’s so complex! Flutter is easy</h1>

<p>Don’t drink this cool-aid, all frameworks abstract the heavy-lifting for you. Even if you would write your app in native there would be occasions where you will have to deal with some complexity. If not on the language level, it would be on the API level, on some integration, on some framework model. etc. I have written a fair amount of native code at this point and I it doesn’t get any easier.</p>

<p>I have already seen tweets from flutter devs complaining they are writing dart/swift/kotlin/c++ code at the same time. If you are interested in this topic you are going deep into the inner working of the frameworks, this is usually what it takes to build software at this level.</p>

<p>As far as I can see here are the options:</p>

<ul>
  <li>Wait and hope someone solves your problem</li>
  <li>Create your own framework (With time you will hit the C++/Swift/Kotlin problem anyways)</li>
  <li>Pay someone to solve the problem for you</li>
  <li>DIY and enjoy the process</li>
</ul>

<p><a href="mailto:ospfranco@gmail.com">Get in touch if you need help with the JSI</a>.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Here is the latest information dump my findings with React Native’s JSI.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Email templates with React and Tailwind</title><link href="https://ospfranco.com/post/2022/01/08/email-templates-with-react-and-tailwind/" rel="alternate" type="text/html" title="Email templates with React and Tailwind" /><published>2022-01-08T14:00:00+01:00</published><updated>2022-01-08T14:00:00+01:00</updated><id>https://ospfranco.com/post/2022/01/08/email%20templates%20with%20react%20and%20tailwind</id><content type="html" xml:base="https://ospfranco.com/post/2022/01/08/email-templates-with-react-and-tailwind/"><![CDATA[<p>Sending emails is basic SaaS 101, however it always feel broken to me. Instead of using the same tools I used to develop my apps, I always ended up importing a different framework, we used to use one many years ago with Java, on Node we used handlebars, this is just one more link of complexity in the modern tech stack.</p>

<p>I didn’t want to go down that path one more time, so I spend some time trying to answer one question: can I create a email template using only React and Tailwind (with my existing configuration) and the answer is: YES! well, mostly…</p>

<h2 id="render-a-react-component-to-plain-html-markup">Render a React component to plain HTML Markup</h2>

<p>The first part of this question was the easiest to answer, how to turn a React component into raw html string:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// unfortunately no type information for this module</span>
<span class="c1">// @ts-ignore</span>
<span class="k">import</span> <span class="nx">ReactDOMServer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-dom/server</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">TestMail</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
      <span class="c1">// important to keep the color scheme on some email clients</span>
      <span class="p">{</span><span class="cm">/* &lt;meta name="color-scheme" content="only"&gt;&lt;/meta&gt; */</span><span class="p">}</span>
      <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span><span class="c1">// We will use this later&lt;/head&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">py-3</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Hi</span> <span class="nx">I</span> <span class="nx">am</span> <span class="nx">a</span> <span class="nx">react</span> <span class="nx">component</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/html</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">emailHtml</span> <span class="o">=</span> <span class="nx">ReactDOMServer</span><span class="p">.</span><span class="nx">renderToStaticMarkup</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">TestMail</span> <span class="o">/&gt;</span><span class="p">);</span>
</code></pre></div></div>

<p>This will take a React component and render it as a plain HTML markup, you can see I have a tailwind class in there <code class="language-plaintext highlighter-rouge">py-3</code>, unfortunately if you take a look inside the html, you will see it has not been transpiled, so we need to run this html through an inliner to it inlines all the classes as embedded style props in the html.</p>

<p>This was the tricky part, there are some frameworks that try to solve this exact problem, like maizzle for example, but just by reading the home page I already see an ocean of complexity, so early in my googling I stumbled upon <a href="https://github.com/soheilpro/mailwind">Mailwind</a>, the instructions were scant, but it was exactly what I wanted, it works based on <a href="https://github.com/Automattic/juice">Juice</a>, not going to bore you with the details, here is the snippet that makes it work:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">juice</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">juice</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nx">juicify</span><span class="p">(</span><span class="nx">html</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">juice</span><span class="p">.</span><span class="nx">juiceResources</span><span class="p">(</span>
      <span class="nx">html</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="na">webResources</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">relativeTo</span><span class="p">:</span> <span class="dl">"</span><span class="s2">public/</span><span class="dl">"</span><span class="p">,</span>
        <span class="p">},</span>
      <span class="p">},</span>
      <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">processed</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">`Could not juice email</span><span class="p">${</span><span class="nx">err</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="nx">resolve</span><span class="p">(</span><span class="nx">processed</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You also need to update the email component to include a stylesheet in the head tag:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
  <span class="p">{</span><span class="cm">/* eslint-disable-next-line @next/next/no-css-tags */</span><span class="p">}</span>
  <span class="o">&lt;</span><span class="nx">link</span> <span class="nx">href</span><span class="o">=</span><span class="dl">"</span><span class="s2">mailwind.css</span><span class="dl">"</span> <span class="nx">rel</span><span class="o">=</span><span class="dl">"</span><span class="s2">stylesheet</span><span class="dl">"</span> <span class="nx">data</span><span class="o">-</span><span class="nx">inline</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="sr">/head</span><span class="err">&gt;
</span></code></pre></div></div>

<blockquote>
  <p>You can already see that you need to import mailwind.css file and make it accessible somewhere in your project, on the juicify function the <code class="language-plaintext highlighter-rouge">relativeTo</code> path, will allow juice to correctly determine where to fetch the .css file</p>
</blockquote>

<p>And TA-DA you have working email templates with React and Tailwind, no need for complex framework, configuration files, etc. The juicify function will output a raw string, which you can send to your email distributor and it should work just fine.</p>

<h2 id="the-caveat">The caveat</h2>

<p>Now there is one small caveat here, which is the mailwind.css file, it’s not going to be your application styles, some of the changes are good, for example everything being based on px styles, but you might need your own colors, or paddings, etc.</p>

<p>TBH this is where I stopped because this is good enough for me, but if you really need your own styles, I figure this is not too hard to achieve, you basically need to tell tailwind to process your <code class="language-plaintext highlighter-rouge">tailwind.config.js</code> and spit out a <code class="language-plaintext highlighter-rouge">.css</code> file, shouldn’t be too hard, the small details of PX units I have not tried, but I think that should also be fixable. For me I only had to add 2 - 3 classes with some extra fill colors, and I can live with that.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Sending emails is basic SaaS 101, however it always feel broken to me. Instead of using the same tools I used to develop my apps, I always ended up importing a different framework, we used to use one many years ago with Java, on Node we used handlebars, this is just one more link of complexity in the modern tech stack.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Reset NVRAM on m1 mac</title><link href="https://ospfranco.com/post/2021/12/21/reset-nvram-on-m1-mac/" rel="alternate" type="text/html" title="Reset NVRAM on m1 mac" /><published>2021-12-21T14:00:00+01:00</published><updated>2021-12-21T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/12/21/reset%20nvram%20on%20m1%20mac</id><content type="html" xml:base="https://ospfranco.com/post/2021/12/21/reset-nvram-on-m1-mac/"><![CDATA[<p>I needed to reset my M1 NVRAM for reasons, here to save you some seconds of googling</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo nvram -c
</code></pre></div></div>

<p>You might see some errors regarding some services that cannot be restarted (fmm-mobileme and fmm-computer-name), but you can ignore those, afterwards restart your computer and it should be fine</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[I needed to reset my M1 NVRAM for reasons, here to save you some seconds of googling]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Never use anything except a pure UUID (Anti REGEX argument)</title><link href="https://ospfranco.com/post/2021/12/18/never-use-anything-except-a-pure-uuid/" rel="alternate" type="text/html" title="Never use anything except a pure UUID (Anti REGEX argument)" /><published>2021-12-18T14:00:00+01:00</published><updated>2021-12-18T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/12/18/never%20use%20anything%20except%20a%20pure%20uuid</id><content type="html" xml:base="https://ospfranco.com/post/2021/12/18/never-use-anything-except-a-pure-uuid/"><![CDATA[<p>Browsing my notes found this small gem</p>

<blockquote>
  <p>Use UUIDs for id-ing your entities. Period.</p>

  <p>Do not use anything else, don’t try to be clever, it just creates embedded logic and soon you will find yourself regexing your ids like a chump</p>
</blockquote>

<h2 id="lesson-never-learned">Lesson never learned</h2>

<p>I first came into this idea many years ago, my college professor was in charge of designing and leading the team responsible for the student system (assignments, class schedules, notes, etc), they bought an Israeli system and then adapted it for our university.</p>

<p>At the time, my professor thought it would be a great idea to make the user ids contain some extra information, so that one could at first glance tell the enrollment year and the student age, so each student id would be something like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[enrollment_year]_[birth_year]_[id_number]
</code></pre></div></div>

<p>This is great in theory, whoemever is in charge already gets some information without needing to type the id into the system.</p>

<h2 id="embedded-logic">Embedded logic</h2>

<p>In real life, this created a slew of problems, one of them was that the students id were easily guessable, this created a lot of problems with phishing attempts, this had serious consequences.</p>

<p>But another more subtle was the consequence for the project code itself, since some of the information now did not need a query to the database, then came the REGEXES, to parse and extract this meta information from the IDs.</p>

<p>This generates a lot implicit and embedded logic, what if the ID needs to be changed? then entire parts of the system didn’t work properly anymore.</p>

<h2 id="regexes-are-fine-on-5-of-the-cases">REGEXES are fine on 5% of the cases</h2>

<p>Regexes definitely have their use cases, especially when extracting information from a third-party data source, where you have no control over the data you are getting.</p>

<p>But please, don’t ever try to embed data in your systems.</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Browsing my notes found this small gem]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to install M1 (arm) compatible JDK</title><link href="https://ospfranco.com/post/2021/12/11/how-to-install-m1-(arm)-compatible-jdk/" rel="alternate" type="text/html" title="How to install M1 (arm) compatible JDK" /><published>2021-12-11T14:00:00+01:00</published><updated>2021-12-11T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/12/11/how%20to%20install%20m1%20(arm)%20compatible%20jdk</id><content type="html" xml:base="https://ospfranco.com/post/2021/12/11/how-to-install-m1-(arm)-compatible-jdk/"><![CDATA[<p>Recently found out a nice trick to easily install a compatible JDK on mac without scouring the internet or brew formulas.</p>

<p>You can directly do it via Android Studio (or intellij IDEA), just go into the preferences and on the build tools &gt; gradle menu, you can select which version of the JDK you want to use, if you open the dropdown you will see there is also an option to download a JDK.</p>

<p><img src="https://ospfranco.com/assets/androidStudio1.png" alt="Android Studio 1" /></p>

<p>Click on it and you will get a small dialog were you can select the flavor of JDK you want, I know for certain that the Azul versions are arm compatible.</p>

<p><img src="https://ospfranco.com/assets/androidStudio2.png" alt="Android Studio 2" /></p>

<p>(BTW I’m using the Android Studio Preview to get native arm android images)</p>

<p>Very convenient!</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Recently found out a nice trick to easily install a compatible JDK on mac without scouring the internet or brew formulas.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Startups Latinoamerica</title><link href="https://ospfranco.com/post/2021/11/04/startups-latinoamerica/" rel="alternate" type="text/html" title="Startups Latinoamerica" /><published>2021-11-04T14:00:00+01:00</published><updated>2021-11-04T14:00:00+01:00</updated><id>https://ospfranco.com/post/2021/11/04/startups%20latinoamerica</id><content type="html" xml:base="https://ospfranco.com/post/2021/11/04/startups-latinoamerica/"><![CDATA[<p>Aquí les dejo la presentanción de la charla sobre Startups en Latinoamérica:</p>

<p><a href="https://ospfranco.com/assets/StartUpsLatinoamerica.key">Presentación</a></p>

<p>Espero ver alguna Startup Boliviana en algunos años! Si necesitan apoyo no duden en contactarme!</p>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[Aquí les dejo la presentanción de la charla sobre Startups en Latinoamérica:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to visualize Flowtype dependency tree</title><link href="https://ospfranco.com/post/2021/08/25/how-to-visualize-flowtype-dependency-tree/" rel="alternate" type="text/html" title="How to visualize Flowtype dependency tree" /><published>2021-08-25T15:00:00+02:00</published><updated>2021-08-25T15:00:00+02:00</updated><id>https://ospfranco.com/post/2021/08/25/how%20to%20visualize%20flowtype%20dependency%20tree</id><content type="html" xml:base="https://ospfranco.com/post/2021/08/25/how-to-visualize-flowtype-dependency-tree/"><![CDATA[<p>At work we use <a href="https://flow.org">FlowType</a> on our JavaScript application. I’m a fan of JS type checkers, flow is not my favorite, but what is important is that it works.</p>

<p>However, when I joined the company I was surprised on how slow Flow was in our project. The project is large but not extremely large. Facebook codebase is orders of magnitude bigger, yet this is the performance I see sometimes</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/hloQX8wG0t0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>Upon saving this file, flow triggers a ~420 file dependency check and takes ~10 seconds to actually report any type errors.</p>

<h1 id="check-that-nothing-else-is-wrongly-set-up">Check that nothing else is wrongly set up</h1>

<p>First I started checking nothing was poorly set up in our project. A lot of the debugging <a href="https://stackoverflow.com/questions/68833468/how-to-debug-flowtype-extreme-slow-performance?noredirect=1#comment121793043_68833468">help came from Stack Overflow</a> and other people with flow experience.</p>

<p>Some of the things I tried:</p>

<ul>
  <li>Deleting flow-typed definitions: sometimes they contain cycles or redundant definitions which can slow down flow</li>
  <li>Got rid of circular dependencies: we had 2 - 3 circular dependencies in our code</li>
  <li>Shuffled around types: Moved types here and there to no avail</li>
  <li>Messed around with the .flowconfig: set up LSP, lazy mode FS, changed max workers, toggled various flags</li>
  <li>Blamed the plugin: I’m using the FB plugin for flow on VSCode, which does seems to over-query the flow server on each keystroke, tried another plugin which only queries on save, feels like a minor improvement but still slow</li>
  <li>Tried several small flow repos: none experienced this slow down</li>
</ul>

<h1 id="assume-flow-is-actually-right">Assume flow is actually right</h1>

<p>Flow is a large project and facebook depends on it, so the chances that it is doing something wrong are slim, but I couldn’t believe making a change on certain file, did indeed trigger a 400+ file check. I needed to make sure.</p>

<p>I scoured the web trying to find out how debug the type dependency tree, but found nothing. The biggest pain point for me about flow, is the utter lack of documentation and community, the flow team also pays very little attention to the outside world and their priority is to support the facebook codebase.</p>

<p>After many hours ended up figuring out the right command to output the entire dependency graph for the app:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn flow graph dep-graph <span class="nt">--strip-root</span> <span class="nt">--out</span> ./output
</code></pre></div></div>

<p>This however it only produces the entire app graph… you can imagine this file is hundred thousand of lines of dependencies. In any case, this outputs a DOT file (from graphviz), which in theory you can easily visualize by using the right command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># install dot via "brew install graphviz"</span>

<span class="c"># I tried a png first... it just fails</span>

dot <span class="nt">-Tsvg</span> output <span class="nt">-o</span> graph.svg
</code></pre></div></div>

<p>This produces an svg so massive and so filled with squigly lines it is effectively useless… so I had to narrow down the output to just an entry file which I’m interested. Unfortunately the <code class="language-plaintext highlighter-rouge">graph</code> command does not take an entry point to generate the graph, so I had to manually narrow down the graph that I had. Here is the gist with the script I ended up coming up with:</p>

<script src="https://gist.github.com/ospfranco/d599a68f1a2fe1f39a457162238fec78.js"></script>

<blockquote>
  <p>Note: I removed the first and last line of the graph file before passing it to the script</p>
</blockquote>

<p>This allowed me to crawl through the entries and finally specify an entry point to the sub-tree that interested me. Once narrowed down, I could finally produce another visualization, and the result is:</p>

<p><img src="https://ospfranco.com/assets/flowdep1.png" alt="flowdep1" title="flowdep1" /></p>

<p>Terrible! But not all is useless, I can see the direct imports from the file are correct… and I can indeed see things spiral out of control, importing certain files ends up pulling the entire application code!</p>

<p><img src="https://ospfranco.com/assets/flowdep2.png" alt="flowdep1" title="flowdep1" /></p>

<p>The count of objects in this sub-graph also seems to match closely the output produced by flow, this sub-graph has 415 nodes and the editor triggers a 420 file re-check.</p>

<h1 id="conclusion">Conclusion?</h1>

<p>Well… it seems to me Flow is doing nothing wrong, it indeed produces the correct dependency graph, but rather that our import structure has grown unchecked so large over the years that we have some architectural mistakes we cannot escape.</p>

<p>My current analysis is that Redux and Sagas are mostly to blame, the boiler plate nature of it and the coupling of action creators, action definitions and the reducers into single files ends up creating this web of dependencies.</p>

<p>Some very abstract suggestions for those along this path:</p>

<ul>
  <li>Do not place your action definitions (and creators if you use them) inside the same files as your reducers.</li>
  <li>The moment you start seeing a performance degradation in your type checking, is the time to figure out why, pushing the can down the road will lead to trouble.</li>
  <li>Come up with a sane import architecture, minimizing the dependencies between separate files. I think I will write about this in the future.</li>
</ul>]]></content><author><name>Oscar Franco</name></author><category term="post" /><summary type="html"><![CDATA[At work we use FlowType on our JavaScript application. I’m a fan of JS type checkers, flow is not my favorite, but what is important is that it works.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ospfranco.com/assets/profile.JPG" /><media:content medium="image" url="https://ospfranco.com/assets/profile.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>